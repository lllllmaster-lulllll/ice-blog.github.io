<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曙光的博客</title>
  
  <subtitle>一个人如果不能从内心去原谅别人,那他就永远不会心安理得</subtitle>
  <link href="https://lllllmaster-lulllll.github.io/atom.xml" rel="self"/>
  
  <link href="https://lllllmaster-lulllll.github.io/"/>
  <updated>2022-03-02T14:27:05.771Z</updated>
  <id>https://lllllmaster-lulllll.github.io/</id>
  
  <author>
    <name>Aurora</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/newfile/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/newfile/</id>
    <published>2022-03-02T14:26:25.016Z</published>
    <updated>2022-03-02T14:27:05.771Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JetBrains 激活</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/JetBrains%20%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/JetBrains%20%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:29:04.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JetBrains-激活"><a href="#JetBrains-激活" class="headerlink" title="JetBrains 激活"></a>JetBrains 激活</h1><p>免责声明：所有教程均来源于网络，完全免费！不得将下述内容用于商业或者非法用途，否则，一切后果自负。版权争议与我无关，您必须在下载后的24个小时之内，从您的电脑中彻底删除下述内容。访问和下载下述内容，说明您已同意上述条款。</p><p>方案1、正版激活码</p><p>第一步，打开链接：<a href="http://idea.javatiku.cn/">http://idea.javatiku.cn</a><br>第二步，输入验证码：1567</p><p>说明：浏览器打开体验更好。</p><p>方案2、pojie补丁下载地址（推荐）</p><p>补丁使用教程见压缩包</p><p>链接: <a href="https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg">https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg</a> 提取码: s4q4 </p><p>如遇软件使用问题无法解决，请加微信：pydd156</p><p>本号启用取关验证功能，取关后再次关注将无法使用部分功能，请勿轻易取关</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JetBrains-激活&quot;&gt;&lt;a href=&quot;#JetBrains-激活&quot; class=&quot;headerlink&quot; title=&quot;JetBrains 激活&quot;&gt;&lt;/a&gt;JetBrains 激活&lt;/h1&gt;&lt;p&gt;免责声明：所有教程均来源于网络，完全免费！不得将下述内容用于</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac 卸载annconda</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Mac%20%E5%8D%B8%E8%BD%BDannconda/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Mac%20%E5%8D%B8%E8%BD%BDannconda/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:30:07.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-卸载annconda"><a href="#Mac-卸载annconda" class="headerlink" title="Mac 卸载annconda"></a>Mac 卸载annconda</h1><h2 id="第一步，删除Anaconda的配置，命令如下"><a href="#第一步，删除Anaconda的配置，命令如下" class="headerlink" title="第一步，删除Anaconda的配置，命令如下"></a>第一步，删除<a href="https://so.csdn.net/so/search?q=Anaconda&spm=1001.2101.3001.7020">Anaconda</a>的配置，命令如下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install anaconda-clean</span><br><span class="line">anaconda-clean</span><br></pre></td></tr></table></figure><h3 id="删除备份"><a href="#删除备份" class="headerlink" title="删除备份"></a>删除备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r /Users/aurora/.anaconda_backup/2022-02-08T193117</span><br></pre></td></tr></table></figure><p><strong>注：命令中黑色文字就是上图中的 Backup directory，直接复制替换即可</strong></p><h2 id="第二步，删除Anaconda的文件夹，命令如下"><a href="#第二步，删除Anaconda的文件夹，命令如下" class="headerlink" title="第二步，删除Anaconda的文件夹，命令如下"></a>第二步，删除Anaconda的文件夹，命令如下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/opt/anaconda3</span><br></pre></td></tr></table></figure><h2 id="第三步，删除-x2F-bash-profile-也可能是其他配置文件-中anaconda的环境变量，可以使用vim打开删除"><a href="#第三步，删除-x2F-bash-profile-也可能是其他配置文件-中anaconda的环境变量，可以使用vim打开删除" class="headerlink" title="第三步，删除 ~&#x2F;.bash_profile(也可能是其他配置文件)中anaconda的环境变量，可以使用vim打开删除"></a>第三步，删除 ~&#x2F;.bash_profile(也可能是其他配置文件)中anaconda的环境变量，可以使用vim打开删除</h2><p><strong>打开terminal，输入如下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><h2 id="第四步，删除Anaconda的可能存在隐藏的文件"><a href="#第四步，删除Anaconda的可能存在隐藏的文件" class="headerlink" title="第四步，删除Anaconda的可能存在隐藏的文件"></a>第四步，删除Anaconda的可能存在隐藏的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure><h3 id="第五步，验证"><a href="#第五步，验证" class="headerlink" title="第五步，验证"></a>第五步，验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anadonca -V</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202081949496.png" alt="image-20220208194952465"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac-卸载annconda&quot;&gt;&lt;a href=&quot;#Mac-卸载annconda&quot; class=&quot;headerlink&quot; title=&quot;Mac 卸载annconda&quot;&gt;&lt;/a&gt;Mac 卸载annconda&lt;/h1&gt;&lt;h2 id=&quot;第一步，删除Anaconda的配置</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>conda 常用设置</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/conda%E8%AE%BE%E7%BD%AE/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/conda%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:33:24.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda-常用设置"><a href="#conda-常用设置" class="headerlink" title="conda 常用设置"></a>conda 常用设置</h1><h2 id="conda-关闭默认启动环境（base）"><a href="#conda-关闭默认启动环境（base）" class="headerlink" title="conda 关闭默认启动环境（base）"></a>conda 关闭默认启动环境（base）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set auto_activate_base false</span><br></pre></td></tr></table></figure><h2 id="conda切换国内源-中科大"><a href="#conda切换国内源-中科大" class="headerlink" title="conda切换国内源(中科大)"></a>conda切换国内源(中科大)</h2><h4 id="shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）"><a href="#shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）" class="headerlink" title="shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）"></a>shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h4 id="查看是否添加成功"><a href="#查看是否添加成功" class="headerlink" title="查看是否添加成功"></a>查看是否添加成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.condarc</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202082023813.png" alt="image-20220208202358789"></p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><ul><li>查看conda版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda --version</span><br></pre></td></tr></table></figure><ul><li>更新conda版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update conda</span><br></pre></td></tr></table></figure><ul><li>查看都安装了那些依赖库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda list</span><br></pre></td></tr></table></figure><ul><li>创建新的python环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create --name myenv</span><br></pre></td></tr></table></figure><p>并且还可以指定python的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv python=3.7</span><br></pre></td></tr></table></figure><ul><li>创建新环境并指定包含的库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv scipy</span><br></pre></td></tr></table></figure><p>并且还可以指定库的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv scipy=0.15.0</span><br></pre></td></tr></table></figure><ul><li>复制环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create --name myclone --clone myenv</span><br></pre></td></tr></table></figure><p>查看是不是复制成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda info --envs</span><br></pre></td></tr></table></figure><ul><li>激活、进入某个环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source activate myenv</span><br></pre></td></tr></table></figure><ul><li>退出环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source deactivate</span><br></pre></td></tr></table></figure><ul><li>删除环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda remove --name myenv --all</span><br></pre></td></tr></table></figure><ul><li>查看当前的环境列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda info --envs or $ conda env list</span><br></pre></td></tr></table></figure><ul><li>查看某个环境下安装的库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda list -n myenv</span><br></pre></td></tr></table></figure><ul><li>查找包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda search XXX</span><br></pre></td></tr></table></figure><ul><li>安装包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install XXX</span><br></pre></td></tr></table></figure><ul><li>更新包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update XXX</span><br></pre></td></tr></table></figure><ul><li>删除包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda remove XXX</span><br></pre></td></tr></table></figure><ul><li>安装到指定环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install -n myenv XXX</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;conda-常用设置&quot;&gt;&lt;a href=&quot;#conda-常用设置&quot; class=&quot;headerlink&quot; title=&quot;conda 常用设置&quot;&gt;&lt;/a&gt;conda 常用设置&lt;/h1&gt;&lt;h2 id=&quot;conda-关闭默认启动环境（base）&quot;&gt;&lt;a href=&quot;#c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go 语言环境安装（Mac）</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:39.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-语言环境安装"><a href="#go-语言环境安装" class="headerlink" title="go 语言环境安装"></a>go 语言环境安装</h1><h4 id="1-下载go安装包"><a href="#1-下载go安装包" class="headerlink" title="1. 下载go安装包"></a>1. 下载go安装包</h4><p>官网下载go安装包： <a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><p>下载go二进制包<code>go1.16.2.darwin-amd64.tar.gz</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://golang.google.cn/dl/go1.16.2.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-安装go"><a href="#2-安装go" class="headerlink" title="2. 安装go"></a>2. 安装go</h4><p>安装目录： <code>/usr/local/go</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xzvf go1.16.2.darwin-amd64.tar.gz -C /usr/local</span><br><span class="line">cd /usr/local/go</span><br></pre></td></tr></table></figure><p>查看go的安装目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><p>编辑<code>~/.bash_profile</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">export GOPATH=$HOME/iceCode/godev</span><br></pre></td></tr></table></figure><p>注意， <code>GOPATH</code>配置为你的工作区目录</p><p>编辑<code>~/.zshrc</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>使终端对以上配置的环境变量生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="4-检测go开发环境是否安装成功"><a href="#4-检测go开发环境是否安装成功" class="headerlink" title="4. 检测go开发环境是否安装成功"></a>4. 检测go开发环境是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line"></span><br><span class="line">省略...</span><br><span class="line"></span><br><span class="line">GOPATH=&quot;/Users/xx/go&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/go&quot;</span><br><span class="line"></span><br><span class="line">省略...</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>GOPATH： go工作区， 即编写代码存放的目录</li><li>GOROOT： go的安装目录</li></ul><p>查看版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.16.2 darwin/amd64</span><br></pre></td></tr></table></figure><p>在<code>GOPATH</code>工作区目录下， 一般有3个目录， 分别是</p><ul><li>bin: 存储可执行bin文件</li><li>pkg: 编译完成的文件</li><li>src: 源代码文件</li></ul><p><code>$GOPATH/pkg</code>目录在执行<code>go get -u 库名</code>会自动创建， <code>src</code>目录不存在则需要手动创建， 示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src</span><br><span class="line">mkdir -p $GOPATH/bin</span><br></pre></td></tr></table></figure><p>在<code>$GOPATH/src</code>目录下， 创建新项目进行开发</p><h4 id="5-设置go国内模块代理"><a href="#5-设置go国内模块代理" class="headerlink" title="5. 设置go国内模块代理"></a>5. 设置go国内模块代理</h4><p>参考： <a href="https://goproxy.cn/">https://goproxy.cn/</a></p><p>编辑<code>~/.bash_profile</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>使以上配置的环境变量生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>至此， go开发环境安装成功。</p><h4 id="6-创建go的hello项目"><a href="#6-创建go的hello项目" class="headerlink" title="6. 创建go的hello项目"></a>6. 创建go的hello项目</h4><p>创建go的hello项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd $GOPATH/src</span><br><span class="line">$ mkdir hello</span><br><span class="line">$ cd hello</span><br><span class="line">$ go mod init zhuxiongxian.com/hello</span><br><span class="line">go: creating new go.mod: module zhuxiongxian.com/hello</span><br><span class="line">go: to add module requirements and sums:</span><br><span class="line">go mod tidy</span><br><span class="line">$ go mod tidy</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>go mod tidy</code>: 增加缺少的module， 删除无用的module</li><li>go get&#x2F;go run&#x2F;go build会自动下载依赖</li></ul><p>创建hello.go文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.go</span><br></pre></td></tr></table></figure><p>hello.go文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(&quot;Hello, World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行go的hello项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd cd $GOPATH/src/hello</span><br><span class="line">$ go run .</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h4 id="7-安装gin框架"><a href="#7-安装gin框架" class="headerlink" title="7. 安装gin框架"></a>7. 安装gin框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p>在代码中导包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br></pre></td></tr></table></figure><h4 id="8-创建gin的demo项目"><a href="#8-创建gin的demo项目" class="headerlink" title="8. 创建gin的demo项目"></a>8. 创建gin的demo项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src</span><br><span class="line">mkdir gin-demo</span><br><span class="line">cd gin-demo</span><br><span class="line">vim example.go</span><br></pre></td></tr></table></figure><p>example.go文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(&quot;/ping&quot;, func(c *gin.Context) &#123;</span><br><span class="line">        c.JSON(200, gin.H&#123;</span><br><span class="line">            &quot;message&quot;: &quot;pong&quot;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    // r.Run() // listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br><span class="line">    r.Run(&quot;:10240&quot;)</span><br><span class="line">&#125;</span><br><span class="line">go mod init zhuxiongxian.com/gin-demo</span><br><span class="line">go mod tidy</span><br><span class="line">go run example.go</span><br><span class="line">或</span><br><span class="line">go run .</span><br></pre></td></tr></table></figure><p>访问： <a href="http://0.0.0.0:10240/ping">http://0.0.0.0:10240/ping</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-语言环境安装&quot;&gt;&lt;a href=&quot;#go-语言环境安装&quot; class=&quot;headerlink&quot; title=&quot;go 语言环境安装&quot;&gt;&lt;/a&gt;go 语言环境安装&lt;/h1&gt;&lt;h4 id=&quot;1-下载go安装包&quot;&gt;&lt;a href=&quot;#1-下载go安装包&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>客户信息管理系统</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%2013%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%2013%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:21.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户信息管理系统"><a href="#客户信息管理系统" class="headerlink" title="客户信息管理系统"></a>客户信息管理系统</h1><h2 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h2><ul><li>模拟实现基于文本界面的《客户信息管理软件》 </li><li>该软件能够实现对客户对象的插入、修改和删除 （用<font color="red"><strong>切片</strong></font>实现），并能够打印客户明细表。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>模拟实现一个基于文本界面的《客户信息管理软件》</li><li>进一步掌握<font color="ff0000"><strong>编程技巧</strong></font>和<font color="red"><strong>调试技巧</strong></font>，熟悉面向对象编程 </li><li>主要涉及以下知识点：<ul><li><strong><font color="ff0000">切片的插入、删除和替换</font></strong></li><li><strong><font color="ff0000">多对象协同工作</font></strong></li></ul></li></ul><h2 id="项目界面设计"><a href="#项目界面设计" class="headerlink" title="项目界面设计"></a>项目界面设计</h2><ul><li><strong>主菜单界面</strong></li></ul><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061305726.png" style="zoom:50%;" /><ul><li><p><strong>添加客户界面</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061310033.png" alt="image-20220206131034726"></p></li><li><p><strong>修改客户界面</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061313415.png" alt="image-20220206131318563"></p></li><li><p><strong>删除客户界面</strong></p></li></ul><p>​    <img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061314626.png" alt="image-20220206131437116"></p><hr><ul><li><strong>客户列表界面</strong></li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061331778.png" alt="image-20220206131849744"></p><h2 id="项目设计-程序框架图"><a href="#项目设计-程序框架图" class="headerlink" title="项目设计-程序框架图"></a>项目设计-程序框架图</h2><p>程序框图：分析该模块有多少个文件（类），和各个类之间的调用关系，程序员需要按照架构师要求，进行分层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[customerView.go界面 1. 可以显示界面 2. 可以接收用户的输入 3.根据用户的输入,调用 customerService 的方法完成客户的管理] --&gt; B(customerService处理业务逻辑 1.完成用户的各种操作 2. 对客户 curd)</span><br><span class="line">    B--&gt;A</span><br><span class="line">    B --&gt; C[customer表示数据 model 层 1.表示一个客户,客户各种字段]</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;客户信息管理系统&quot;&gt;&lt;a href=&quot;#客户信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;客户信息管理系统&quot;&gt;&lt;/a&gt;客户信息管理系统&lt;/h1&gt;&lt;h2 id=&quot;项目需求说明&quot;&gt;&lt;a href=&quot;#项目需求说明&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go 语言_命令行参数</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:32:30.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-语言-命令行参数"><a href="#go-语言-命令行参数" class="headerlink" title="go 语言_命令行参数"></a>go 语言_命令行参数</h1><h2 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>os.Args是一个 string 的切片，用来存储所有的命令行参数</p><h3 id="应用案例："><a href="#应用案例：" class="headerlink" title="应用案例："></a>应用案例：</h3><h5 id="获取命令行各个参数"><a href="#获取命令行各个参数" class="headerlink" title="获取命令行各个参数"></a>获取命令行各个参数</h5><p><strong>代码实现</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;命令行的参数有 &quot;</span>, <span class="built_in">len</span>(os.Args), <span class="string">&quot; 个&quot;</span>)</span><br><span class="line"><span class="comment">//遍历 os.Args 切片,就可以得到所有的命令行输入参数值</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;args[%v]=%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现效果：</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101712259.png" alt="image-20220210163731339"></p><h2 id="flag包用来解析命令行参数"><a href="#flag包用来解析命令行参数" class="headerlink" title="flag包用来解析命令行参数"></a><font color="00ffff"><strong>flag包用来解析命令行参数</strong></font></h2><p><strong>说明</strong>:前面的方式是比较原生的方式，对解析参数不是特别的方便，特别是带有指定 参数形式的命令行。 </p><p>比如：cmd&gt;main.exe -f c:&#x2F;aaa.txt -p 200 -u root 这样的形式命令行，go设计者给我们 提供了 flag包，可以方便的解析命令行参数，<font color="ff0000">**而且参数顺序可以随意 **</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义变量,用于接收命令行的参数值</span></span><br><span class="line"><span class="keyword">var</span> user <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> pwd <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> host <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> port <span class="type">int</span></span><br><span class="line"><span class="comment">//&amp;user 就是接收用户命令行中输入的 -u 后面的参数值</span></span><br><span class="line"><span class="comment">//&quot;u&quot; -u 指定的参数</span></span><br><span class="line"><span class="comment">//&quot;&quot;,默认值</span></span><br><span class="line"><span class="comment">//&quot;用户名,默认为空&quot;</span></span><br><span class="line">flag.StringVar(&amp;user, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;用户名,默认为空&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;pwd, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot; 密码,默认为空&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;host, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;主机名,默认为localhost&quot;</span>)</span><br><span class="line">flag.IntVar(&amp;port, <span class="string">&quot;p&quot;</span>, <span class="number">3306</span>, <span class="string">&quot; 端口号,默认为3306&quot;</span>)</span><br><span class="line"><span class="comment">//重要的操作,转换</span></span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;user:%v pwd:%v host:%v port:%v\n&quot;</span>, user, pwd, host, port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实现效果</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101713619.png" alt="image-20220210171339559"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-语言-命令行参数&quot;&gt;&lt;a href=&quot;#go-语言-命令行参数&quot; class=&quot;headerlink&quot; title=&quot;go 语言_命令行参数&quot;&gt;&lt;/a&gt;go 语言_命令行参数&lt;/h1&gt;&lt;h2 id=&quot;os-Args&quot;&gt;&lt;a href=&quot;#os-Args&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>goroutine 和 channel</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2016%20%E7%AB%A0%20goroutine%E5%92%8Cchannel/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2016%20%E7%AB%A0%20goroutine%E5%92%8Cchannel/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:50.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="goroutine-和-channel"><a href="#goroutine-和-channel" class="headerlink" title="goroutine 和 channel"></a>goroutine 和 channel</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要求统计1-90000000000的数字中，哪些是素数？ </p><p><strong>分析思路：</strong></p><ol><li>传统的方法，就是使用一个循环，循环的判断各个数是不是素数。 【很慢】</li><li>使用并发或者并行的方式，将统计素数的任务分配给多个goroutine去完成，这 时就会使用到goroutine.</li></ol><hr><h2 id="goroutine基本介绍"><a href="#goroutine基本介绍" class="headerlink" title="goroutine基本介绍"></a>goroutine基本介绍</h2><h3 id="进程和线程说明"><a href="#进程和线程说明" class="headerlink" title="进程和线程说明"></a><strong>进程和线程说明</strong></h3><ol><li>进程就是程序在操作系统中的一次执行过程， 是系统进行资源分配和调度的基本单位</li><li>线程是进程的一个执行实例，是程序执行的最小单元， 它是比进程更小的能独立运行的基本单位。</li><li>一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行 </li><li>一个程序至少有一个进程， 个进程 至少有一个线程</li></ol><h3 id="程序、进程和线程的关系"><a href="#程序、进程和线程的关系" class="headerlink" title="程序、进程和线程的关系"></a>程序、进程和线程的关系</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111931147.png" alt="image-20220211193115026"></p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ol><li>多线程程序在单核上运行，就是并发 </li><li>多线程程序在多核上运行，就是并行</li></ol><p><strong>示意图：</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111938922.png" alt="image-20220211193811825"></p><p><strong>并发：</strong>因为是在一个cpu上，比如有10个线程，每个线程执行10毫秒(进行轮询操 作)，从人的角度看，好像这10个线程都在运行，但是从微观上看，在某一个时间 点看，其实只有一个线程在执行，这就是并发。 </p><p><strong>并行：</strong>因为是在多个cpu上(比如有10个cpu)，比如有10个线程，每个线程执行10毫 秒(各自在不同cpu上执行)，从人的角度看，这10个线程都在运行，但是从微观上 看，在某一个时间点看，也同时有10个线程在执行，这就是并行</p><h3 id="Go-协程和-Go主线程"><a href="#Go-协程和-Go主线程" class="headerlink" title="Go 协程和 Go主线程"></a>Go 协程和 Go主线程</h3><ol><li>Go主线程(有程序员直接称为线程&#x2F;也可以理解成进程):一个Go线程上，可以起 多个协程，你可以这样理解，协程是轻量级的线程。 </li><li><strong>Go协程的特点</strong> <ol><li>有独立的栈空间 </li><li>共享程序堆空间 </li><li>调度由用户控制 </li><li>协程是轻量级的线程</li></ol></li></ol><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111954780.png" alt="image-20220211195412658"></p><hr><h2 id="Goroutine-快速入门"><a href="#Goroutine-快速入门" class="headerlink" title="Goroutine-快速入门"></a>Goroutine-快速入门</h2><h3 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a><strong>案例说明：</strong></h3><ol><li>在主线程(可以理解成进程)中，开启一 一个goroutine，i 程每隔1秒输出 财 开 “hello,world” </li><li>在主线程中也每隔一秒输出”hello,gotang”，输出10次后，退出程序 </li><li>要求主线程和goroutine同时执行. </li><li>画出&#x3D;&#x3D;主线程和协程执行流程图&#x3D;&#x3D;</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 在主线程(可以理解成进程)中，开启一 一个goroutine，i 程每隔1秒输出 财 开 &quot;hello,world&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test()   hello,world&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.  在主线程中也每隔一秒输出&quot;hello,gotang&quot;，输出10次后，退出程序</span></span><br><span class="line"><span class="comment">//3. 要求主线程和goroutine同时执行.</span></span><br><span class="line"><span class="comment">//4. 画出主线程和协程执行流程图</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> test() <span class="comment">//开启一个协程</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;main()   hello,world&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出效果"><a href="#输出效果" class="headerlink" title="输出效果"></a>输出效果</h3><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112008773.png" alt="image-20220211200853640" style="zoom:50%;" /><h3 id="主线程和协程工作示意图"><a href="#主线程和协程工作示意图" class="headerlink" title="主线程和协程工作示意图"></a>主线程和协程工作示意图</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112010737.png" alt="image-20220211201018661"></p><h3 id="快速入门小结"><a href="#快速入门小结" class="headerlink" title="快速入门小结"></a>快速入门小结</h3><ol><li>主线程是一个物理线程，直接作用在cpu上的。是重量级的，非常耗费cpu资源。 </li><li>协程从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗相对小。 </li><li>Golang的协程机制是重要的特点，可以轻松的开启上万个协程。其它编程语言的开发机制是一般基于线程的，开启过多的线程，资源耗费大，这里就突显 Golang在并发上的优势了</li></ol><hr><h2 id="goroutine-的调度模型"><a href="#goroutine-的调度模型" class="headerlink" title="goroutine 的调度模型"></a>goroutine 的调度模型</h2><h3 id="MPG-模式基本介绍"><a href="#MPG-模式基本介绍" class="headerlink" title="MPG 模式基本介绍"></a>MPG 模式基本介绍</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112015415.png" alt="image-20220211201547343"></p><ol><li><strong>M：操作系统的主线程（是物理线程）</strong></li><li><strong>P：协程执行需要的上下文</strong></li><li><strong>G：协程</strong></li></ol><h3 id="MPG-模式运行的状态1"><a href="#MPG-模式运行的状态1" class="headerlink" title="MPG 模式运行的状态1"></a>MPG 模式运行的状态1</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112019126.png" alt="image-20220211201946063"></p><ol><li>当前程序有三个M,如果三个M都在一个cpu运行，就是并发，如果在不同的cpu运行，就是并行 </li><li>M1,M2,M3正在执行一个G，M1的协程队列有三个，M2的协程队列有3个， M3协程队列有2个 </li><li>从上图可以看到: Go的协程是轻量级的线程，是逻辑态的，Go可以容易的起上万个协程。 </li><li>其它程序c&#x2F;java的多线程，往往是内核态的，比较重量级，几千个线程可能耗光cpu</li></ol><hr><p>MPG 模式运行的状态 2</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112025676.png" alt="image-20220211202547579"></p><ol><li>分成两个部分来看 </li><li>原来的情况是M<del>0</del>主线程正在执行G<del>0</del>协程， 另外有三个协程在队列等待 </li><li>如果G<del>0</del>协程阻塞， 比如读取文件或者数据库等 </li><li>这时就会<font color="red"><strong>创建</strong></font>M<del>1</del>主线程(<font color="red"><strong>也可能</strong></font>是从已有的线程池中<font color="red"><strong>取出M<del>1</del></strong></font>)， 并且将等待的3个协程挂到 M1下开始执行， M<del>0</del>的主线程下的G<del>0</del>仍然执行文件io的读写。 </li><li>这样的MPG调度模式， 可以既让G<del>0</del>执行，同 时也不会让队列的其它协程 一直阻塞,仍然 可以并发&#x2F;并行执行。</li><li>等到G<del>0</del>不阻塞了， M<del>0</del>会被放到空闲的主线程 继续执行(从已有的线程池中取), 同时GO又会 被唤醒。</li></ol><h2 id="设置-Golang-运行时的-CPU-数量"><a href="#设置-Golang-运行时的-CPU-数量" class="headerlink" title="设置 Golang 运行时的 CPU 数量"></a>设置 Golang 运行时的 CPU 数量</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>为了充分利用多 cpu 的优势，在 Golang 程序中，设置运行的 cpu 数目</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cpuNum := runtime.NumCPU()</span><br><span class="line">runtime.GOMAXPROCS(<span class="number">8</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;CPU 个数为 &quot;</span>, cpuNum, <span class="string">&quot; 个&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112101274.png" alt="image-20220211210149142"></p><ol><li>go 1.8 后，默认让程序运行在多个核上，可以不用设置</li><li>go 1.8 前，需要设置一下，可以更高效的利用 CPU</li></ol><h2 id="channel（管道）"><a href="#channel（管道）" class="headerlink" title="channel（管道）"></a>channel（管道）</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a><strong>需求：</strong></h3><p>现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。最后显示出来。要求使用goroutine完成 </p><p>分析思路： </p><ol><li>使用goroutine 来完成，效率高，但是会出现<font color="red">并发&#x2F;并行安全问题</font>. </li><li>这里就提出了不同goroutine如何通信的问题</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><ol><li>使用goroutine来完成(看看使用gorotine并发完成会出现什么问题？然后我们会去解决) </li><li>在运行某个程序时，如何知道是否存在资源竞争问题。 方法很简单，在编译该程序时，增加一个参数<font color="red">-race</font>即可</li><li>&#x3D;&#x3D;以下程序存在资源竞争问题&#x3D;&#x3D;</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。</span></span><br><span class="line"><span class="comment">//最后显示出来。要求使用goroutine完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 编写一个函数,来计算各个数的阶乘,并放入到 map 中</span></span><br><span class="line"><span class="comment">//2. 我们启动多个协程,统计的结果放入到 map 中</span></span><br><span class="line"><span class="comment">//3. map 应该做成全局的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">knMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line">knMap[n] = res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">200</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//休眠 10 秒</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line"><span class="comment">//这里我们输出结果,遍历这个 map</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> knMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;knMap[%d] = %d\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示意图</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112212231.png" alt="image-20220211221246024"></p><hr><h2 id="channel（管道）-基本介绍"><a href="#channel（管道）-基本介绍" class="headerlink" title="channel（管道）-基本介绍"></a>channel（管道）-基本介绍</h2><h3 id="不同goroutine之间如何通讯"><a href="#不同goroutine之间如何通讯" class="headerlink" title="不同goroutine之间如何通讯"></a>不同goroutine之间如何通讯</h3><ol><li>全局变量加锁同步 </li><li>channel</li></ol><h3 id="使用全局变量加锁同步改进程序"><a href="#使用全局变量加锁同步改进程序" class="headerlink" title="使用全局变量加锁同步改进程序"></a>使用全局变量加锁同步改进程序</h3><ul><li><p>因为没有对全局变量 m 加锁，因此会出现资源争夺问题，代码会出现错误，提示 concurrent map writes </p></li><li><p>解决方案：加入互斥锁 </p></li><li><p>数的阶乘很大，结果会越界,可以将求阶乘改成 sum +&#x3D; uint64(i) </p></li><li><p>情况说明：</p><ul><li>红框的部分为什么需要加互斥锁，按理说10秒数上面的协程都应该执行完，后面就不应该出 现资源竞争的问题了，但是在实际运行中，还是可能在红框部分出现（运行时增加 -race参数， 确实会发现有资源竞争问题），因为我们程序从设计上可以知道10秒就执行完所有协程，但 是主线程并不知道，因此底层可能仍然出现资源争夺，因此加入互斥锁即可解决问题</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112323769.png" alt="image-20220211232343643"></p></li></ul><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。</span></span><br><span class="line"><span class="comment">//最后显示出来。要求使用goroutine完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 编写一个函数,来计算各个数的阶乘,并放入到 map 中</span></span><br><span class="line"><span class="comment">//2. 我们启动多个协程,统计的结果放入到 map 中</span></span><br><span class="line"><span class="comment">//3. map 应该做成全局的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">knMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//声明一个全局互斥锁</span></span><br><span class="line"><span class="comment">// lock是一个全局的互斥锁</span></span><br><span class="line">lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line">knMap[n] = res</span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//休眠 10 秒</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="comment">//这里我们输出结果,遍历这个 map</span></span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> knMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;knMap[%d] = %d\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么需要-channel"><a href="#为什么需要-channel" class="headerlink" title="为什么需要 channel"></a>为什么需要 channel</h3><p>前面使用全局变量加锁同步来解决goroutine的通讯，但不完美</p><ol><li>主线程在等待所有goroutine全部完成的时间很难确定，我们这里设置10秒，仅仅是估算。</li><li>如果主线程休眠时间长了，会加长等待时间，如果等待时间短了，可能还有 goroutine处于工作状态，这时也会随主线程的退出而销毁</li><li>通过全局变量加锁同步来实现通讯，也并不利用多个协程对全局变量的读写操 作。</li><li>上面种种分析都在呼唤一个新的通讯机制-channel</li></ol><h3 id="channel-的介绍"><a href="#channel-的介绍" class="headerlink" title="channel 的介绍"></a><font color="00ffff">channel 的介绍</font></h3><ol><li><p>channle本质就是 数据结构-队列【示意图】</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121400502.png" alt="image-20220212140021438"></p></li><li><p>数据是先进先出 </p></li><li><p>线程安全，多goroutine访问时， 不需要加锁，就是说channel本身就是线程安全的 </p></li><li><p>channel是有类型的，一个string的channel只能存放string 拷贝截图到剪切板</p></li></ol><h3 id="定义-x2F-声明-channel"><a href="#定义-x2F-声明-channel" class="headerlink" title=" 定义&#x2F;声明 channel"></a><font color="00ffff"> 定义&#x2F;声明 channel</font></h3><p>var 变量名 chan 数据类型 </p><p><strong>举例：</strong></p><p> var intChan chan int(intChan用于存放int数据) </p><p>var mapChan chan map[int]string (mapChan用于存放map[int]string类型)</p><p>var perChan chan Person </p><p>var perChan2 chan *Person </p><p><strong>说明:</strong> </p><ol><li>channel是引用类型 </li><li>channel必须初始化才能写入数据,即make后才能使用</li><li>管道是有类型的，intChan 只能写入整数 int</li></ol><h3 id="channel初始化"><a href="#channel初始化" class="headerlink" title="channel初始化"></a><font color="00ffff">channel初始化</font></h3><p><strong>说明：</strong>使用 make 进行初始化</p><p>var intChan chan int</p><p>intChan&#x3D;make(chan int,10)</p><p>说明+示意图</p><h3 id="向-channel-中写入（存放）数据"><a href="#向-channel-中写入（存放）数据" class="headerlink" title="向 channel 中写入（存放）数据"></a><font color="00ffff">向 channel 中写入（存放）数据</font></h3><p>var intChan chan int</p><p>intChan&#x3D;make(chan int,10)</p><p>num:&#x3D;999</p><p>IntChan&lt;- 10</p><p>IntChan&lt;- num</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//看看管道里面有什么东西</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;intchan 的值=%p intchan 本身的地址=%p\n&quot;</span>, intChan, &amp;intChan)</span><br><span class="line"><span class="comment">//向管道写入数据</span></span><br><span class="line">num := <span class="number">999</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">intChan &lt;- num</span><br><span class="line"><span class="comment">//注意点,当我们向管道写入数据时,不能超过其容量</span></span><br><span class="line">intChan &lt;- <span class="number">50</span></span><br><span class="line"><span class="comment">// intChan &lt;- 100</span></span><br><span class="line"><span class="comment">//看看管道的长度和 cap (容量)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;channel len=%v cap=%v \n&quot;</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line"><span class="comment">//从管道中读出数据</span></span><br><span class="line">num2 := &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"><span class="comment">//看看管道的长度和 cap (容量)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;channel len=%v cap=%v \n&quot;</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line"><span class="comment">//再没有使用协程的情况下,如果我们的管道数据已经全部取出,再取就会报告 deadlock</span></span><br><span class="line">num3 := &lt;-intChan</span><br><span class="line">num4 := &lt;-intChan</span><br><span class="line">num5 := &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">&quot;num3=&quot;</span>, num3, <span class="string">&quot;num4=&quot;</span>, num4, <span class="string">&quot;num5=&quot;</span>, num5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121438441.png" alt="image-20220212143837334"></p><h4 id="channel-注意事项"><a href="#channel-注意事项" class="headerlink" title="channel 注意事项"></a>channel 注意事项</h4><ol><li>channel中只能存放指定的数据类型 </li><li>channle的数据放满后，就不能再放入了 </li><li>如果从channel取出数据后，可以继续放入 </li><li>在没有使用协程的情况下，如果channel数据取完了，再取，就会报dead lock</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">allChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">allChan &lt;- <span class="number">10</span></span><br><span class="line">allChan &lt;- <span class="string">&quot;tom jack&quot;</span></span><br><span class="line">cat := Cat&#123;Name: <span class="string">&quot;小花猫&quot;</span>, Age: <span class="number">3</span>&#125;</span><br><span class="line">allChan &lt;- cat</span><br><span class="line"><span class="comment">//我们希望获取到第三个元素,则先将前两个推出</span></span><br><span class="line">&lt;-allChan</span><br><span class="line">&lt;-allChan</span><br><span class="line">newCat := &lt;-allChan</span><br><span class="line">fmt.Printf(<span class="string">&quot;newCat=%T,newCat=%v\n&quot;</span>, newCat, newCat)</span><br><span class="line"><span class="comment">//注意使用类型断言</span></span><br><span class="line">a := newCat.(Cat)</span><br><span class="line">fmt.Printf(<span class="string">&quot;newCat.Name=%v\n&quot;</span>, a.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="channel的遍历和关闭"><a href="#channel的遍历和关闭" class="headerlink" title="channel的遍历和关闭"></a><font color="00ffff">channel的遍历和关闭</font></h3><h4 id="channel-的关闭"><a href="#channel-的关闭" class="headerlink" title="channel 的关闭"></a>channel 的关闭</h4><p>使用内置函数 close 可以关闭 channel，当 channel 关闭后，就不能再向 channel 写数据了，但是仍然可以从该 channel 读取数据</p><h4 id="channel-的遍历"><a href="#channel-的遍历" class="headerlink" title="channel 的遍历"></a>channel 的遍历</h4><p>channel 支持 for-range 的方式进行遍历，请注意两个细节</p><ol><li>在便利时，如果 channel 没有关闭，则会出现 deadlock 的错误</li><li>在便利时，如果 channel 已经关闭，则会正常遍历数据，遍历完后，就会退出遍历</li></ol><h4 id="代码演示-未关闭管道"><a href="#代码演示-未关闭管道" class="headerlink" title="代码演示-未关闭管道"></a>代码演示-未关闭管道</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">100</span></span><br><span class="line">intChan &lt;- <span class="number">200</span></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//这时不能够在写入数据到 channel</span></span><br><span class="line"><span class="comment">// intChan &lt;- 300</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">n1 := &lt;-intChan</span><br><span class="line">fmt.Println(n1)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">intChan2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">intChan2 &lt;- i <span class="comment">//放入一百个数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for i := 0; i &lt; len(intChan2); i++ &#123;</span></span><br><span class="line"><span class="comment">// n := &lt;-intChan2</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//遍历时如果管道没有关闭,会出现 deadlock 错误</span></span><br><span class="line"><span class="comment">// close(intChan2)</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan2 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121553787.png" alt="image-20220212155318622"></p><h4 id="代码演示-关闭管道"><a href="#代码演示-关闭管道" class="headerlink" title="代码演示-关闭管道"></a>代码演示-关闭管道</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">100</span></span><br><span class="line">intChan &lt;- <span class="number">200</span></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//这时不能够在写入数据到 channel</span></span><br><span class="line"><span class="comment">// intChan &lt;- 300</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">n1 := &lt;-intChan</span><br><span class="line">fmt.Println(n1)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">intChan2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">intChan2 &lt;- i <span class="comment">//放入一百个数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for i := 0; i &lt; len(intChan2); i++ &#123;</span></span><br><span class="line"><span class="comment">// n := &lt;-intChan2</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//遍历时如果管道没有关闭,会出现 deadlock 错误</span></span><br><span class="line"><span class="built_in">close</span>(intChan2)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan2 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121554859.png" alt="image-20220212155432780"></p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例 1"></a>应用实例 1</h3><p>请完成goroutine和channel协同工作的案例，具体要求：</p><ol><li>开启一个writeData协程，向管道intChan中写入50个整数.</li><li>开启一个readData协程，从管道intChan中读取writeData写入的数据。</li><li>注意: writeData和readDate操作的是同一个管道</li><li>主线程需要等待writeData和readDate协程都完成工作才能退出</li></ol><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121642913.png" alt="image-20220212164225751"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line"><span class="comment">//放入数据</span></span><br><span class="line">intChan &lt;- i</span><br><span class="line">fmt.Printf(<span class="string">&quot;writeData 写入数据=%v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-intChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;readData 读到数据=%v\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//readData 读取完数据后,即完成任务</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line"><span class="built_in">close</span>(exitChan)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建两个管道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">50</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> writeData(intChan)</span><br><span class="line"><span class="keyword">go</span> readData(intChan, exitChan)</span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 10)</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-exitChan</span><br><span class="line">fmt.Printf(<span class="string">&quot;======v:%v    ok:%v\n&quot;</span>, v, ok)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例 2"></a>应用实例 2</h3><p>将上面代码 go readData（intChan，exitChan）注销掉，程序会增氧</p><p>答：如果只是向管道写入数据，<font color="red"><strong>而没有读取</strong></font>，就会出现阻塞而dead lock，原因是intChan容量 是10,而代码writeData会写入 50个数据,因此会阻塞在writeData的ch &lt;-i</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121652059.png" alt="image-20220212165217946"></p><hr><h3 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例 3"></a>应用实例 3</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><p>要求统计1-200000 的数字中，哪些是素数？这个问题在本章开篇就提出了， 现在我们有goroutine和channel的知识后，就可以完成了 [测试数据:80000] </p><h4 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h4><ol><li><p>传统的方法，就是使用一个循环，循环的判断各个数是不是素数【ok】。 </p></li><li><p>使用并发&#x2F;并行的方式，将统计素数的任务分配给多个(4个)goroutine去完成， 完成任务时间短。</p><ol><li><p>画出分析思路</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121703848.png" alt="image-20220212170343720"></p></li><li><p>代码实现</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= <span class="number">80000</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭intChan</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启 4 个协程,从 intChan取出数据,并判断是否为素数,</span></span><br><span class="line"><span class="comment">//如果是,就放入到 primechan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, primeChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//使用 for 循环</span></span><br><span class="line"><span class="comment">// var num int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">num, ok := &lt;-intChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 num 是不是素数</span></span><br><span class="line"><span class="keyword">if</span> isPrime(num) &#123;</span><br><span class="line">primeChan &lt;- num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;有一个 primeNum 因为取不到数据退出&quot;</span>)</span><br><span class="line"><span class="comment">//这里不能关闭 primeChan</span></span><br><span class="line"><span class="comment">//向exitChan 写入 true</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> n%i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1000</span>)</span><br><span class="line">primeChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">8000</span>)</span><br><span class="line"><span class="comment">//标识推出的管道</span></span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">4</span>)</span><br><span class="line">start := time.Now().UnixMilli()</span><br><span class="line"><span class="comment">//开启一个协程,向 intChan 放入 1-8000</span></span><br><span class="line"><span class="keyword">go</span> putNum(intChan)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> primeNum(intChan, primeChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//主线程进行处理</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">&lt;-exitChan</span><br><span class="line">&#125;</span><br><span class="line">end := time.Now().UnixMilli()</span><br><span class="line">fmt.Println(<span class="string">&quot;使用协程耗时&quot;</span>, end-start)</span><br><span class="line"><span class="comment">//当exitChan取出四个结果,就可以关闭 primeNum</span></span><br><span class="line"><span class="built_in">close</span>(primeChan)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//遍历 primeChan 把结果拿出来</span></span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, ok := &lt;-primeChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;素数=%d\n&quot;, res)</span></span><br><span class="line"><span class="comment">// count++</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;count=%d\n&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a><strong>实验结果</strong></h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121932974.png" alt="image-20220212193240809"></p></li></ol><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>使用goroutine完成后，可以在使用传统的方法来统计一下，看看完成这个任务，各自耗费的时间是多少？[用map保存primeNum]</p><hr><h2 id="channel-使用细节和注意事项"><a href="#channel-使用细节和注意事项" class="headerlink" title="channel 使用细节和注意事项"></a>channel 使用细节和注意事项</h2><ol><li><p>channel可以声明为只读，或者只写性质 </p></li><li><p>channel只读和只写的最佳实践案例</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121958098.png" alt="image-20220212195808941"></p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//管道可以声明为只读或者只写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下管道是双向</span></span><br><span class="line"><span class="comment">//var chan1 chan int //可读可写</span></span><br><span class="line"><span class="comment">//声明为只写</span></span><br><span class="line"><span class="keyword">var</span> chan2 <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">chan2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">chan2 &lt;- <span class="number">20</span></span><br><span class="line"><span class="comment">// num:=&lt;-chan2 //出错</span></span><br><span class="line">fmt.Println(<span class="string">&quot;chan2=&quot;</span>, chan2)</span><br><span class="line"><span class="comment">//声明为只读</span></span><br><span class="line"><span class="keyword">var</span> chan3 &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">num2 := &lt;-chan3</span><br><span class="line"><span class="comment">// chan3 &lt;- 89 //出错</span></span><br><span class="line">fmt.Println(<span class="string">&quot;num2&quot;</span>, num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用select可以解决从管道取数据的阻塞问题【案例演示】</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用select可以解决从管道取数据的阻塞问题【案例演示】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个管道 10 个数据 int</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个管道 5 个数据 string</span></span><br><span class="line">stringChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">stringChan &lt;- <span class="string">&quot;hello&quot;</span> + fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传统的方法在遍历管道时,如果不关闭会阻塞而导致 deadlock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//问题,在实际开发中,可能我们不好确定什么时候关闭该管道</span></span><br><span class="line"><span class="comment">//可以使用 select 方式解决</span></span><br><span class="line"><span class="comment">// label:</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">//注意:这里,如果 intChan一直没有关闭,不会一直阻塞而 deadlock</span></span><br><span class="line"><span class="comment">//会自动到下一个 case 匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> v := &lt;-intChan:</span><br><span class="line">fmt.Printf(<span class="string">&quot;从 intChan 读取的数据%d\n&quot;</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">case</span> v := &lt;-stringChan:</span><br><span class="line">fmt.Printf(<span class="string">&quot;从 stringChan 读取的数据%s\n&quot;</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;都取不到,不玩儿了\n&quot;</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="comment">// break label</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>goroutine中使用recover，解决协程中出现panic，导致程序崩溃问题.</p><p>**说明:**如果我们起了一个协程，但是这个协程出现了panic,如果我们没有 捕获这个panic,就会造成整个程序崩溃，这时我们可以在goroutine中使用 recover来捕获panic, 进行处理，这样即使这个协程发生的问题，但是主线程仍然不受影响，可以继续执行。</p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;hello, world&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里可以使用 defer+recover</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//捕获 test 抛出的 panic</span></span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test() 发生错误&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">myMap[<span class="number">0</span>] = <span class="string">&quot;golang&quot;</span> <span class="comment">//err</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> sayHello()</span><br><span class="line"><span class="keyword">go</span> test()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;main()  ok=&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;goroutine-和-channel&quot;&gt;&lt;a href=&quot;#goroutine-和-channel&quot; class=&quot;headerlink&quot; title=&quot;goroutine 和 channel&quot;&gt;&lt;/a&gt;goroutine 和 channel&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>家庭收支记账软件项目</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go_12%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go_12%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:13.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="家庭收支记账软件项目"><a href="#家庭收支记账软件项目" class="headerlink" title="家庭收支记账软件项目"></a>家庭收支记账软件项目</h1><h2 id="项目开发流程说明"><a href="#项目开发流程说明" class="headerlink" title="项目开发流程说明"></a>项目开发流程说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    需求分析-&gt;&gt;设计阶段: 需求分析 30% 需求分析师</span><br><span class="line">    设计阶段-&gt;&gt;实现阶段: 设计阶段 20% 项目经理或者架构师</span><br><span class="line">    实现阶段-&gt;&gt;测试阶段: 实施阶段 工程师 20% </span><br><span class="line">    测试阶段--&gt;&gt;实现阶段: 测试与开发交替 测试工程师</span><br><span class="line">    测试阶段-&gt;&gt;实施阶段: 提交</span><br><span class="line">    实施阶段-&gt;&gt;维护阶段: 实施阶段 实施工程师</span><br><span class="line">    维护阶段-&gt;&gt;维护阶段: 用户发现</span><br><span class="line">  </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h2><ul><li>模拟实现基本文本界面的《家庭记账软件》</li><li>该软件能够记录家庭的<strong>收入</strong>、<strong>支出</strong>，并能够<strong>打印收支明细表</strong></li><li>项目采用分级菜单方式。主菜单如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[家庭收支记账软件] --&gt;B(1. 收支明细)</span><br><span class="line">    A[家庭收支记账软件] --&gt;C(2. 登记收入)</span><br><span class="line">    A[家庭收支记账软件] --&gt;D(3. 登记支出)</span><br><span class="line">    A[家庭收支记账软件] --&gt;E(4. 退出)</span><br></pre></td></tr></table></figure><h2 id="项目的界面"><a href="#项目的界面" class="headerlink" title="项目的界面"></a>项目的界面</h2><p>文字界面</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202052151501.png" alt="image-20220205215123583"></p><h2 id="项目代码实现"><a href="#项目代码实现" class="headerlink" title="项目代码实现"></a>项目代码实现</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><h4 id="实现基本功能（先使用面向过程，后面改成面向对象）"><a href="#实现基本功能（先使用面向过程，后面改成面向对象）" class="headerlink" title="实现基本功能（先使用面向过程，后面改成面向对象）"></a>实现基本功能（先使用面向过程，后面改成面向对象）</h4><ul><li><p>功能 1 先完成可以显示主菜单，并且可以退出</p><ul><li><p>思路分析：</p><p>根据给出的界面完成，主菜单的显示，当用户输入 4 时，就退出该程序</p></li><li><p>走代码</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>功能 2 完成显示明细和登记收入的功能</p><ul><li><p>思路分析：</p><ol><li>因为需要显示明细，我们定义一个变量 details string 来记录</li><li>还需要定义变量来记录余额（balance）、每次收支的金额（money），每次收支的说明(note)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details := <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(details)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>功能 3 完成了登记支出的功能</p><ul><li><p>思路分析：</p><p>登记支出和登记收入功能类似，修改即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details := <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(details)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line"><span class="comment">//这里需要做一个必要的判断</span></span><br><span class="line"><span class="keyword">if</span> money &gt; balance &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;支出的余额不足!!!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">balance -= money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;支出\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><p>思路分析</p><p>把记账软件的功能，封装到一个结构体中，然后调用该结构体的方法，来实现记账，显示明细。结构体的名字：FamilyAccount</p><p>再通过 mian 方法中，创建一个结构体 FamilyAccount 结构体实例</p></li><li><p>代码部分：</p><p>utils.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FamilyAccount <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key <span class="type">string</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop <span class="type">bool</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance <span class="type">float64</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money <span class="type">float64</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note <span class="type">string</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给结构体绑定方法</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> MainMenu() &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;this.key)</span><br><span class="line"><span class="keyword">switch</span> this.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">this.ShowDetails()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">this.Income()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">this.Pay()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">this.Exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !this.loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> ShowDetails() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(this.details)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Income() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line">this.balance += this.money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">this.details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, this.balance, this.money, this.note)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Pay() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line"><span class="comment">//这里需要做一个必要的判断</span></span><br><span class="line"><span class="keyword">if</span> this.money &gt; this.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;支出的余额不足!!!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">this.balance -= this.money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">this.details += fmt.Sprintf(<span class="string">&quot;支出\t%v\t\t%v\t\t%v\n&quot;</span>, this.balance, this.money, this.note)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Exit() &#123;</span><br><span class="line">this.loop = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFamilyAccount</span><span class="params">()</span></span> *FamilyAccount &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FamilyAccount&#123;</span><br><span class="line">key:     <span class="string">&quot;&quot;</span>,</span><br><span class="line">loop:    <span class="literal">true</span>,</span><br><span class="line">balance: <span class="number">10000</span>,</span><br><span class="line">money:   <span class="number">0</span>,</span><br><span class="line">note:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">details: <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;go_code/chapter12/utils&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> fa = utils.NewFamilyAccount()</span><br><span class="line">fa.MainMenu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;家庭收支记账软件项目&quot;&gt;&lt;a href=&quot;#家庭收支记账软件项目&quot; class=&quot;headerlink&quot; title=&quot;家庭收支记账软件项目&quot;&gt;&lt;/a&gt;家庭收支记账软件项目&lt;/h1&gt;&lt;h2 id=&quot;项目开发流程说明&quot;&gt;&lt;a href=&quot;#项目开发流程说明&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Golang%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Golang%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:30:21.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-数据类型和-crud"><a href="#Redis-数据类型和-crud" class="headerlink" title="Redis 数据类型和 crud"></a>Redis 数据类型和 crud</h2><h3 id="redis-的五大数据类型"><a href="#redis-的五大数据类型" class="headerlink" title="redis 的五大数据类型"></a>redis 的五大数据类型</h3><p>Redis的五大数据类型是: String(字符串) 、Hash（哈希）、 List(列表)、 Set(集合) 和zset(sorted set：有序集合)</p><h3 id="String-字符串-介绍"><a href="#String-字符串-介绍" class="headerlink" title="String(字符串)-介绍"></a>String(字符串)-介绍</h3><ol><li>string是redis最基本的类型，一个key对应一个value。 </li><li>string类型是二进制安全的。除普通的字符串外，也可以存放图片等数据。 </li><li>redis中字符串value最大是512M <ol><li>举例,存放一个地址信息: </li><li>address 北京天安门 </li><li>说明： key : address value: 北京天安门</li></ol></li></ol><p>setex （set with expire）</p><h3 id="看之前的-xmind-笔记"><a href="#看之前的-xmind-笔记" class="headerlink" title="看之前的 xmind 笔记"></a><font color="00ffff" ><strong>看之前的 xmind 笔记</strong></font></h3><h2 id="GO连接到-Redis"><a href="#GO连接到-Redis" class="headerlink" title="GO连接到 Redis"></a>GO连接到 Redis</h2><h3 id="安装第三方开源Redis库"><a href="#安装第三方开源Redis库" class="headerlink" title="安装第三方开源Redis库"></a>安装第三方开源Redis库</h3><ol><li>使用第三方开源的redis库: <a href="https://github.com/garyburd/redigo/redis">github.com&#x2F;garyburd&#x2F;redigo&#x2F;redis</a></li><li>在使用Redis前，先安装第三方Redis库，在GOPATH路径下执行安装指令: <code>go get github.com/garyburd/redigo/redis</code></li><li>安装成功后,可以看到如下包文件；</li><li>特别说明:在安装Redis库前，确保已经安装并配置了Git,因为 是从github下载安装 Redis库的，需要使用到Git。 如果没有安装配置过Git，请参考：如何安装配置Git .</li></ol><p><strong>安装成功</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202162127496.png" alt="image-20220216212736265"></p><h2 id="Golang-操作-Redis"><a href="#Golang-操作-Redis" class="headerlink" title="Golang 操作 Redis"></a>Golang 操作 Redis</h2><h3 id="Set-x2F-Get接口"><a href="#Set-x2F-Get接口" class="headerlink" title="Set&#x2F;Get接口"></a>Set&#x2F;Get接口</h3><p>说明:通过 Golang 添加和获取 key-value</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;Set&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;tomjerry猫猫&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;set err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r, err := redis.String(conn.Do(<span class="string">&quot;Get&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line">fmt.Println(<span class="string">&quot;操作 ok&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作-Hash"><a href="#操作-Hash" class="headerlink" title="操作 Hash"></a>操作 Hash</h3><p>说明：通过 Golang 对 Redis 操作 Hash 数据类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HSet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;康楠&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HSet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r1, err := redis.String(conn.Do(<span class="string">&quot;HGet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">r2, err := redis.Int(conn.Do(<span class="string">&quot;HGet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;r1=%v r2=%v\n&quot;</span>, r1, r2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量-HMSet-x2F-HMGet-数据"><a href="#批量-HMSet-x2F-HMGet-数据" class="headerlink" title="批量 HMSet&#x2F;HMGet 数据"></a>批量 HMSet&#x2F;HMGet 数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HmSet&quot;</span>, <span class="string">&quot;user02&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;康楠&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HMset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// _, err = conn.Do(&quot;HSet&quot;, &quot;user01&quot;, &quot;age&quot;, 18)</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;hset err=&quot;, err)</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r, err := redis.Strings(conn.Do(<span class="string">&quot;HMGet&quot;</span>, <span class="string">&quot;user02&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hget err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// r2, err := redis.Int(conn.Do(&quot;HGet&quot;, &quot;user01&quot;, &quot;age&quot;))</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;get err=&quot;, err)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> r &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;r[%v]=%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis连接池"><a href="#Redis连接池" class="headerlink" title="Redis连接池"></a>Redis连接池</h3><p>说明: 通过Golang 对Redis操作， 还可以通过Redis链接池,<strong>流程如下</strong>：</p><ol><li>事先初始化一定数量的链接，放入到链接池</li><li>当Go需要操作Redis时，直接从Redis链接池取出链接即可。 </li><li>这样可以节省临时获取Redis链接的时间，从而提高效率.</li></ol><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码:"></a>核心代码:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pool *redis.Pool</span><br><span class="line">pool = &amp;redis.Pool&#123;</span><br><span class="line">  Maxldle: <span class="number">8</span>,</span><br><span class="line">  MaxActive: <span class="number">0</span>,</span><br><span class="line">  IdleTimeout:<span class="number">100</span>,</span><br><span class="line">  Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (redis.Conn,<span class="type">error</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> redis.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  c := pool.Get() </span><br><span class="line">  pool.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个全局 pool</span></span><br><span class="line"><span class="keyword">var</span> pool *redis.Pool</span><br><span class="line"></span><br><span class="line"><span class="comment">//当启动程序时,就初始化连接池</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">pool = &amp;redis.Pool&#123;</span><br><span class="line">MaxIdle:     <span class="number">8</span>,</span><br><span class="line">MaxActive:   <span class="number">0</span>,</span><br><span class="line">IdleTimeout: <span class="number">100</span>,</span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (redis.Conn, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//先从 pool 取出一个链接</span></span><br><span class="line">conn := pool.Get()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">_, err := conn.Do(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;汤姆猫~~&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r, err := redis.String(conn.Do(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;获取到的值为:&quot;</span>, r)</span><br><span class="line">pool.Close()</span><br><span class="line">conn2 := pool.Get()</span><br><span class="line">_, err = conn2.Do(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;name2&quot;</span>, <span class="string">&quot;汤姆猫2~~&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn2.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r2, err := redis.String(conn2.Do(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;name2&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn2.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;获取到的值为:&quot;</span>, r2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis-数据类型和-crud&quot;&gt;&lt;a href=&quot;#Redis-数据类型和-crud&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go_json</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go_json/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go_json/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:04.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-json"><a href="#Go-json" class="headerlink" title="Go_json"></a>Go_json</h1><h2 id="json-基本介绍"><a href="#json-基本介绍" class="headerlink" title="json 基本介绍"></a>json 基本介绍</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于及其解析和生成</p><p>JSON 是在 2001 年开始推广使用的数据格式，目前已经成为<font color="red"><strong>主流的数据格式。</strong></font></p><p><code>JSON</code>易于机器解析和生成，并有效地提升网络传输效率,通常程序在网络传输时会先将数据(结构体、map等) <font color="red">序列化</font>成json字符串,到接收方得到json字符串时，<font color="red">再反序列化</font>恢复成原来的数据 类型(结构体、map等)。这种方式已然成为各个语言的标准。</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101921897.png" alt="image-20220210192152774"></p><hr><h2 id="json-数据格式说明"><a href="#json-数据格式说明" class="headerlink" title="json 数据格式说明"></a>json 数据格式说明</h2><p><strong>在JS 语言中，一切都是对象</strong>。因此，任何的数据类型都可以通过JSON来表示，例 如字符串、数字、对象、数组等. </p><p>JSON 键值对是用来保存数据一种方式， </p><p>键&#x2F;值对组合中的键名写在前面并用双引号 “” . 包裹，使用冒号：分隔，然后紧接着值： </p><p>比如: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Json&quot;</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>比如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;北京&quot;</span><span class="punctuation">,</span><span class="string">&quot;上海&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>比如: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;上海&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mary&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;广州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;深圳&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h2 id="json-序列化"><a href="#json-序列化" class="headerlink" title="json 序列化"></a>json 序列化</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>json序列化是指，将有key-value结构的数据类型(比如结构体、map、切片)序列化成json字符串的操作。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><p>这里我们介绍一下<strong>结构体</strong>、<strong>map</strong>和<strong>切片</strong>的序列化，其它数据类型的序列化类似。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line">type Monster struct <span class="punctuation">&#123;</span></span><br><span class="line">Name     string</span><br><span class="line">Age      int</span><br><span class="line">Birthday string</span><br><span class="line">Sal      float64</span><br><span class="line">Skill    string</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">func testStruct() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line">monster <span class="punctuation">:</span>= Monster<span class="punctuation">&#123;</span></span><br><span class="line">Name<span class="punctuation">:</span>     <span class="string">&quot;牛魔王&quot;</span><span class="punctuation">,</span></span><br><span class="line">Age<span class="punctuation">:</span>      <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">Birthday<span class="punctuation">:</span> <span class="string">&quot;2011-11-11&quot;</span><span class="punctuation">,</span></span><br><span class="line">Sal<span class="punctuation">:</span>      <span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">Skill<span class="punctuation">:</span>    <span class="string">&quot;牛魔拳&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//将结构体序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(&amp;monster)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;monster序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将 map 进行序列化</span></span><br><span class="line">func testMap() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line">var mymap map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//使用 map,需要 make</span></span><br><span class="line">mymap = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;红孩儿&quot;</span></span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">20</span></span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;山顶洞&quot;</span></span><br><span class="line"><span class="comment">//将 map 进行序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(mymap)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;mymap map序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示对切片进行序列化</span></span><br><span class="line">func testSlice() <span class="punctuation">&#123;</span></span><br><span class="line">var slice <span class="punctuation">[</span><span class="punctuation">]</span>map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">var m1 map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">var m2 map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//使用 map 前,需要先 make</span></span><br><span class="line">m1 = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;jack&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;jack&quot;</span></span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">7</span></span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;北京&quot;</span></span><br><span class="line">slice = append(slice<span class="punctuation">,</span> m1)</span><br><span class="line">m2 = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;jack&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;tom&quot;</span></span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">20</span></span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;墨西哥&quot;</span></span><br><span class="line">slice = append(slice<span class="punctuation">,</span> m2)</span><br><span class="line"><span class="comment">//将切片进行序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(slice)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;切片 slice序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对基本数据类型序列化</span></span><br><span class="line">func testFloat64() <span class="punctuation">&#123;</span></span><br><span class="line">var num1 float64 = <span class="number">2345.67</span></span><br><span class="line"><span class="comment">//将float64序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(&amp;num1)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;float64序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">func main() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//演示将结构体,map,切片进行序列化</span></span><br><span class="line">testStruct()</span><br><span class="line">testMap()</span><br><span class="line">testSlice()</span><br><span class="line">testFloat64()</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结构体字段按需要的方式序列化-给-struct-指定标签-tag）"><a href="#结构体字段按需要的方式序列化-给-struct-指定标签-tag）" class="headerlink" title="结构体字段按需要的方式序列化(给 struct 指定标签 tag）"></a>结构体字段按需要的方式序列化(给 struct 指定标签 tag）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span> <span class="comment">//反射机制</span></span><br><span class="line">Age      <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Birthday <span class="type">string</span>  <span class="string">`json:&quot;monster_birthday&quot;`</span></span><br><span class="line">Sal      <span class="type">float64</span> <span class="string">`json:&quot;monster_sal&quot;`</span></span><br><span class="line">Skill    <span class="type">string</span>  <span class="string">`json:&quot;monster_Skill&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="json-反序列化"><a href="#json-反序列化" class="headerlink" title="json 反序列化"></a>json 反序列化</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>json反序列化是指，将json字符串反序列化成对应的数据类型(比如结构体、 map、 切片)的操作。</p><h3 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h3><p>这里我们介绍一下将json字符串反序列化成结构体、map和切片。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span> <span class="comment">//反射机制</span></span><br><span class="line">Age      <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Birthday <span class="type">string</span>  <span class="string">`json:&quot;monster_birthday&quot;`</span></span><br><span class="line">Sal      <span class="type">float64</span> <span class="string">`json:&quot;monster_sal&quot;`</span></span><br><span class="line">Skill    <span class="type">string</span>  <span class="string">`json:&quot;monster_Skill&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 struct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;monster_name\&quot;:\&quot;牛魔王\&quot;,\&quot;monster_age\&quot;:500,\&quot;monster_birthday\&quot;:\&quot;2011-11-11\&quot;,\&quot;monster_sal\&quot;:8000,\&quot;monster_skill\&quot;:\&quot;牛魔拳\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> monster Monster</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 monster:%v\n&quot;</span>, monster)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalMap</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;address\&quot;:\&quot;山顶洞\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;红孩儿\&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> mymap <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//不需要 make 分配地址,反序列化低层自己 make</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;mymap)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 mymap:%v\n&quot;</span>, mymap)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;[&#123;\&quot;address\&quot;:\&quot;北京\&quot;,\&quot;age\&quot;:7,\&quot;jack\&quot;:\&quot;jack\&quot;&#125;,&#123;\&quot;address\&quot;:\&quot;墨西哥\&quot;,\&quot;age\&quot;:20,\&quot;jack\&quot;:\&quot;tom\&quot;&#125;]&quot;</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//不需要 make 分配地址,反序列化低层自己 make</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;slice)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 slice:%v\n&quot;</span>, slice)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">unmarshalStruct()</span><br><span class="line">unmarshalMap()</span><br><span class="line">unmarshalSlice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码结果："><a href="#代码结果：" class="headerlink" title="代码结果："></a>代码结果：</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202102317297.png" alt="image-20220210231713125"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go-json&quot;&gt;&lt;a href=&quot;#Go-json&quot; class=&quot;headerlink&quot; title=&quot;Go_json&quot;&gt;&lt;/a&gt;Go_json&lt;/h1&gt;&lt;h2 id=&quot;json-基本介绍&quot;&gt;&lt;a href=&quot;#json-基本介绍&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 14 章 文件操作</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2014%20%E7%AB%A0%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2014%20%E7%AB%A0%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:30:49.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-14-章-文件操作"><a href="#第-14-章-文件操作" class="headerlink" title="第 14 章 文件操作"></a>第 14 章 文件操作</h1><h2 id="文件-基本介绍"><a href="#文件-基本介绍" class="headerlink" title="文件-基本介绍"></a>文件-基本介绍</h2><p>文件,对我们并不陌生,文件是数据源(保存数据的地方)的一种,比如大家经常使用的 word文档,txt文件,excel文件…都是文件。文件最主要的作用就是保存数据,它既可以保存一张图片,也可以保存视频,声音…</p><p><strong>文件在程序中是以流的形式来操作的。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    subgraph 内存</span><br><span class="line">    A[&quot;GO程序&quot;]</span><br><span class="line">    end</span><br><span class="line">    subgraph 磁盘</span><br><span class="line">    B[&quot;文件&quot;]</span><br><span class="line">    end</span><br><span class="line">         </span><br><span class="line">内存 ----&gt; |输出流|磁盘</span><br><span class="line">磁盘 ----&gt; |输入流|内存</span><br><span class="line">style A fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202062311026.png" alt="image-20220206231150956"></p><p>&#x3D;&#x3D;流：数据在数据源(文件)和程序(内存)之间经历的路径&#x3D;&#x3D;<br>&#x3D;&#x3D;输入流：数据从数据源(文件)到程序(内存)的路径&#x3D;&#x3D;<br>&#x3D;&#x3D;输出流：数据从程序(内存)到数据源(文件)的路径&#x3D;&#x3D;</p><p>os.File封装所有文件相关操作，File 是一个结构体</p><h2 id="打开文件和关闭文件"><a href="#打开文件和关闭文件" class="headerlink" title="打开文件和关闭文件"></a>打开文件和关闭文件</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p><strong>使用函数和方法</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061527788.png" alt="image-20220206152742476"></p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p><strong>使用函数和方法</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061530747.png" alt="image-20220206153028492"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出文件</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;file=%v\n&quot;</span>, file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">err = file.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读文件操作应用实例"><a href="#读文件操作应用实例" class="headerlink" title="读文件操作应用实例"></a>读文件操作应用实例</h2><ul><li><p>读取文件的内容并显示在终端(带缓冲区的方式)，使用<code>os.Open, file.Close(), bufio.NewReader(), reader.ReadString</code> 函数和方法</p><ul><li>代码实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件 当函数退出时,</span></span><br><span class="line"><span class="keyword">defer</span> file.Close() <span class="comment">//要及时的关闭 file</span></span><br><span class="line"><span class="comment">//创建一个*Reader,是带缓冲的</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="comment">//循环的读取文件的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读到一个换行就结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;                  <span class="comment">//io.EOF 表示文件的末尾</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出内容</span></span><br><span class="line">fmt.Print(str)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件读取结束...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果显示</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061602888.png" alt="image-20220206160247312"></p></li><li><p>读取文件的内容并显示在终端(使用ioutil一次将整个文件读入到内存中)，这种 方式适用于文件不大的情况。相关方法和函数(ioutil.ReadFile)</p><ul><li>代码实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用 ioutil.ReadFile 一次性将文件读取到位</span></span><br><span class="line">file := <span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span></span><br><span class="line">content, err := ioutil.ReadFile(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把读取到的内容显示到终端</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;content:%v\n&quot;</span>, <span class="type">string</span>(content))</span><br><span class="line"><span class="comment">//没有显示 openfile 所以不需要显示的 close 文件</span></span><br><span class="line"><span class="comment">//因为文件的打开和关闭被封装在函数中</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果显示</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061622896.png" alt="image-20220206162205645"></p></li></ul></li></ul><h2 id="写文件操作应用实例"><a href="#写文件操作应用实例" class="headerlink" title="写文件操作应用实例"></a>写文件操作应用实例</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202062211414.png" alt="image-20220206221102909"></p><p>说明: os.OpenFile是一个更一般性的文件打开函数，它会使用指定的选项（如 O_RDONLY等）、指定的模式（如0666等）打开指定名称的文件。如果操作成功，返 回的文件对象可用于I&#x2F;O。如果出错，错误底层类型是*PathError。</p><p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code> <code>FileMode</code> 只在 <code>linux</code> 系统下起作用</p><h3 id="文件打开模式操作实例（方式一）"><a href="#文件打开模式操作实例（方式一）" class="headerlink" title="文件打开模式操作实例（方式一）"></a>文件打开模式操作实例（方式一）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span></span><br><span class="line">O_RDONLY <span class="type">int</span> = syscall.O_RDONLY <span class="comment">// open the file read-only.</span></span><br><span class="line">O_WRONLY <span class="type">int</span> = syscall.O_WRONLY <span class="comment">// open the file write-only.</span></span><br><span class="line">O_RDWR   <span class="type">int</span> = syscall.O_RDWR   <span class="comment">// open the file read-write.</span></span><br><span class="line"><span class="comment">// The remaining values may be or&#x27;ed in to control behavior.</span></span><br><span class="line">O_APPEND <span class="type">int</span> = syscall.O_APPEND <span class="comment">// append data to the file when writing.</span></span><br><span class="line">O_CREATE <span class="type">int</span> = syscall.O_CREAT  <span class="comment">// create a new file if none exists.</span></span><br><span class="line">O_EXCL   <span class="type">int</span> = syscall.O_EXCL   <span class="comment">// used with O_CREATE, file must not exist.</span></span><br><span class="line">O_SYNC   <span class="type">int</span> = syscall.O_SYNC   <span class="comment">// open for synchronous I/O.</span></span><br><span class="line">O_TRUNC  <span class="type">int</span> = syscall.O_TRUNC  <span class="comment">// truncate regular writable file when opened.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="代码：使用-os-OpenFile-bufio-NewWriter-Writer的方法-WriteString-完成以下任务"><a href="#代码：使用-os-OpenFile-bufio-NewWriter-Writer的方法-WriteString-完成以下任务" class="headerlink" title="代码：使用 os.OpenFile(),bufio.NewWriter(), *Writer的方法 WriteString 完成以下任务"></a>代码：使用 os.OpenFile(),bufio.NewWriter(), *Writer的方法 WriteString 完成以下任务</h4><ol><li><h5 id="创建一个新文件，写入内容-5-句-“hello-Gardon”"><a href="#创建一个新文件，写入内容-5-句-“hello-Gardon”" class="headerlink" title="创建一个新文件，写入内容 5 句 “hello,Gardon”"></a>创建一个新文件，写入内容 5 句 “hello,Gardon”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;hello,Gardon\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件中，将原来的内容覆盖成新的内容10句-“你好，尚硅谷-”"><a href="#打开一个存在的文件中，将原来的内容覆盖成新的内容10句-“你好，尚硅谷-”" class="headerlink" title="打开一个存在的文件中，将原来的内容覆盖成新的内容10句 “你好，尚硅谷!”"></a>打开一个存在的文件中，将原来的内容覆盖成新的内容10句 “你好，尚硅谷!”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_TRUNC, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;你好,北京工商大学\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件，在原来的内容追加内容-‘ABC-ENGLISH-’"><a href="#打开一个存在的文件，在原来的内容追加内容-‘ABC-ENGLISH-’" class="headerlink" title="打开一个存在的文件，在原来的内容追加内容 ‘ABC! ENGLISH!’"></a>打开一个存在的文件，在原来的内容追加内容 ‘ABC! ENGLISH!’</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;BTBU 冰墩墩\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello-北京-”"><a href="#打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello-北京-”" class="headerlink" title="打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello,北京!”"></a>打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello,北京!”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_RDWR|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//先读取原来文件的内容,并显示在终端</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(str)</span><br><span class="line">&#125;</span><br><span class="line">str := <span class="string">&quot;hello 北京\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;文件打开模式操作实例（方式一）</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件打开模式操作实例（方式二）"><a href="#文件打开模式操作实例（方式二）" class="headerlink" title="文件打开模式操作实例（方式二）"></a>文件打开模式操作实例（方式二）</h3><h5 id="编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了"><a href="#编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了" class="headerlink" title="编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了"></a>编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了</h5><ul><li>说明：使用<code>ioutil.ReadFile(file1path)</code>和<code>ioutil.WriteFile(file2path, data, 0666)</code>完成读写文件的任务</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件:将 abc.txt 导入到 kkk.txt</span></span><br><span class="line">file1path := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">file2path := <span class="string">&quot;/Users/tal/iceCode/godev/kkk.txt&quot;</span></span><br><span class="line">data, err := ioutil.ReadFile(file1path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//说明读取文件有错误</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;read file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(file2path, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><p>golang判断文件或文件夹是否存在的方法为使用os.Stat()函数返回的错误值进行判断: </p><ol><li>如果返回的错误为nil,说明文件或文件夹存在 </li><li>如果返回的错误类型使用os.IsNotExist()判断为true,说明文件或文件夹不存在</li><li>如果返回的错误为其它类型,则不确定是否在存在</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PathExists</span><span class="params">(path <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件:将 abc.txt 导入到 kkk.txt</span></span><br><span class="line">file1path := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">fmt.Println(PathExists(file1path))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件编程实例"><a href="#文件编程实例" class="headerlink" title="文件编程实例"></a>文件编程实例</h3><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><ul><li>说明：将一张图片&#x2F;电影&#x2F;mp3拷贝到另一个目录下</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101422133.png" alt="image-20220210142200944">  </p><p><font color="ff0000"><strong>注意：</strong></font><font color="ff0000">Copy 函数是 io 包提供的</font></p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个函数,接收两个文件路径 srcFilePath dstFilePath</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyFile</span><span class="params">(dsfFilePath <span class="type">string</span>, srcFilePath <span class="type">string</span>)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">srcfile, err := os.Open(srcFilePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> srcfile.Close()</span><br><span class="line"><span class="comment">//通过 srcfile,获取到 Reader</span></span><br><span class="line">reader := bufio.NewReader(srcfile)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开 dstfile</span></span><br><span class="line">dstfile, err := os.OpenFile(dsfFilePath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过 dstfile,获取到 writer</span></span><br><span class="line">writer := bufio.NewWriter(dstfile)</span><br><span class="line"><span class="keyword">return</span> io.Copy(writer, reader)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//拷贝图片</span></span><br><span class="line"><span class="comment">//调用 CopyFile 完成文件拷贝</span></span><br><span class="line">srcFile := <span class="string">&quot;/Users/aurora/iceCode/godev/src/go_code/chapter14/gogo.jpg&quot;</span></span><br><span class="line">dstFile := <span class="string">&quot;/Users/aurora/iceCode/godev/src/go_code/chapter14/filedemo05/exe06/gogo.jpg&quot;</span></span><br><span class="line">returecode, err := CopyFile(dstFile, srcFile)</span><br><span class="line">fmt.Println(returecode)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;copy file err:&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;copy succeed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计英文、数字、空格和其他字符数量"><a href="#统计英文、数字、空格和其他字符数量" class="headerlink" title="统计英文、数字、空格和其他字符数量"></a>统计英文、数字、空格和其他字符数量</h4><p><strong>说明：</strong>统计一个文件中含有的英文、数字、空格及其他字符数量</p><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体,用于保存统计结构</span></span><br><span class="line"><span class="keyword">type</span> CharCount <span class="keyword">struct</span> &#123;</span><br><span class="line">ChCount    <span class="type">int</span></span><br><span class="line">NumCount   <span class="type">int</span></span><br><span class="line">SpaceCount <span class="type">int</span></span><br><span class="line">OtherCount <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//思路:打开一个文件,创建一个 Reader</span></span><br><span class="line"><span class="comment">//每读取一行,就去统计该行有多少个 英文,数字,空格和其他字符</span></span><br><span class="line"><span class="comment">//然后将结果保存到一个结构体</span></span><br><span class="line">filepath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">file, err := os.Open(filepath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 CharCount 实例</span></span><br><span class="line"><span class="keyword">var</span> count CharCount</span><br><span class="line"><span class="comment">//创建一个 Reader</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始循环读取 file 的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历 str,进行统计</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> str &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line"><span class="keyword">fallthrough</span> <span class="comment">//穿透处理</span></span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">count.ChCount++</span><br><span class="line"><span class="keyword">case</span> v == <span class="string">&#x27; &#x27;</span> || v == <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">count.SpaceCount++</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">count.NumCount++</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">count.OtherCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出统计结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;字符的个数为:%v 数字的个数为:%v 空格的个数为:%v 其他字符个数为:%v\n&quot;</span>,</span><br><span class="line">count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-14-章-文件操作&quot;&gt;&lt;a href=&quot;#第-14-章-文件操作&quot; class=&quot;headerlink&quot; title=&quot;第 14 章 文件操作&quot;&gt;&lt;/a&gt;第 14 章 文件操作&lt;/h1&gt;&lt;h2 id=&quot;文件-基本介绍&quot;&gt;&lt;a href=&quot;#文件-基本介绍&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 语言第 17 章 反射</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2017%20%E7%AB%A0%20%E5%8F%8D%E5%B0%84/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2017%20%E7%AB%A0%20%E5%8F%8D%E5%B0%84/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:30:38.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-语言第-17-章-反射"><a href="#Go-语言第-17-章-反射" class="headerlink" title="Go 语言第 17 章 反射"></a>Go 语言第 17 章 反射</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="结构体序列化和反序列化"><a href="#结构体序列化和反序列化" class="headerlink" title="结构体序列化和反序列化"></a>结构体序列化和反序列化</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202122044093.png" alt="image-20220212204437940"></p><hr><h3 id="新问题：桥连接"><a href="#新问题：桥连接" class="headerlink" title="新问题：桥连接"></a>新问题：桥连接</h3><ol><li><p>定义了两个匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test1:=<span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="type">int</span>, v2 <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">  t.Log(v1,v2)</span><br><span class="line">&#125;</span><br><span class="line">test2:=<span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="type">int</span>, v2 <span class="type">int</span>, s <span class="type">string</span>)</span></span>&#123;</span><br><span class="line">  t.Log(v1,v2,s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个适配器函数用作统一处理接口，其大致结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bridge:=<span class="function"><span class="keyword">func</span><span class="params">(call <span class="keyword">interface</span>&#123;&#125;,args ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">  <span class="comment">//内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现调用 test1 对应的函数</span></span><br><span class="line">bridge(test1,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//实现调用 test1 对应的函数</span></span><br><span class="line">bridge(test2,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;test2&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>要求只用反射机制完成（note：学习 reflect 后，回头来解决）</p></li></ol><h2 id="反射的基本介绍"><a href="#反射的基本介绍" class="headerlink" title="反射的基本介绍"></a>反射的基本介绍</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>反射可以在运行时动态获取变量的各种信息，比如变量的类型(type)，类别(kind) </li><li>如果是结构体变量，还可以获取到结构体本身的信息(包括结构体的字段、方法) </li><li>通过反射，可以修改变量的值，可以调用关联的方法。 </li><li>使用反射，需要import(“reflect”)</li><li>示意图</li></ol><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131452666.png" alt="image-20220213145229548"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131412306.png" alt="image-20220213141240157"></p><hr><h3 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h3><ol><li>不知道接口调用哪个函数，根据传入参数在运行时确定调用的具体接口，这种需要对函数或方法反射。例如以下这种桥接模式, 比如前面提出问题。 func t (funcptr interface{}, iterface{}) 第一个参数funcPtr以接口的形式传入函数指针，函数参数args以可变参数的形 式传入，bridge函数中可以用反射来动态执行funcPtr函数</li><li>对结构体序列化时，如果结构体有指定的Tag，也会使用到反射生成对应的字符串</li></ol><h3 id="反射重要的函数和概念"><a href="#反射重要的函数和概念" class="headerlink" title="反射重要的函数和概念"></a>反射重要的函数和概念</h3><ol><li><p>reflect.TypeOf(变量名)，获取变量的类型，返回reflect.Type类型 </p></li><li><p>reflect.ValueOf(变量名)，获取变量的值，返回reflect.Value类型reflect.Value 是一个 结构体类型。 【看文档】，通过reflect.Value， 可以获取到关于该变量的很多信息。</p></li><li><p>变量、interface{} 和reflect.Value是可以相互转换的，这点在实际开发中，会经常使 用到。画出示意图</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131554216.png" alt="image-20220213155419077"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131554859.png" alt="image-20220213155439779"></p></li></ol><h2 id="反射的快速入门"><a href="#反射的快速入门" class="headerlink" title="反射的快速入门"></a>反射的快速入门</h2><h3 id="快速入门说明"><a href="#快速入门说明" class="headerlink" title="快速入门说明"></a>快速入门说明</h3><ol><li><p>请编写一个案例演示对(基本数据类型、 interface{}、reflect.Value)进行反射的基本操作。<br><strong>代码演示</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行加减</span></span><br><span class="line">n2 := <span class="number">2</span> + rVal.Int()</span><br><span class="line">fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">fmt.Println(<span class="string">&quot;rVal=&quot;</span>, rVal)</span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line"><span class="comment">//将 interface 通过断言转成需要的类型</span></span><br><span class="line">num2 := iV.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//请编写一个案例演示对(基本数据类型、 interface&#123;&#125;、reflect.Value)进行反射的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">reflectTest01(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请编写一个案例，演示对(结构体类型、interface[}、reflect.Value)进行反射的基本操 作。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行加减</span></span><br><span class="line">n2 := <span class="number">2</span> + rVal.Int()</span><br><span class="line">fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">fmt.Println(<span class="string">&quot;rVal=&quot;</span>, rVal)</span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line"><span class="comment">//将 interface 通过断言转成需要的类型</span></span><br><span class="line">num2 := iV.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示对结构体的反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest02</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line">fmt.Printf(<span class="string">&quot;iV = %v iV = %T\n&quot;</span>, iV, iV)</span><br><span class="line"><span class="comment">//将 interface&#123;&#125;通过断言转成需要的类型</span></span><br><span class="line"><span class="comment">//简单使用类型检查</span></span><br><span class="line">stu, ok := iV.(Student)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;stu.Name=%v\n&quot;</span>, stu.Name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//请编写一个案例演示对(基本数据类型、 interface&#123;&#125;、reflect.Value)进行反射的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var num int = 100</span></span><br><span class="line"><span class="comment">// reflectTest01(num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 Student 的实例</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">Age:  <span class="number">8</span>,</span><br><span class="line">&#125;</span><br><span class="line">reflectTest02(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反射注意事项和细节说明"><a href="#反射注意事项和细节说明" class="headerlink" title="反射注意事项和细节说明"></a>反射注意事项和细节说明</h2><ol><li><p>reflect.Value.Kind,获取变量的类别，返回的是一个常量</p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202132002322.png" alt="image-20220213200201178" style="zoom: 67%;" /><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202132047782.png" alt="image-20220213204709609"></p></li><li><p>Type是类型, Kind是类别， Type 和 Kind 可能是相同的，也可能是不同的. </p><ol><li>比如: var num int &#x3D; 10 num的Type是int，Kind也是int . </li><li>比如: var stu Student stu的Type是 <strong>包名.Student</strong> , Kind是<strong>struct</strong></li></ol></li><li><p>通过反射可以在让变量在interface{} 和Reflect.Value之间相互转换, 这点在前面画 过示意图并在快速入门案例中讲解过,这里我们看下是如何在代码中体现的.</p></li><li><p>使用反射的方式来获取变量的值(<font color="red">并返回对应的类型</font>)，要求数据类型匹配 ，比如x是int, 那么就应该使用 reflect.Value(x)IInt(),而不能使用其它的，否则报panic</p></li><li><p>通过反射来修改变量，注意当使用SetXxx方法来设置需要通过对应的指针类型来完成，这样才能改变传入的变量的值，同时需要使用到 reflect.Value.Elem()方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射,修改 num int 的值  修改 student 的值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflect01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//2. 获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line">rVal.Elem().SetInt(<span class="number">20</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;rVal kind=%v\n&quot;</span>, rVal.Kind())</span><br><span class="line"><span class="comment">// fmt.Println(rVal)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">reflect01(&amp;num)</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反射的最佳实践"><a href="#反射的最佳实践" class="headerlink" title="反射的最佳实践"></a>反射的最佳实践</h2><h3 id="1-使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值"><a href="#1-使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值" class="headerlink" title="1. 使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值"></a>1. 使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span></span><br><span class="line">Age   <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Score <span class="type">float64</span> <span class="string">`json:&quot;monster_score&quot;`</span></span><br><span class="line">Sex   <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> Print() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;----------start----------&quot;</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------end-----------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> GetSum(n1, n2 <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> Set(name <span class="type">string</span>, age <span class="type">int</span>, score <span class="type">float64</span>, sex <span class="type">string</span>) &#123;</span><br><span class="line">s.Name = name</span><br><span class="line">s.Age = age</span><br><span class="line">s.Score = score</span><br><span class="line">s.Sex = sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">typ := reflect.TypeOf(a)</span><br><span class="line">val := reflect.ValueOf(a)</span><br><span class="line">kd := val.Kind()</span><br><span class="line"><span class="keyword">if</span> kd != reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;expect struct&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num := val.NumField()</span><br><span class="line">fmt.Printf(<span class="string">&quot;struct has %d fields\n&quot;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Field %d: 值为=%v\n&quot;</span>, i, val.Field(i))</span><br><span class="line"><span class="comment">//获取到struct标签，注意需要通过reflect.Type来获取tag标签的值</span></span><br><span class="line">tagVal := typ.Field(i).Tag.Get(<span class="string">&quot;json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> tagVal != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Field %d: tag为=%v\n&quot;</span>, i, tagVal)</span><br><span class="line">&#125;</span><br><span class="line">numofMethod := val.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">&quot;struct has %d methods\n&quot;</span>, numofMethod)</span><br><span class="line"><span class="comment">//var params []reflect.Value</span></span><br><span class="line"><span class="comment">//函数排序按照名字字母排序,A-&gt;Z</span></span><br><span class="line">val.Method(<span class="number">1</span>).Call(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//调用结构体的第1个方法Method(0)</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">10</span>))</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">40</span>))</span><br><span class="line">res := val.Method(<span class="number">0</span>).Call(params) <span class="comment">//传入的参数是[]reflect.Value</span></span><br><span class="line">fmt.Println(<span class="string">&quot;res=&quot;</span>, res[<span class="number">0</span>].Int()) <span class="comment">//返回结果,返回的结果是 []reflect.Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Monster = Monster&#123;</span><br><span class="line">Name:  <span class="string">&quot;黄鼠狼精&quot;</span>,</span><br><span class="line">Age:   <span class="number">400</span>,</span><br><span class="line">Score: <span class="number">30.8</span>,</span><br><span class="line">&#125;</span><br><span class="line">TestStruct(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go-语言第-17-章-反射&quot;&gt;&lt;a href=&quot;#Go-语言第-17-章-反射&quot; class=&quot;headerlink&quot; title=&quot;Go 语言第 17 章 反射&quot;&gt;&lt;/a&gt;Go 语言第 17 章 反射&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 18 章 `TCP` 编程</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2018_tcp%E7%BC%96%E7%A8%8B/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2018_tcp%E7%BC%96%E7%A8%8B/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:30:30.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-18-章-TCP-编程"><a href="#第-18-章-TCP-编程" class="headerlink" title="第 18 章 TCP 编程"></a>第 18 章 <code>TCP</code> 编程</h1><h2 id="网络编程基本介绍"><a href="#网络编程基本介绍" class="headerlink" title="网络编程基本介绍"></a>网络编程基本介绍</h2><p>Golang的主要设计目标之一就是面向大规模 务端 程序必不可少也是至关重要的一部分。 </p><p>网络编程有两种: </p><ol><li>TCP socket编程，是网络编程的主流。之所以叫Tcp socket编程，是因为底层是 基于Tcp&#x2F;ip协议的. 比如: QQ聊天 [示意图] </li><li>b&#x2F;s结构的http编程，我们使用浏览器去访问服务器时，使用的就是http协议， 而http底层依旧是用tcp socket实现的。[示意图] 比如: 京东商城 【这属于go web开发 范畴</li></ol><h3 id="网线，网卡，五险网卡"><a href="#网线，网卡，五险网卡" class="headerlink" title="网线，网卡，五险网卡"></a>网线，网卡，五险网卡</h3><p>计算机之间要相互通讯，必须要求网线，网卡，或者是无线网卡</p><h2 id="网络编程基础知识"><a href="#网络编程基础知识" class="headerlink" title="网络编程基础知识"></a>网络编程基础知识</h2><h3 id="协议-tcp-x2F-ip"><a href="#协议-tcp-x2F-ip" class="headerlink" title="协议(tcp&#x2F;ip)"></a>协议(tcp&#x2F;ip)</h3><p>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol)的简写,中文译名为传输控制 协议&#x2F;因特网互联协议，又叫网络通讯协议，这个协议是Internet最基本的协议、 Internet国际互联网络的基础，简单地说，就是由网络层的IP协议和传输层的TCP协 议组成的。</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142105516.png" alt="image-20220214210526344"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142106166.png" alt="image-20220214210603112"></p><h3 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h3><p>我们这里所指的端口不是指物理意义上的端口，而是特指TCP&#x2F;IP协议中的端口，是 逻辑意义上的端口。 如果把IP地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个 门，但是一个IP地址的端口可以有65536（即：256×256）个之多！端口是通过端口号来标记的，端口号只有整数，范围是从o到65535（256×256-1）</p><h3 id="端口-port-分类"><a href="#端口-port-分类" class="headerlink" title="端口(port)-分类"></a>端口(port)-分类</h3><ol><li><p>0号是保留端口. </p></li><li><p>1-1024是固定端口 </p><p>又叫有名端口,即被某些程序固定使用,一般程序员不使用. </p><p>22: SSH远程登录协议 23: teinet使用  21:ftp使用 </p><p>25: smtp服务使用 80:iis使用 7:echo服务 </p></li><li><p>1025-65535是动态端口 P 这些端口，程序员可以使用.</p></li></ol><h3 id="端口-port-使用注意"><a href="#端口-port-使用注意" class="headerlink" title="端口(port)-使用注意"></a>端口(port)-使用注意</h3><p>在计算机(尤其是做服务器)要尽可能的少 开端口 一个端口只能被一个程序监听 如果使用netstat -an可以查看本机有哪些端口在监听 可以使用netstat -anb 来查看监听端口的pid,在结合任务管理器关闭不安全的端口.</p><h2 id="tcp-socket-编程的客户端和服务器端（快速入门）"><a href="#tcp-socket-编程的客户端和服务器端（快速入门）" class="headerlink" title="tcp socket 编程的客户端和服务器端（快速入门）"></a>tcp socket 编程的客户端和服务器端（快速入门）</h2><p>为了授课方法，我们将tcp socket编程，简称 socket编程. 下图为Golang socket编程中客户端和服务器的网络分布</p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142138320.png" alt="image-20220214213848190" style="zoom:67%;" /><h3 id="服务端的处理流程"><a href="#服务端的处理流程" class="headerlink" title="服务端的处理流程"></a>服务端的处理流程</h3><ol><li>监听端口 </li><li>接收客户端的tcp链接，建立客户端和服务器端的链接. </li><li>创建goroutine，处理该链接的请求(通常客户端会通过链接发送请求包)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//循环接收客户端数据</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close() <span class="comment">//关闭 conn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//创建一个新的切片</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//conn.Read(buf)</span></span><br><span class="line"><span class="comment">//等待客户端通过 conn 发送信息</span></span><br><span class="line"><span class="comment">//如果客户端没有 write 发送,那么协程阻塞</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;服务器在等待客户端 %s 发送信息&quot;</span>, conn.RemoteAddr().String())</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端退出&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示客户端发送的内容到服务器的终端</span></span><br><span class="line">fmt.Print(<span class="type">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器开始监听...&quot;</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:9876&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;listen err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close() <span class="comment">//延时关闭 listen</span></span><br><span class="line"><span class="comment">//循环等待客户端来链接我</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//等待客户端连接</span></span><br><span class="line">fmt.Println(<span class="string">&quot;等待客户端来连接&quot;</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Accept() err=&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Accept() suc conn=%v 客户端 ip=%v\n&quot;</span>, conn, conn.RemoteAddr())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里准备起一个协程,为客户端服务</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;listen suc=%v\n&quot;, listen)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端的处理流程"><a href="#客户端的处理流程" class="headerlink" title="客户端的处理流程"></a>客户端的处理流程</h3><ol><li>建立与服务端的链接 </li><li>发送请求数据，接收服务器端返回的结果数据</li><li>关闭链接</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;192.168.69.169:9876&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;client dial err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn 成功&quot;</span>, conn)</span><br><span class="line"><span class="comment">//功能一:客户端发送单行数据,然后就退出</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin) <span class="comment">//标准输入</span></span><br><span class="line"><span class="comment">//从终端读取一行用户输入,并发送给服务器</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;readString err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再将 line 发送给服务器</span></span><br><span class="line">n, err := conn.Write([]<span class="type">byte</span>(line))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Write err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;客户端发送了 %d 字节的数据,并退出\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的程序示意图"><a href="#简单的程序示意图" class="headerlink" title="简单的程序示意图"></a>简单的程序示意图</h3><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142147948.png" alt="image-20220214214716830" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-18-章-TCP-编程&quot;&gt;&lt;a href=&quot;#第-18-章-TCP-编程&quot; class=&quot;headerlink&quot; title=&quot;第 18 章 TCP 编程&quot;&gt;&lt;/a&gt;第 18 章 &lt;code&gt;TCP&lt;/code&gt; 编程&lt;/h1&gt;&lt;h2 id=&quot;网络编程基本介绍</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 语言第 15 章 单元测试</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2015%20%E7%AB%A0%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2015%20%E7%AB%A0%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:31:59.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-语言第-15-章-单元测试"><a href="#Go-语言第-15-章-单元测试" class="headerlink" title="Go 语言第 15 章 单元测试"></a>Go 语言第 15 章 单元测试</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在工作中，会遇到这样的情况，就是确认一个函数，或者一个模块的结果是否正确，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统的方法"><a href="#传统的方法" class="headerlink" title="传统的方法"></a>传统的方法</h2><p><strong>传统的方式来进行测试：</strong>在 main 函数中，调用 addUpper 函数，看看实际输出的结果是否和预期的结果一致，如果一致， 则说明函数正确，否则函数有错误，然后修改错误</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个被测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//传统的测试方法,就是在 main 函数中使用看结果是否正确</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;addUpper错误 返回值:%v  期望值:%v\n&quot;</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;addUpper正确 返回值:%v  期望值:%v\n&quot;</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>不方便，我们需要在 main 函数中去调用，这样需要修改 main 函数，如果项目正在运行，就可能要关闭服务器</li><li>不利于管理，当有多个模块时，都需要写在 main 函数，不利用管理</li><li>引出单元测试</li></ol><hr><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Go语言中自带有一个轻量级的测试框架testing和自带的go test命令来实现单元测试 和性能测试，testing框架和其他语言中的测试框架类似，可以基于这个框架写针对 相应函数的<strong>测试用例</strong>，也可以基于该框架写相应的压力测试用例。通过单元测试， 可以解决如下问题： </p><ol><li>确保每个函数是可运行，并且运行结果是正确的</li><li>确保写出来的代码性能是好的， </li><li>单元测试能及时的发现程序设计或实现的逻辑错误，使问题及早暴露，便于问 题的定位解决，而性能测试的重点在于发现程序设计上的一些问题，让程序能 够在高并发的情况下还能保持稳定</li></ol><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>使用 Go 的单元测试，对 addUpper 和 sub 函数进行测试。</p><p><strong>特别说明：</strong>测试时，<font color="ff0000">可能</font>需要暂时退出 360</p><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111614451.png" alt="image-20220211161416373"></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111609209.png" alt="image-20220211160924109"></p><h4 id="cal-go"><a href="#cal-go" class="headerlink" title="cal.go"></a>cal.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="comment">//被测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSub</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 - n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cal-test-go"><a href="#cal-test-go" class="headerlink" title="cal_test.go"></a>cal_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个测试用例,去测试 addUpper 是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;, 55, res)</span></span><br><span class="line">t.Fatalf(<span class="string">&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;</span>, <span class="number">55</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果正确,输出日志</span></span><br><span class="line">t.Logf(<span class="string">&quot;AddUpper(10) 执行正确&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sub-test-go"><a href="#sub-test-go" class="headerlink" title="sub_test.go"></a>sub_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个测试用例,去测试 addUpper 是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">7</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;, 55, res)</span></span><br><span class="line">t.Fatalf(<span class="string">&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;</span>, <span class="number">55</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果正确,输出日志</span></span><br><span class="line">t.Logf(<span class="string">&quot;AddUpper(10) 执行正确&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111613281.png" alt="image-20220211161313217"></p><h2 id="单元测试快速入门总结"><a href="#单元测试快速入门总结" class="headerlink" title="单元测试快速入门总结"></a>单元测试快速入门总结</h2><ol><li><p>测试用例文件名必须以 _test.go 结尾。 比如 cal_test.go，cal不是固定的。 </p></li><li><p>测试用例函数必须以Test开头，一般来说就是Test+被测试的函数名，比如TestAddUpper。 </p></li><li><p>TestAddUpper(t <em>tesing.T)的形参类型必须是</em>testing.T【看一下手册】 </p></li><li><p>一个测试用例文件中，可以有多个测试用例函数，比如 TestAddUpper、TestSub </p></li><li><p>运行测试用例指令 </p><ol><li><code>go test</code> [如果运行正确，无日志，错误时，会输出日志]</li><li><code>go test -v</code> [运行正确或是错误，都输出日志]</li></ol></li><li><p>当出现错误时，可以使用t.Fatalf 来格式化输出错误信息，并退出程序 </p></li><li><p>t.Logf 方法可以输出相应的日志 </p></li><li><p>测试用例函数，并没有放在main函数中，也执行了，这就是测试用例的方便之处[原理图]. </p></li><li><p>PASS表示测试用例运行成功，FAIL 表示测试用例运行失败 </p></li><li><p>测试单个文件，一定要带上被测试的原文件</p><p>go test -v tal_test.go cal.go </p></li><li><p>测试单个方法 </p><p>go test -v -test.run TestAddUpper</p></li></ol><h2 id="单元测试-综合案例"><a href="#单元测试-综合案例" class="headerlink" title="单元测试-综合案例"></a>单元测试-综合案例</h2><h3 id="单元测试综合案例要求"><a href="#单元测试综合案例要求" class="headerlink" title="单元测试综合案例要求"></a>单元测试综合案例要求</h3><ol><li>编写一个Monster结构体，字段Name, Age,Skill </li><li>给Monster绑定方法Store, 可以将一个Monster变量(对象),序列化后保存到文件中 </li><li>给Monster绑定方法ReStore, 可以将一个序列化的Monster,从文件中读取，并反序列化为Monster对象 ,检查反序列化是否正确</li><li>编程测试用例文件 store_test.go， 编写测试用例函数 TestStore 和TestRestore进行测试</li></ol><h3 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111834030.png" alt="image-20220211183401903"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>monster_test.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 monster</span></span><br><span class="line">monster := Monster&#123;</span><br><span class="line">Name:  <span class="string">&quot;红孩儿&quot;</span>,</span><br><span class="line">Age:   <span class="number">10</span>,</span><br><span class="line">Skill: <span class="string">&quot;吐火&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">res := monster.Store()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.Store() 错误,希望为 %v 实际为 %v\n&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;monster.Store() 测试成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 Monster 实例,不需要指定字段的值</span></span><br><span class="line"><span class="keyword">var</span> monster = &amp;Monster&#123;&#125;</span><br><span class="line">res := monster.ReStore()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.ReStore() 错误, 希望为 %v 实际为 %v \n&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进一步判断</span></span><br><span class="line"><span class="keyword">if</span> monster.Name != <span class="string">&quot;红孩儿&quot;</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.ReStore() 错误, 希望为 %v 实际为 %v \n&quot;</span>, <span class="string">&quot;红孩儿&quot;</span>, monster.Name)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;monster.ReStore() 测试成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>monster.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span></span><br><span class="line">Skill <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 monster绑定方法 Store,可以将一个 monster 变量,序列化后保存到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> Store() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//先序列化</span></span><br><span class="line">data, err := json.Marshal(m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;marshal err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存到文件</span></span><br><span class="line">filepath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">err = ioutil.WriteFile(filepath, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;write file err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 Monster 绑定方法 ReStore, 可以将一个序列化的 Monster,从文件中读取,</span></span><br><span class="line"><span class="comment">//并反序列化为 Monster 对象,检查反序列化,名字正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> ReStore() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//1.先从文件中,读取序列化的字符串</span></span><br><span class="line">filePath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">data, err := ioutil.ReadFile(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Read file err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用读取 data []byte,反序列化</span></span><br><span class="line">err = json.Unmarshal(data, &amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;UnMarshal err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go-语言第-15-章-单元测试&quot;&gt;&lt;a href=&quot;#Go-语言第-15-章-单元测试&quot; class=&quot;headerlink&quot; title=&quot;Go 语言第 15 章 单元测试&quot;&gt;&lt;/a&gt;Go 语言第 15 章 单元测试&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>继承和接口的区别</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB%20/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB%20/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:32:45.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承和接口的区别"><a href="#继承和接口的区别" class="headerlink" title="继承和接口的区别"></a>继承和接口的区别</h1><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/1644043521565.png" alt="接口和继承"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeJudge</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, v := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 bool 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">float32</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 float32 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 float64 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>, <span class="type">int32</span>, <span class="type">int64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 整数 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 string 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数类型不确定,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="type">float32</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">2.3</span></span><br><span class="line"><span class="keyword">var</span> n3 <span class="type">int32</span> = <span class="number">789</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">address := <span class="string">&quot;北京&quot;</span></span><br><span class="line">n4 := <span class="number">300</span></span><br><span class="line">TypeJudge(n1, n2, n3, name, address, n4)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;继承和接口的区别&quot;&gt;&lt;a href=&quot;#继承和接口的区别&quot; class=&quot;headerlink&quot; title=&quot;继承和接口的区别&quot;&gt;&lt;/a&gt;继承和接口的区别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://icetuchuang.oss-cn-beijing.a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mac 安装使用 redis</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20redis/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20redis/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:29:33.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-安装使用-redis"><a href="#mac-安装使用-redis" class="headerlink" title="mac 安装使用 redis"></a>mac 安装使用 redis</h1><p><strong>使用 brew 安装 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p><strong>使用 brew 启动 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/opt/redis/bin/redis-server  /opt/homebrew/etc/redis.conf</span><br></pre></td></tr></table></figure><p><strong>使用 brew 卸载 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall redis</span><br><span class="line">//下面是一段输出信息</span><br><span class="line">//注意后两段</span><br></pre></td></tr></table></figure><blockquote><p>Uninstalling &#x2F;opt&#x2F;homebrew&#x2F;Cellar&#x2F;redis&#x2F;6.2.6… (14 files, 2MB)</p><p>Warning: The following may be redis configuration files and have not been removed!<br>If desired, remove them manually with <code>rm -rf</code>:<br> &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;redis-sentinel.conf  &#x2F;&#x2F;需要手动删除<br> &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;redis.conf                 &#x2F;&#x2F;需要手动删除</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac-安装使用-redis&quot;&gt;&lt;a href=&quot;#mac-安装使用-redis&quot; class=&quot;headerlink&quot; title=&quot;mac 安装使用 redis&quot;&gt;&lt;/a&gt;mac 安装使用 redis&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;使用 brew 安装 red</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常量</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/%E5%B8%B8%E9%87%8F/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/%E5%B8%B8%E9%87%8F/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:34:25.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="常量介绍"><a href="#常量介绍" class="headerlink" title="常量介绍"></a>常量介绍</h2><ol><li>常量使用const修改 </li><li>常量在定义的时候，必须初始化 </li><li>常量不能修改 常量只能修饰bool、数值类型(int，float系列)、string 类型 </li><li>语法：const identifier [type] &#x3D; value </li><li>举例说明,看看下面的写法是否正确： <ol><li>const name &#x3D; “tom”  :white_check_mark:</li><li>const tax float64 &#x3D; 0.8 :white_check_mark:</li><li>const a int :x:</li><li>const a int const b &#x3D; 9 &#x2F; 3 :white_check_mark:</li><li>const c &#x3D; getVal():x:</li></ol></li></ol><h2 id="常量使用注意事项"><a href="#常量使用注意事项" class="headerlink" title="常量使用注意事项"></a>常量使用注意事项</h2><ol><li><p>比较简洁的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span>(</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    b=<span class="number">2</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一种专业的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br><span class="line">  )</span><br><span class="line">  fmt.Println(a,b,c) <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Go中没有常量名必须字母大写的规范 比如 TAX_RATE</p></li><li><p>仍然通过首字母的大小写来控制常量的访问范围</p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h1&gt;&lt;h2 id=&quot;常量介绍&quot;&gt;&lt;a href=&quot;#常量介绍&quot; class=&quot;headerlink&quot; title=&quot;常量介绍&quot;&gt;&lt;/a&gt;常量介绍&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读取csv文件为pandas中的dataframe，然后转换为matrix</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/%E4%BD%BF%E7%94%A8%E5%88%97%E6%95%B0%E6%8D%AE%E5%88%B6%E4%BD%9Cmatrix/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/%E4%BD%BF%E7%94%A8%E5%88%97%E6%95%B0%E6%8D%AE%E5%88%B6%E4%BD%9Cmatrix/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:33:39.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="读取csv文件为pandas中的dataframe，然后转换为matrix"><a href="#读取csv文件为pandas中的dataframe，然后转换为matrix" class="headerlink" title="读取csv文件为pandas中的dataframe，然后转换为matrix"></a>读取csv文件为pandas中的dataframe，然后转换为matrix</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"><span class="keyword">from</span> tkinter.font <span class="keyword">import</span> names</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;file1.csv&quot;</span>,header=<span class="literal">None</span>,names=[<span class="string">&#x27;n1&#x27;</span>, <span class="string">&#x27;n2&#x27;</span>,<span class="string">&#x27;n3&#x27;</span>,<span class="string">&#x27;n4&#x27;</span>])</span><br><span class="line">df2=pd.read_csv(<span class="string">&quot;matrix_lj.csv&quot;</span>,header=<span class="literal">None</span>)</span><br><span class="line">matrix_lj=df2.values</span><br><span class="line"></span><br><span class="line">dict_kn=df[[<span class="string">&#x27;n4&#x27;</span>, <span class="string">&#x27;n1&#x27;</span>]].set_index(<span class="string">&#x27;n4&#x27;</span>).to_dict(orient=<span class="string">&#x27;dict&#x27;</span>)</span><br><span class="line"></span><br><span class="line">matrix_kn=np.zeros((<span class="number">2877</span>, <span class="number">2877</span>),dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">count1=-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> key1,value1 <span class="keyword">in</span> dict_kn[<span class="string">&quot;n1&quot;</span>].items():</span><br><span class="line">    count1+=<span class="number">1</span></span><br><span class="line">    count2=-<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> key2,value2 <span class="keyword">in</span> dict_kn[<span class="string">&quot;n1&quot;</span>].items():</span><br><span class="line">        count2+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> value1==value2 <span class="keyword">and</span> count1!=count2:</span><br><span class="line">            matrix_kn[count1,count2]=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">np.savetxt(<span class="string">&#x27;result2.csv&#x27;</span>, matrix_kn,fmt=<span class="string">&quot;%d&quot;</span>, delimiter = <span class="string">&#x27;,&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;读取csv文件为pandas中的dataframe，然后转换为matrix&quot;&gt;&lt;a href=&quot;#读取csv文件为pandas中的dataframe，然后转换为matrix&quot; class=&quot;headerlink&quot; title=&quot;读取csv文件为pandas中的da</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>海量用户即时通讯系统</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T14:34:07.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="海量用户即时通讯系统"><a href="#海量用户即时通讯系统" class="headerlink" title="海量用户即时通讯系统"></a>海量用户即时通讯系统</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>用户注册</li><li>用户登录</li><li>显示在线用户列表</li><li>群聊</li><li>点对点聊天</li><li>离线留言</li></ol><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><h3 id="显示客户端登陆菜单"><a href="#显示客户端登陆菜单" class="headerlink" title="显示客户端登陆菜单"></a>显示客户端登陆菜单</h3><p>功能：能够正确的显示客户端的菜单</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>Main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个变量,一个是用户 id,一个用户 password</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">userId  <span class="type">int</span></span><br><span class="line">userPwd <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//接收用户的选择</span></span><br><span class="line"><span class="keyword">var</span> key <span class="type">int</span></span><br><span class="line"><span class="comment">//判断是否还继续显示菜单</span></span><br><span class="line"><span class="keyword">var</span> loop = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------欢迎登陆多人聊天系统-----------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;\t\t\t 1 登陆聊天室&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;\t\t\t 2 注册用户&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;\t\t\t 2 退出系统&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;\t\t\t 请选择 1-3:&quot;</span>)</span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d\n&quot;</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;登陆聊天室&quot;</span>)</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;注册用户&quot;</span>)</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;退出系统&quot;</span>)</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;输入错误,请重新输入...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据用户的输入,显示新的提示信息</span></span><br><span class="line"><span class="keyword">if</span> key == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">//说明用户要登录</span></span><br><span class="line">fmt.Println(<span class="string">&quot;请输入用户的 id&quot;</span>)</span><br><span class="line">fmt.Scanf(<span class="string">&quot;%d\n&quot;</span>, &amp;userId)</span><br><span class="line">fmt.Println(<span class="string">&quot;请输入用户的密码&quot;</span>)</span><br><span class="line">fmt.Scanf(<span class="string">&quot;%s\n&quot;</span>, &amp;userPwd)</span><br><span class="line"><span class="comment">//先把登陆的函数,写到另外一个文件</span></span><br><span class="line">err := login(userId, userPwd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;登陆失败&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> key == <span class="number">2</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;进行用户注册&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Login.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个函数,完成登陆</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId <span class="type">int</span>, userPwd <span class="type">string</span>)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//定协议</span></span><br><span class="line">fmt.Printf(<span class="string">&quot; userId = %d userPwd=%s \n&quot;</span>, userId, userPwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成用户登陆"><a href="#完成用户登陆" class="headerlink" title="完成用户登陆"></a>完成用户登陆</h3><p><strong>要求：</strong>先完成指定用户的验证，用户id&#x3D;100，密码pwd&#x3D;123456可以登录，其它用户不能登录 </p><p>这里需要先说明一 个Message的组成(示意图)，并发送一 个Message的流程</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202171634322.png" alt="image-20220217163401241"></p><h4 id="服务端接收长度值"><a href="#服务端接收长度值" class="headerlink" title="服务端接收长度值"></a>服务端接收长度值</h4><p><strong>说明：</strong>完成客户端可以发送消息长度，服务端可以正常收到该长度值</p><p><strong>分析思路</strong></p><ol><li><p>先确定消息 Message 的格式和结构</p></li><li><p>然后根据上图的分析完成代码</p></li><li><p>示意图</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202171940486.png" alt="image-20220217194029278"></p><p>代码实现：笔记后面统一提交到 github</p></li></ol><h4 id="客户端接收消息"><a href="#客户端接收消息" class="headerlink" title="客户端接收消息"></a>客户端接收消息</h4><p><strong>说明：</strong>完成客户端可以发送消息本身，服务端可以正常收到该消息，并根据客户端发送的消息（LoginMes）,判断用户的合法性，并返回相应的 LoginResMes</p><p><strong>思路分析：</strong></p><ol><li>让客户端发送消息本身</li><li>服务器接收消息，然后反序列化乘对应的消息结构体</li><li>服务器端根据反序列化成对应的消息，判断是否登陆用户合法，返回 LoginResMes</li><li>客户端解析返回的 LoginResMes，显示对应界面</li><li>需要进行函数封装</li></ol><h4 id="程序结构的改进"><a href="#程序结构的改进" class="headerlink" title="程序结构的改进"></a>程序结构的改进</h4><p>前面的程序虽然完成了功能，但是没有结构，系统的可读性、扩展性和维护性 都不好，因此需要对程序的结构进行改进</p><p>改进服务器端，先画出程序的框架图，再写代码</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202181419401.png" alt="image-20220218141940115"></p><p><strong>步骤：</strong></p><ol><li><p>先把分析出来的文件创建好然后放到对应的包</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202181559431.png" alt="image-20220218155948202"></p><h4 id="整理客户端文件结构"><a href="#整理客户端文件结构" class="headerlink" title="整理客户端文件结构"></a>整理客户端文件结构</h4><ol><li><p>结构示意图</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202181609994.png" alt="image-20220218160838598"></p></li><li><p>先把各个文件放到对应的文件夹【包】</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202182128029.png" alt="image-20220218212843673"></p></li></ol><h4 id="完善登陆信息验证"><a href="#完善登陆信息验证" class="headerlink" title="完善登陆信息验证"></a>完善登陆信息验证</h4><ol><li><p>手动直接在 redis 增加一个用户信息</p></li><li><p>如输入的用户名密码在 Redis 中存在则登录，否则退出系统，并给出相应的 </p><p>提示信息: </p><ol><li>用户不存在,你也可以重新注册，再登录 </li><li>也可以重新注册，再登录</li></ol></li></ol></li></ol><h2 id="完成注册用户"><a href="#完成注册用户" class="headerlink" title="完成注册用户"></a>完成注册用户</h2><ol><li><p>完成注册功能，将用户信息录入到 Redis 中</p></li><li><p>思路分析，并完成代码</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;海量用户即时通讯系统&quot;&gt;&lt;a href=&quot;#海量用户即时通讯系统&quot; class=&quot;headerlink&quot; title=&quot;海量用户即时通讯系统&quot;&gt;&lt;/a&gt;海量用户即时通讯系统&lt;/h1&gt;&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
</feed>
