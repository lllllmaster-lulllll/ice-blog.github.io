<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aurora的博客</title>
  
  <subtitle>一个人如果不能从内心去原谅别人,那他就永远不会心安理得</subtitle>
  <link href="https://lllllmaster-lulllll.github.io/atom.xml" rel="self"/>
  
  <link href="https://lllllmaster-lulllll.github.io/"/>
  <updated>2022-03-07T07:21:02.831Z</updated>
  <id>https://lllllmaster-lulllll.github.io/</id>
  
  <author>
    <name>Aurora</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言标准库之http/template</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/07/gorm%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/07/gorm%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-07T07:18:04.000Z</published>
    <updated>2022-03-07T07:21:02.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GORM入门指南"><a href="#GORM入门指南" class="headerlink" title="GORM入门指南"></a>GORM入门指南</h1><p>gorm是一个使用Go语言编写的ORM框架。它文档齐全，对开发者友好，支持主流数据库。</p><p><strong>注意：本文发布于2020-02-11，文中使用的gorm版本有极大概率与你正在使用的不一致，为了更好的使用gorm请移步官方中文文档：<a href="https://gorm.io/zh_CN/docs/">https://gorm.io/zh_CN/docs/</a></strong></p><h2 id="gorm介绍"><a href="#gorm介绍" class="headerlink" title="gorm介绍"></a>gorm介绍</h2><p><a href="https://github.com/jinzhu/gorm">Github GORM</a></p><p><a href="https://gorm.io/zh_CN/">中文官方网站</a>内含十分齐全的中文文档，有了它你甚至不需要再继续向下阅读本文。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/sqlite</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接不同的数据库都需要导入对应数据的驱动程序，<code>GORM</code>已经贴心的为我们包装了一些驱动程序，只需要按如下方式导入需要的数据库驱动即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br></pre></td></tr></table></figure><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@(localhost)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接PostgreSQL"><a href="#连接PostgreSQL" class="headerlink" title="连接PostgreSQL"></a>连接PostgreSQL</h3><p>基本代码同上，注意引入对应<code>postgres</code>驱动并正确指定<code>gorm.Open()</code>参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;host=myhost port=myport user=gorm dbname=gorm password=mypassword&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接Sqlite3"><a href="#连接Sqlite3" class="headerlink" title="连接Sqlite3"></a>连接Sqlite3</h3><p>基本代码同上，注意引入对应<code>sqlite</code>驱动并正确指定<code>gorm.Open()</code>参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;sqlite3&quot;</span>, <span class="string">&quot;/tmp/gorm.db&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接SQL-Server"><a href="#连接SQL-Server" class="headerlink" title="连接SQL Server"></a>连接SQL Server</h3><p>基本代码同上，注意引入对应<code>mssql</code>驱动并正确指定<code>gorm.Open()</code>参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;mssql&quot;</span>, <span class="string">&quot;sqlserver://username:password@localhost:1433?database=dbname&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GORM基本示例"><a href="#GORM基本示例" class="headerlink" title="GORM基本示例"></a>GORM基本示例</h2><p><strong>注意:</strong></p><ol><li>本文以MySQL数据库为例，讲解GORM各项功能的主要使用方法。</li><li>往下阅读本文前，你需要有一个能够成功连接上的MySQL数据库实例。</li></ol><h3 id="Docker快速创建MySQL实例"><a href="#Docker快速创建MySQL实例" class="headerlink" title="Docker快速创建MySQL实例"></a>Docker快速创建MySQL实例</h3><p>很多同学如果不会安装MySQL或者懒得安装MySQL，可以使用一下命令快速运行一个MySQL8.0.19实例，当然前提是你要有docker环境…</p><p>在本地的<code>13306</code>端口运行一个名为<code>mysql8019</code>，root用户名密码为<code>root1234</code>的MySQL容器环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql8019 -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 -d mysql:8.0.19</span><br></pre></td></tr></table></figure><p>在另外启动一个<code>MySQL Client</code>连接上面的MySQL环境，密码为上一步指定的密码<code>root1234</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network host --<span class="built_in">rm</span> mysql mysql -h127.0.0.1 -P13306 --default-character-set=utf8mb4 -uroot -p</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在使用GORM前手动创建数据库<code>db1</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db1;</span><br></pre></td></tr></table></figure><h3 id="GORM操作MySQL"><a href="#GORM操作MySQL" class="headerlink" title="GORM操作MySQL"></a>GORM操作MySQL</h3><p>使用GORM连接上面的<code>db1</code>进行创建、查询、更新、删除操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserInfo 用户信息</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="type">uint</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Gender <span class="type">string</span></span><br><span class="line">Hobby <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:root1234@(127.0.0.1:13306)/db1?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err!= <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动迁移</span></span><br><span class="line">db.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class="line"></span><br><span class="line">u1 := UserInfo&#123;<span class="number">1</span>, <span class="string">&quot;七米&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;篮球&quot;</span>&#125;</span><br><span class="line">u2 := UserInfo&#123;<span class="number">2</span>, <span class="string">&quot;沙河娜扎&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;足球&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 创建记录</span></span><br><span class="line">db.Create(&amp;u1)</span><br><span class="line">db.Create(&amp;u2)</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="keyword">var</span> u = <span class="built_in">new</span>(UserInfo)</span><br><span class="line">db.First(u)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uu UserInfo</span><br><span class="line">db.Find(&amp;uu, <span class="string">&quot;hobby=?&quot;</span>, <span class="string">&quot;足球&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, uu)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">db.Model(&amp;u).Update(<span class="string">&quot;hobby&quot;</span>, <span class="string">&quot;双色球&quot;</span>)</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">db.Delete(&amp;u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GORM-Model定义"><a href="#GORM-Model定义" class="headerlink" title="GORM Model定义"></a>GORM Model定义</h2><p>在使用ORM工具时，通常我们需要在代码中定义模型（Models）与数据库中的数据表进行映射，在GORM中模型（Models）通常是正常定义的结构体、基本的go类型或它们的指针。 同时也支持<code>sql.Scanner</code>及<code>driver.Valuer</code>接口（interfaces）。</p><h3 id="gorm-Model"><a href="#gorm-Model" class="headerlink" title="gorm.Model"></a>gorm.Model</h3><p>为了方便模型定义，GORM内置了一个<code>gorm.Model</code>结构体。<code>gorm.Model</code>是一个包含了<code>ID</code>, <code>CreatedAt</code>, <code>UpdatedAt</code>, <code>DeletedAt</code>四个字段的Golang结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt *time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以将它嵌入到你自己的模型中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 `ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`字段注入到`User`模型中</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以完全自己定义模型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用gorm.Model，自行定义模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">int</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模型定义示例"><a href="#模型定义示例" class="headerlink" title="模型定义示例"></a>模型定义示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name         <span class="type">string</span></span><br><span class="line">  Age          sql.NullInt64</span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  Email        <span class="type">string</span>  <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;`</span></span><br><span class="line">  Role         <span class="type">string</span>  <span class="string">`gorm:&quot;size:255&quot;`</span> <span class="comment">// 设置字段大小为255</span></span><br><span class="line">  MemberNumber *<span class="type">string</span> <span class="string">`gorm:&quot;unique;not null&quot;`</span> <span class="comment">// 设置会员号（member number）唯一并且不为空</span></span><br><span class="line">  Num          <span class="type">int</span>     <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class="comment">// 设置 num 为自增类型</span></span><br><span class="line">  Address      <span class="type">string</span>  <span class="string">`gorm:&quot;index:addr&quot;`</span> <span class="comment">// 给address字段创建名为addr的索引</span></span><br><span class="line">  IgnoreMe     <span class="type">int</span>     <span class="string">`gorm:&quot;-&quot;`</span> <span class="comment">// 忽略本字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体标记（tags）"><a href="#结构体标记（tags）" class="headerlink" title="结构体标记（tags）"></a>结构体标记（tags）</h3><p>使用结构体声明模型时，标记（tags）是可选项。gorm支持以下标记:</p><h4 id="支持的结构体标记（Struct-tags）"><a href="#支持的结构体标记（Struct-tags）" class="headerlink" title="支持的结构体标记（Struct tags）"></a>支持的结构体标记（Struct tags）</h4><table><thead><tr><th align="center">结构体标记（Tag）</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Column</td><td align="center">指定列名</td></tr><tr><td align="center">Type</td><td align="center">指定列数据类型</td></tr><tr><td align="center">Size</td><td align="center">指定列大小, 默认值255</td></tr><tr><td align="center">PRIMARY_KEY</td><td align="center">将列指定为主键</td></tr><tr><td align="center">UNIQUE</td><td align="center">将列指定为唯一</td></tr><tr><td align="center">DEFAULT</td><td align="center">指定列默认值</td></tr><tr><td align="center">PRECISION</td><td align="center">指定列精度</td></tr><tr><td align="center">NOT NULL</td><td align="center">将列指定为非 NULL</td></tr><tr><td align="center">AUTO_INCREMENT</td><td align="center">指定列是否为自增类型</td></tr><tr><td align="center">INDEX</td><td align="center">创建具有或不带名称的索引, 如果多个索引同名则创建复合索引</td></tr><tr><td align="center">UNIQUE_INDEX</td><td align="center">和 <code>INDEX</code> 类似，只不过创建的是唯一索引</td></tr><tr><td align="center">EMBEDDED</td><td align="center">将结构设置为嵌入</td></tr><tr><td align="center">EMBEDDED_PREFIX</td><td align="center">设置嵌入结构的前缀</td></tr><tr><td align="center">-</td><td align="center">忽略此字段</td></tr></tbody></table><h4 id="关联相关标记（tags）"><a href="#关联相关标记（tags）" class="headerlink" title="关联相关标记（tags）"></a>关联相关标记（tags）</h4><table><thead><tr><th align="center">结构体标记（Tag）</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">MANY2MANY</td><td align="center">指定连接表</td></tr><tr><td align="center">FOREIGNKEY</td><td align="center">设置外键</td></tr><tr><td align="center">ASSOCIATION_FOREIGNKEY</td><td align="center">设置关联外键</td></tr><tr><td align="center">POLYMORPHIC</td><td align="center">指定多态类型</td></tr><tr><td align="center">POLYMORPHIC_VALUE</td><td align="center">指定多态值</td></tr><tr><td align="center">JOINTABLE_FOREIGNKEY</td><td align="center">指定连接表的外键</td></tr><tr><td align="center">ASSOCIATION_JOINTABLE_FOREIGNKEY</td><td align="center">指定连接表的关联外键</td></tr><tr><td align="center">SAVE_ASSOCIATIONS</td><td align="center">是否自动完成 save 的相关操作</td></tr><tr><td align="center">ASSOCIATION_AUTOUPDATE</td><td align="center">是否自动完成 update 的相关操作</td></tr><tr><td align="center">ASSOCIATION_AUTOCREATE</td><td align="center">是否自动完成 create 的相关操作</td></tr><tr><td align="center">ASSOCIATION_SAVE_REFERENCE</td><td align="center">是否自动完成引用的 save 的相关操作</td></tr><tr><td align="center">PRELOAD</td><td align="center">是否自动完成预加载的相关操作</td></tr></tbody></table><h2 id="主键、表名、列名的约定"><a href="#主键、表名、列名的约定" class="headerlink" title="主键、表名、列名的约定"></a>主键、表名、列名的约定</h2><h3 id="主键（Primary-Key）"><a href="#主键（Primary-Key）" class="headerlink" title="主键（Primary Key）"></a>主键（Primary Key）</h3><p>GORM 默认会使用名为ID的字段作为表的主键。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">string</span> <span class="comment">// 名为`ID`的字段会默认作为表的主键</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`AnimalID`作为主键</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">  AnimalID <span class="type">int64</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">  Name     <span class="type">string</span></span><br><span class="line">  Age      <span class="type">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表名（Table-Name）"><a href="#表名（Table-Name）" class="headerlink" title="表名（Table Name）"></a>表名（Table Name）</h3><p>表名默认就是结构体名称的复数，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;&#125; <span class="comment">// 默认表名是 `users`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 User 的表名设置为 `profiles`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;profiles&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin_users&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;users&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用默认表名的复数形式，如果置为 true，则 `User` 的默认表名是 `user`</span></span><br><span class="line">db.SingularTable(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>也可以通过<code>Table()</code>指定表名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用User结构体创建名为`deleted_users`的表</span></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deleted_users []User</span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Find(&amp;deleted_users)</span><br><span class="line"><span class="comment">//// SELECT * FROM deleted_users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete()</span><br><span class="line"><span class="comment">//// DELETE FROM deleted_users WHERE name = &#x27;jinzhu&#x27;;</span></span><br></pre></td></tr></table></figure><p>GORM还支持更改默认表名称规则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gorm.DefaultTableNameHandler = <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB, defaultTableName <span class="type">string</span>)</span></span> <span class="type">string</span>  &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;prefix_&quot;</span> + defaultTableName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列名（Column-Name）"><a href="#列名（Column-Name）" class="headerlink" title="列名（Column Name）"></a>列名（Column Name）</h3><p>列名由字段名称进行下划线分割来生成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span>      <span class="comment">// column name is `id`</span></span><br><span class="line">  Name      <span class="type">string</span>    <span class="comment">// column name is `name`</span></span><br><span class="line">  Birthday  time.Time <span class="comment">// column name is `birthday`</span></span><br><span class="line">  CreatedAt time.Time <span class="comment">// column name is `created_at`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用结构体tag指定列名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">  AnimalId    <span class="type">int64</span>     <span class="string">`gorm:&quot;column:beast_id&quot;`</span>         <span class="comment">// set column name to `beast_id`</span></span><br><span class="line">  Birthday    time.Time <span class="string">`gorm:&quot;column:day_of_the_beast&quot;`</span> <span class="comment">// set column name to `day_of_the_beast`</span></span><br><span class="line">  Age         <span class="type">int64</span>     <span class="string">`gorm:&quot;column:age_of_the_beast&quot;`</span> <span class="comment">// set column name to `age_of_the_beast`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间戳跟踪"><a href="#时间戳跟踪" class="headerlink" title="时间戳跟踪"></a>时间戳跟踪</h3><h4 id="CreatedAt"><a href="#CreatedAt" class="headerlink" title="CreatedAt"></a>CreatedAt</h4><p>如果模型有 <code>CreatedAt</code>字段，该字段的值将会是初次创建记录的时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Create(&amp;user) <span class="comment">// `CreatedAt`将会是当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用`Update`方法来改变`CreateAt`的值</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;CreatedAt&quot;</span>, time.Now())</span><br></pre></td></tr></table></figure><h4 id="UpdatedAt"><a href="#UpdatedAt" class="headerlink" title="UpdatedAt"></a>UpdatedAt</h4><p>如果模型有<code>UpdatedAt</code>字段，该字段的值将会是每次更新记录的时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.Save(&amp;user) <span class="comment">// `UpdatedAt`将会是当前时间</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>) <span class="comment">// `UpdatedAt`将会是当前时间</span></span><br></pre></td></tr></table></figure><h4 id="DeletedAt"><a href="#DeletedAt" class="headerlink" title="DeletedAt"></a>DeletedAt</h4><p>如果模型有<code>DeletedAt</code>字段，调用<code>Delete</code>删除该记录时，将会设置<code>DeletedAt</code>字段为当前时间，而不是直接将记录从数据库中删除。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GORM入门指南&quot;&gt;&lt;a href=&quot;#GORM入门指南&quot; class=&quot;headerlink&quot; title=&quot;GORM入门指南&quot;&gt;&lt;/a&gt;GORM入门指南&lt;/h1&gt;&lt;p&gt;gorm是一个使用Go语言编写的ORM框架。它文档齐全，对开发者友好，支持主流数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：本文发布于2020-02-11，文中使用的gorm版本有极大概率与你正在使用的不一致，为了更好的使用gorm请移步官方中文文档：&lt;a href=&quot;https://gorm.io/zh_CN/docs/&quot;&gt;https://gorm.io/zh_CN/docs/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;gorm介绍&quot;&gt;&lt;a href=&quot;#gorm介绍&quot; class=&quot;headerlink&quot; title=&quot;gorm介绍&quot;&gt;&lt;/a&gt;gorm介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jinzhu/gorm&quot;&gt;Github GORM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gorm.io/zh_CN/&quot;&gt;中文官方网站&lt;/a&gt;内含十分齐全的中文文档，有了它你甚至不需要再继续向下阅读本文。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get -u gorm.io/gorm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go get -u gorm.io/driver/sqlite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="gorm" scheme="https://lllllmaster-lulllll.github.io/tags/gorm/"/>
    
    <category term="数据库" scheme="https://lllllmaster-lulllll.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="https://lllllmaster-lulllll.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Gin框架介绍及使用</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/03/Gin%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/03/Gin%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-03-03T08:01:45.000Z</published>
    <updated>2022-03-03T08:14:19.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gin框架介绍及使用"><a href="#Gin框架介绍及使用" class="headerlink" title="Gin框架介绍及使用"></a>Gin框架介绍及使用</h1><p><code>Gin</code>是一个用Go语言编写的web框架。它是一个类似于<code>martini</code>但拥有更好性能的API框架, 由于使用了<code>httprouter</code>，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上<code>Gin</code>。</p><h2 id="Gin框架介绍"><a href="#Gin框架介绍" class="headerlink" title="Gin框架介绍"></a>Gin框架介绍</h2><p>Go世界里最流行的Web框架，<a href="https://github.com/gin-gonic/gin">Github</a>上有<code>32K+</code>star。 基于<a href="https://github.com/julienschmidt/httprouter">httprouter</a>开发的Web框架。 <a href="https://gin-gonic.com/zh-cn/docs/">中文文档</a>齐全，简单易用的轻量级框架。</p><h2 id="Gin框架安装与使用"><a href="#Gin框架安装与使用" class="headerlink" title="Gin框架安装与使用"></a>Gin框架安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载并安装<code>Gin</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="第一个Gin示例："><a href="#第一个Gin示例：" class="headerlink" title="第一个Gin示例："></a>第一个Gin示例：</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// GET：请求方式；/hello：请求的路径</span></span><br><span class="line"><span class="comment">// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数</span></span><br><span class="line">r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// c.JSON：返回JSON格式的数据</span></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动HTTP服务，默认在0.0.0.0:8080启动服务</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的代码保存并编译执行，然后使用浏览器打开<code>127.0.0.1:8080/hello</code>就能看到一串JSON字符串。</p><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”或“表现层状态转化”。</p><p>推荐阅读<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">阮一峰 理解RESTful架构</a></p><p>简单来说，REST的含义就是客户端与Web服务器之间进行交互的时候，使用HTTP协议中的4个请求方法代表不同的动作。</p><ul><li><code>GET</code>用来获取资源</li><li><code>POST</code>用来新建资源</li><li><code>PUT</code>用来更新资源</li><li><code>DELETE</code>用来删除资源。</li></ul><p>只要API程序遵循了REST风格，那就可以称其为RESTful API。目前在前后端分离的架构中，前后端基本都是通过RESTful API来进行交互。</p><p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p><table><thead><tr><th align="center">请求方法</th><th align="center">URL</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">&#x2F;book</td><td align="center">查询书籍信息</td></tr><tr><td align="center">POST</td><td align="center">&#x2F;create_book</td><td align="center">创建书籍记录</td></tr><tr><td align="center">POST</td><td align="center">&#x2F;update_book</td><td align="center">更新书籍信息</td></tr><tr><td align="center">POST</td><td align="center">&#x2F;delete_book</td><td align="center">删除书籍信息</td></tr></tbody></table><p>同样的需求我们按照RESTful API设计如下：</p><table><thead><tr><th align="center">请求方法</th><th align="center">URL</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">&#x2F;book</td><td align="center">查询书籍信息</td></tr><tr><td align="center">POST</td><td align="center">&#x2F;book</td><td align="center">创建书籍记录</td></tr><tr><td align="center">PUT</td><td align="center">&#x2F;book</td><td align="center">更新书籍信息</td></tr><tr><td align="center">DELETE</td><td align="center">&#x2F;book</td><td align="center">删除书籍信息</td></tr></tbody></table><p>Gin框架支持开发RESTful API的开发。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.PUT(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.DELETE(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发RESTful API的时候我们通常使用<a href="https://www.getpostman.com/">Postman</a>来作为客户端的测试工具。</p><h2 id="Gin渲染"><a href="#Gin渲染" class="headerlink" title="Gin渲染"></a>Gin渲染</h2><h3 id="HTML渲染"><a href="#HTML渲染" class="headerlink" title="HTML渲染"></a>HTML渲染</h3><p>我们首先定义一个存放模板文件的<code>templates</code>文件夹，然后在其内部按照业务分别定义一个<code>posts</code>文件夹和一个<code>users</code>文件夹。 <code>posts/index.html</code>文件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;define &quot;posts/index.html&quot;&#125;&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;posts/index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;.title&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>users/index.html</code>文件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;define &quot;users/index.html&quot;&#125;&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;users/index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;.title&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p>Gin框架中使用<code>LoadHTMLGlob()</code>或者<code>LoadHTMLFiles()</code>方法进行HTML模板渲染。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line"><span class="comment">//r.LoadHTMLFiles(&quot;templates/posts/index.html&quot;, &quot;templates/users/index.html&quot;)</span></span><br><span class="line">r.GET(<span class="string">&quot;/posts/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;posts/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;posts/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;users/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;users/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;users/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义模板函数"><a href="#自定义模板函数" class="headerlink" title="自定义模板函数"></a>自定义模板函数</h3><p>定义一个不转义相应内容的<code>safe</code>模板函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(str <span class="type">string</span>)</span></span> template.HTML&#123;</span><br><span class="line"><span class="keyword">return</span> template.HTML(str)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">router.LoadHTMLFiles(<span class="string">&quot;./index.tmpl&quot;</span>)</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.tmpl&quot;</span>, <span class="string">&quot;&lt;a href=&#x27;https://liwenzhou.com&#x27;&gt;李文周的博客&lt;/a&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>index.tmpl</code>中使用定义好的<code>safe</code>模板函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改模板引擎的标识符&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; . | safe &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h3><p>当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用<code>gin.Static</code>方法即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用模板继承"><a href="#使用模板继承" class="headerlink" title="使用模板继承"></a>使用模板继承</h3><p>Gin框架默认都是使用单模板，如果需要使用<code>block template</code>功能，可以通过<code>&quot;github.com/gin-contrib/multitemplate&quot;</code>库实现，具体示例如下：</p><p>首先，假设我们项目目录下的templates文件夹下有以下模板文件，其中<code>home.tmpl</code>和<code>index.tmpl</code>继承了<code>base.tmpl</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">templates</span><br><span class="line">├── includes</span><br><span class="line">│   ├── home.tmpl</span><br><span class="line">│   └── index.tmpl</span><br><span class="line">├── layouts</span><br><span class="line">│   └── base.tmpl</span><br><span class="line">└── scripts.tmpl</span><br></pre></td></tr></table></figure><p>然后我们定义一个<code>loadTemplates</code>函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadTemplates</span><span class="params">(templatesDir <span class="type">string</span>)</span></span> multitemplate.Renderer &#123;</span><br><span class="line">r := multitemplate.NewRenderer()</span><br><span class="line">layouts, err := filepath.Glob(templatesDir + <span class="string">&quot;/layouts/*.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">includes, err := filepath.Glob(templatesDir + <span class="string">&quot;/includes/*.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为layouts/和includes/目录生成 templates map</span></span><br><span class="line"><span class="keyword">for</span> _, include := <span class="keyword">range</span> includes &#123;</span><br><span class="line">layoutCopy := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(layouts))</span><br><span class="line"><span class="built_in">copy</span>(layoutCopy, layouts)</span><br><span class="line">files := <span class="built_in">append</span>(layoutCopy, include)</span><br><span class="line">r.AddFromFiles(filepath.Base(include), files...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>main</code>函数中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexFunc</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.tmpl&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">homeFunc</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;home.tmpl&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.HTMLRender = loadTemplates(<span class="string">&quot;./templates&quot;</span>)</span><br><span class="line">r.GET(<span class="string">&quot;/index&quot;</span>, indexFunc)</span><br><span class="line">r.GET(<span class="string">&quot;/home&quot;</span>, homeFunc)</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充文件路径处理"><a href="#补充文件路径处理" class="headerlink" title="补充文件路径处理"></a>补充文件路径处理</h3><p>关于模板文件和静态文件的路径，我们需要根据公司&#x2F;项目的要求进行设置。可以使用下面的函数获取当前执行程序的路径。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCurrentPath</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ex, err := os.Executable(); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> filepath.Dir(ex)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;./&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON渲染"><a href="#JSON渲染" class="headerlink" title="JSON渲染"></a>JSON渲染</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方式一：自己拼接JSON</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法二：使用结构体</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Age     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">msg.Name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">msg.Age = <span class="number">18</span></span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML渲染"><a href="#XML渲染" class="headerlink" title="XML渲染"></a>XML渲染</h3><p>注意需要使用具名的结构体类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class="line">r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方式一：自己拼接JSON</span></span><br><span class="line">c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法二：使用结构体</span></span><br><span class="line"><span class="keyword">type</span> MessageRecord <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Age     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> msg MessageRecord</span><br><span class="line">msg.Name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">msg.Age = <span class="number">18</span></span><br><span class="line">c.XML(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="YMAL渲染"><a href="#YMAL渲染" class="headerlink" title="YMAL渲染"></a>YMAL渲染</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="protobuf渲染"><a href="#protobuf渲染" class="headerlink" title="protobuf渲染"></a>protobuf渲染</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/someProtoBuf&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reps := []<span class="type">int64</span>&#123;<span class="type">int64</span>(<span class="number">1</span>), <span class="type">int64</span>(<span class="number">2</span>)&#125;</span><br><span class="line">label := <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">// protobuf 的具体定义写在 testdata/protoexample 文件中。</span></span><br><span class="line">data := &amp;protoexample.Test&#123;</span><br><span class="line">Label: &amp;label,</span><br><span class="line">Reps:  reps,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请注意，数据在响应中变为二进制数据</span></span><br><span class="line"><span class="comment">// 将输出被 protoexample.Test protobuf 序列化了的数据</span></span><br><span class="line">c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><h3 id="获取querystring参数"><a href="#获取querystring参数" class="headerlink" title="获取querystring参数"></a>获取querystring参数</h3><p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=小王子&amp;address=沙河</code>。 获取请求的querystring参数的方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//Default返回一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/search&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.DefaultQuery(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;小王子&quot;</span>)</span><br><span class="line"><span class="comment">//username := c.Query(&quot;username&quot;)</span></span><br><span class="line">address := c.Query(<span class="string">&quot;address&quot;</span>)</span><br><span class="line"><span class="comment">//输出json结果给调用方</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:  address,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取form参数"><a href="#获取form参数" class="headerlink" title="获取form参数"></a>获取form参数</h3><p>当前端请求的数据通过form表单提交时，例如向<code>/user/search</code>发送一个POST请求，获取请求数据的方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//Default返回一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/user/search&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// DefaultPostForm取不到值时会返回指定的默认值</span></span><br><span class="line"><span class="comment">//username := c.DefaultPostForm(&quot;username&quot;, &quot;小王子&quot;)</span></span><br><span class="line">username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">address := c.PostForm(<span class="string">&quot;address&quot;</span>)</span><br><span class="line"><span class="comment">//输出json结果给调用方</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:  address,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取json参数"><a href="#获取json参数" class="headerlink" title="获取json参数"></a>获取json参数</h3><p>当前端请求的数据通过JSON提交时，例如向<code>/json</code>发送一个POST请求，则获取请求参数的方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 注意：下面为了举例子方便，暂时忽略了错误处理</span></span><br><span class="line">b, _ := c.GetRawData()  <span class="comment">// 从c.Request.Body读取请求数据</span></span><br><span class="line"><span class="comment">// 定义map或结构体</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">_ = json.Unmarshal(b, &amp;m)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, m)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更便利的获取请求参数的方式，参见下面的 <strong>参数绑定</strong> 小节。</p><h3 id="获取path参数"><a href="#获取path参数" class="headerlink" title="获取path参数"></a>获取path参数</h3><p>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code>。 获取请求URL路径中的参数的方式如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//Default返回一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/search/:username/:address&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.Param(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">address := c.Param(<span class="string">&quot;address&quot;</span>)</span><br><span class="line"><span class="comment">//输出json结果给调用方</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:  address,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。 下面的示例代码演示了<code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取<code>JSON</code>、<code>form表单</code>和<code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binding from JSON</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="type">string</span> <span class="string">`form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定JSON的示例 (&#123;&quot;user&quot;: &quot;q1mi&quot;, &quot;password&quot;: &quot;123456&quot;&#125;)</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;login info:%#v\n&quot;</span>, login)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定form表单示例 (user=q1mi&amp;password=123456)</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginForm&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"><span class="comment">// ShouldBind()会根据请求的Content-Type自行选择绑定器</span></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定QueryString示例 (/loginQuery?user=q1mi&amp;password=123456)</span></span><br><span class="line">router.GET(<span class="string">&quot;/loginForm&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> login Login</span><br><span class="line"><span class="comment">// ShouldBind()会根据请求的Content-Type自行选择绑定器</span></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;login); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:     login.User,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: login.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ShouldBind</code>会按照下面的顺序解析请求中的数据完成绑定：</p><ol><li>如果是 <code>GET</code> 请求，只使用 <code>Form</code> 绑定引擎（<code>query</code>）。</li><li>如果是 <code>POST</code> 请求，首先检查 <code>content-type</code> 是否为 <code>JSON</code> 或 <code>XML</code>，然后再使用 <code>Form</code>（<code>form-data</code>）。</li></ol><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="单个文件上传"><a href="#单个文件上传" class="headerlink" title="单个文件上传"></a>单个文件上传</h3><p>文件上传前端页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传文件示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端gin框架部分代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span></span><br><span class="line"><span class="comment">// 可以通过下面的方式修改</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 单个文件</span></span><br><span class="line">file, err := c.FormFile(<span class="string">&quot;f1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(file.Filename)</span><br><span class="line">dst := fmt.Sprintf(<span class="string">&quot;C:/tmp/%s&quot;</span>, file.Filename)</span><br><span class="line"><span class="comment">// 上传文件到指定的目录</span></span><br><span class="line">c.SaveUploadedFile(file, dst)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27; uploaded!&quot;</span>, file.Filename),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个文件上传"><a href="#多个文件上传" class="headerlink" title="多个文件上传"></a>多个文件上传</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// 处理multipart forms提交文件时默认的内存限制是32 MiB</span></span><br><span class="line"><span class="comment">// 可以通过下面的方式修改</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// Multipart form</span></span><br><span class="line">form, _ := c.MultipartForm()</span><br><span class="line">files := form.File[<span class="string">&quot;file&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">log.Println(file.Filename)</span><br><span class="line">dst := fmt.Sprintf(<span class="string">&quot;C:/tmp/%s_%d&quot;</span>, file.Filename, index)</span><br><span class="line"><span class="comment">// 上传文件到指定的目录</span></span><br><span class="line">c.SaveUploadedFile(file, dst)</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: fmt.Sprintf(<span class="string">&quot;%d files uploaded!&quot;</span>, <span class="built_in">len</span>(files)),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="HTTP重定向"><a href="#HTTP重定向" class="headerlink" title="HTTP重定向"></a>HTTP重定向</h3><p>HTTP 重定向很容易。 内部、外部重定向均支持。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;http://www.sogo.com/&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>路由重定向，使用<code>HandleContext</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 指定重定向的URL</span></span><br><span class="line">    c.Request.URL.Path = <span class="string">&quot;/test2&quot;</span></span><br><span class="line">    r.HandleContext(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/test2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Gin路由"><a href="#Gin路由" class="headerlink" title="Gin路由"></a>Gin路由</h2><h3 id="普通路由"><a href="#普通路由" class="headerlink" title="普通路由"></a>普通路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br></pre></td></tr></table></figure><p>此外，还有一个可以匹配所有请求方法的<code>Any</code>方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Any(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br></pre></td></tr></table></figure><p>为没有配置处理函数的路由添加处理程序，默认情况下它返回404代码，下面的代码为没有匹配到路由的请求都返回<code>views/404.html</code>页面。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.NoRoute(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusNotFound, <span class="string">&quot;views/404.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由组"><a href="#路由组" class="headerlink" title="路由组"></a>路由组</h3><p>我们可以将拥有共同URL前缀的路由划分为一个路由组。习惯性一对<code>&#123;&#125;</code>包裹同组的路由，这只是为了看着清晰，你用不用<code>&#123;&#125;</code>包裹功能上没什么区别。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">userGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">userGroup.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">userGroup.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">shopGroup.GET(<span class="string">&quot;/cart&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">shopGroup.POST(<span class="string">&quot;/checkout&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">&#125;</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由组也是支持嵌套的，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">shopGroup.GET(<span class="string">&quot;/cart&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">shopGroup.POST(<span class="string">&quot;/checkout&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line"><span class="comment">// 嵌套路由组</span></span><br><span class="line">xx := shopGroup.Group(<span class="string">&quot;xx&quot;</span>)</span><br><span class="line">xx.GET(<span class="string">&quot;/oo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常我们将路由分组用在划分业务逻辑或划分API版本时。</p><h3 id="路由原理"><a href="#路由原理" class="headerlink" title="路由原理"></a>路由原理</h3><p>Gin框架中的路由使用的是<a href="https://github.com/julienschmidt/httprouter">httprouter</a>这个库。</p><p>其基本原理就是构造一个路由地址的前缀树。</p><h2 id="Gin中间件"><a href="#Gin中间件" class="headerlink" title="Gin中间件"></a>Gin中间件</h2><p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件，中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等。</p><h3 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h3><p>Gin中的中间件必须是一个<code>gin.HandlerFunc</code>类型。例如我们像下面的代码一样定义一个统计请求耗时的中间件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StatCost 是一个统计耗时请求耗时的中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">c.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小王子&quot;</span>) <span class="comment">// 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span></span><br><span class="line"><span class="comment">// 调用该请求的剩余处理程序</span></span><br><span class="line">c.Next()</span><br><span class="line"><span class="comment">// 不调用该请求的剩余处理程序</span></span><br><span class="line"><span class="comment">// c.Abort()</span></span><br><span class="line"><span class="comment">// 计算耗时</span></span><br><span class="line">cost := time.Since(start)</span><br><span class="line">log.Println(cost)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h3><p>在gin框架中，我们可以为每个路由添加任意数量的中间件。</p><h4 id="为全局路由注册"><a href="#为全局路由注册" class="headerlink" title="为全局路由注册"></a>为全局路由注册</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 新建一个没有任何默认中间件的路由</span></span><br><span class="line">r := gin.New()</span><br><span class="line"><span class="comment">// 注册一个全局中间件</span></span><br><span class="line">r.Use(StatCost())</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.MustGet(<span class="string">&quot;name&quot;</span>).(<span class="type">string</span>) <span class="comment">// 从上下文取值</span></span><br><span class="line">log.Println(name)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为某个路由单独注册"><a href="#为某个路由单独注册" class="headerlink" title="为某个路由单独注册"></a>为某个路由单独注册</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给/test2路由单独注册中间件（可注册多个）</span></span><br><span class="line">r.GET(<span class="string">&quot;/test2&quot;</span>, StatCost(), <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.MustGet(<span class="string">&quot;name&quot;</span>).(<span class="type">string</span>) <span class="comment">// 从上下文取值</span></span><br><span class="line">log.Println(name)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="为路由组注册中间件"><a href="#为路由组注册中间件" class="headerlink" title="为路由组注册中间件"></a>为路由组注册中间件</h4><p>为路由组注册中间件有以下两种写法。</p><p>写法1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>, StatCost())</span><br><span class="line">&#123;</span><br><span class="line">    shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">shopGroup.Use(StatCost())</span><br><span class="line">&#123;</span><br><span class="line">    shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;...&#125;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件注意事项"><a href="#中间件注意事项" class="headerlink" title="中间件注意事项"></a>中间件注意事项</h3><h4 id="gin默认中间件"><a href="#gin默认中间件" class="headerlink" title="gin默认中间件"></a>gin默认中间件</h4><p><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p><ul><li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li><li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li></ul><p>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p><h4 id="gin中间件中使用goroutine"><a href="#gin中间件中使用goroutine" class="headerlink" title="gin中间件中使用goroutine"></a>gin中间件中使用goroutine</h4><p>当在中间件或<code>handler</code>中启动新的<code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）。</p><h2 id="运行多个服务"><a href="#运行多个服务" class="headerlink" title="运行多个服务"></a>运行多个服务</h2><p>我们可以在多个端口启动服务，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/sync/errgroup&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">g errgroup.Group</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router01</span><span class="params">()</span></span> http.Handler &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line"><span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 01&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router02</span><span class="params">()</span></span> http.Handler &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line"><span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 02&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server01 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler:      router01(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server02 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">&quot;:8081&quot;</span>,</span><br><span class="line">Handler:      router02(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 借助errgroup.Group或者自行开启两个goroutine分别启动两个服务</span></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server01.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server02.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := g.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自<a href="https://liwenzhou.com/posts/Go/Gin_framework/">李文周的博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Gin框架介绍及使用&quot;&gt;&lt;a href=&quot;#Gin框架介绍及使用&quot; class=&quot;headerlink&quot; title=&quot;Gin框架介绍及使用&quot;&gt;&lt;/a&gt;Gin框架介绍及使用&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Gin&lt;/code&gt;是一个用Go语言编写的web框架。它是一个类似于&lt;code&gt;martini&lt;/code&gt;但拥有更好性能的API框架, 由于使用了&lt;code&gt;httprouter&lt;/code&gt;，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上&lt;code&gt;Gin&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Gin框架介绍&quot;&gt;&lt;a href=&quot;#Gin框架介绍&quot; class=&quot;headerlink&quot; title=&quot;Gin框架介绍&quot;&gt;&lt;/a&gt;Gin框架介绍&lt;/h2&gt;&lt;p&gt;Go世界里最流行的Web框架，&lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;Github&lt;/a&gt;上有&lt;code&gt;32K+&lt;/code&gt;star。 基于&lt;a href=&quot;https://github.com/julienschmidt/httprouter&quot;&gt;httprouter&lt;/a&gt;开发的Web框架。 &lt;a href=&quot;https://gin-gonic.com/zh-cn/docs/&quot;&gt;中文文档&lt;/a&gt;齐全，简单易用的轻量级框架。&lt;/p&gt;
&lt;h2 id=&quot;Gin框架安装与使用&quot;&gt;&lt;a href=&quot;#Gin框架安装与使用&quot; class=&quot;headerlink&quot; title=&quot;Gin框架安装与使用&quot;&gt;&lt;/a&gt;Gin框架安装与使用&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;下载并安装&lt;code&gt;Gin&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get -u github.com/gin-gonic/gin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="gin" scheme="https://lllllmaster-lulllll.github.io/tags/gin/"/>
    
    <category term="gorm" scheme="https://lllllmaster-lulllll.github.io/tags/gorm/"/>
    
    <category term="框架" scheme="https://lllllmaster-lulllll.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Go语言标准库之http/template</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/03/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bhttp_template/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/03/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bhttp_template/</id>
    <published>2022-03-03T08:01:45.000Z</published>
    <updated>2022-03-03T17:51:41.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言标准库之http-x2F-template"><a href="#Go语言标准库之http-x2F-template" class="headerlink" title="Go语言标准库之http&#x2F;template"></a>Go语言标准库之http&#x2F;template</h1><p><code>html/template</code>包实现了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容。它提供了和<code>text/template</code>包相同的接口，Go语言中输出HTML的场景都应使用<code>html/template</code>这个包。</p><h1 id="模板与渲染"><a href="#模板与渲染" class="headerlink" title="模板与渲染"></a>模板与渲染</h1><p>在一些前后端不分离的Web架构中，我们通常需要在后端将一些数据渲染到HTML文档中，从而实现动态的网页（网页的布局和样式大致一样，但展示的内容并不一样）效果。</p><p>我们这里说的模板可以理解为事先定义好的HTML文档文件，模板渲染的作用机制可以简单理解为文本替换操作–使用相应的数据去替换HTML文档中事先准备好的标记。</p><p>很多编程语言的Web框架中都使用各种模板引擎，比如Python语言中Flask框架中使用的jinja2模板引擎。</p><span id="more"></span><h2 id="Go语言的模板引擎"><a href="#Go语言的模板引擎" class="headerlink" title="Go语言的模板引擎"></a>Go语言的模板引擎</h2><p>Go语言内置了文本模板引擎<code>text/template</code>和用于HTML文档的<code>html/template</code>。它们的作用机制可以简单归纳如下：</p><ol><li>模板文件通常定义为<code>.tmpl</code>和<code>.tpl</code>为后缀（也可以使用其他的后缀），必须使用<code>UTF8</code>编码。</li><li>模板文件中使用<code>&#123;&#123;`和`&#125;&#125;</code>包裹和标识需要传入的数据。</li><li>传给模板这样的数据就可以通过点号（<code>.</code>）来访问，如果数据是复杂类型的数据，可以通过{ { .FieldName }}来访问它的字段。</li><li>除<code>&#123;&#123;`和`&#125;&#125;</code>包裹的内容外，其他内容均不做修改原样输出。</li></ol><h2 id="模板引擎的使用"><a href="#模板引擎的使用" class="headerlink" title="模板引擎的使用"></a>模板引擎的使用</h2><p>Go语言模板引擎的使用可以分为三部分：定义模板文件、解析模板文件和模板渲染.</p><h3 id="定义模板文件"><a href="#定义模板文件" class="headerlink" title="定义模板文件"></a>定义模板文件</h3><p>其中，定义模板文件时需要我们按照相关语法规则去编写，后文会详细介绍。</p><h3 id="解析模板文件"><a href="#解析模板文件" class="headerlink" title="解析模板文件"></a>解析模板文件</h3><p>上面定义好了模板文件之后，可以使用下面的常用方法去解析模板文件，得到模板对象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span></span> Parse(src <span class="type">string</span>) (*Template, <span class="type">error</span>) <span class="comment">//解析字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseFiles</span><span class="params">(filenames ...<span class="type">string</span>)</span></span> (*Template, <span class="type">error</span>) <span class="comment">//解析文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseGlob</span><span class="params">(pattern <span class="type">string</span>)</span></span> (*Template, <span class="type">error</span>)<span class="comment">//正则匹配</span></span><br></pre></td></tr></table></figure><p>当然，你也可以使用<code>func New(name string) *Template</code>函数创建一个名为<code>name</code>的模板，然后对其调用上面的方法去解析模板字符串或模板文件。</p><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>渲染模板简单来说就是使用数据去填充模板，当然实际上可能会复杂很多。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span></span> Execute(wr io.Writer, data <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span></span> ExecuteTemplate(wr io.Writer, name <span class="type">string</span>, data <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br></pre></td></tr></table></figure><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><h4 id="定义模板文件-1"><a href="#定义模板文件-1" class="headerlink" title="定义模板文件"></a>定义模板文件</h4><p>我们按照Go模板语法定义一个<code>hello.tmpl</code>的模板文件，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;.&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解析和渲染模板文件"><a href="#解析和渲染模板文件" class="headerlink" title="解析和渲染模板文件"></a>解析和渲染模板文件</h4><p>然后我们创建一个<code>main.go</code>文件，在其中写下HTTP server端代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析指定文件生成模板对象</span></span><br><span class="line">tmpl, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用给定数据渲染模板，并将结果写入w</span></span><br><span class="line">tmpl.Execute(w, <span class="string">&quot;沙河小王子&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, sayHello)</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HTTP server failed,err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的<code>main.go</code>文件编译执行，然后使用浏览器访问<code>http://127.0.0.1:9090</code>就能看到页面上显示了“Hello 沙河小王子”。 这就是一个最简单的模板渲染的示例，Go语言模板引擎详细用法请往下阅读。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>模板语法都包含在<code>&#123;&#123;`和`&#125;&#125;</code>中间，其中<code>&#123;&#123;·&#125;&#125;</code>中的点表示当前对象。</p><p>当我们传入一个结构体对象时，我们可以根据<code>.</code>来访问结构体的对应字段。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Gender <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析指定文件生成模板对象</span></span><br><span class="line">tmpl, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用给定数据渲染模板，并将结果写入w</span></span><br><span class="line">user := UserInfo&#123;</span><br><span class="line">Name:   <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">Gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">Age:    <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">tmpl.Execute(w, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板文件<code>hello.tmpl</code>内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;.Gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理，当我们传入的变量是map时，也可以在模板文件中通过<code>.</code>根据key来取值。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;/* a comment */&#125;&#125;</span><br><span class="line">注释，执行时会忽略。可以多行。注释不能嵌套，并且必须紧贴分界符始止。</span><br></pre></td></tr></table></figure><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p><code>pipeline</code>是指产生数据的操作。比如<code>&#123;&#123;.&#125;&#125;</code>、<code>&#123;&#123;.Name&#125;&#125;</code>等。Go的模板语法中支持使用管道符号<code>|</code>链接多个命令，用法和unix下的管道类似：<code>|</code>前面的命令会将运算结果(或返回值)传递给后一个命令的最后一个位置。</p><p><strong>注意：</strong>并不是只有使用了<code>|</code>才是pipeline。Go的模板语法中，<code>pipeline的</code>概念是传递数据，只要能产生数据的，都是<code>pipeline</code>。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>我们还可以在模板中声明变量，用来保存传入模板的数据或其他语句生成的结果。具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$obj := &#123;&#123;.&#125;&#125;</span><br></pre></td></tr></table></figure><p>其中<code>$obj</code>是变量的名字，在后续的代码中就可以使用该变量了。</p><h3 id="移除空格"><a href="#移除空格" class="headerlink" title="移除空格"></a>移除空格</h3><p>有时候我们在使用模板语法的时候会不可避免的引入一下空格或者换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候可以使用<code>&#123;&#123;-`语法去除模板内容左侧的所有空白符号， 使用`-&#125;&#125;</code>去除模板内容右侧的所有空白符号。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;- .Name -&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>-</code>要紧挨<code>&#123;&#123;`和`&#125;&#125;</code>，同时与模板值之间需要使用空格分隔。</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>Go模板语法中的条件判断有以下几种:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>Go的模板语法中使用<code>range</code>关键字进行遍历，有以下两种写法，其中<code>pipeline</code>的值必须是数组、切片、字典或者通道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，不会有任何输出</span><br><span class="line"></span><br><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，则会执行T0。</span><br></pre></td></tr></table></figure><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。</span><br><span class="line"></span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。</span><br></pre></td></tr></table></figure><h3 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h3><p>执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用Funcs方法添加函数到模板里。</p><p>预定义的全局函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">    函数返回它的第一个empty参数或者最后一个参数；</span><br><span class="line">    就是说&quot;and x y&quot;等价于&quot;if x then y else x&quot;；所有参数都会执行；</span><br><span class="line">or</span><br><span class="line">    返回第一个非empty参数或者最后一个参数；</span><br><span class="line">    亦即&quot;or x y&quot;等价于&quot;if x then x else y&quot;；所有参数都会执行；</span><br><span class="line">not</span><br><span class="line">    返回它的单个参数的布尔值的否定</span><br><span class="line">len</span><br><span class="line">    返回它的参数的整数类型长度</span><br><span class="line">index</span><br><span class="line">    执行结果为第一个参数以剩下的参数为索引/键指向的值；</span><br><span class="line">    如&quot;index x 1 2 3&quot;返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。</span><br><span class="line">print</span><br><span class="line">    即fmt.Sprint</span><br><span class="line">printf</span><br><span class="line">    即fmt.Sprintf</span><br><span class="line">println</span><br><span class="line">    即fmt.Sprintln</span><br><span class="line">html</span><br><span class="line">    返回与其参数的文本表示形式等效的转义HTML。</span><br><span class="line">    这个函数在html/template中不可用。</span><br><span class="line">urlquery</span><br><span class="line">    以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。</span><br><span class="line">    这个函数在html/template中不可用。</span><br><span class="line">js</span><br><span class="line">    返回与其参数的文本表示形式等效的转义JavaScript。</span><br><span class="line">call</span><br><span class="line">    执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；</span><br><span class="line">    如&quot;call .X.Y 1 2&quot;等价于go语言里的dot.X.Y(1, 2)；</span><br><span class="line">    其中Y是函数类型的字段或者字典的值，或者其他类似情况；</span><br><span class="line">    call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；</span><br><span class="line">    该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；</span><br><span class="line">    如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；</span><br></pre></td></tr></table></figure><h3 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h3><p>布尔函数会将任何类型的零值视为假，其余视为真。</p><p>下面是定义为函数的二元比较运算的集合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eq      如果arg1 == arg2则返回真</span><br><span class="line">ne      如果arg1 != arg2则返回真</span><br><span class="line">lt      如果arg1 &lt; arg2则返回真</span><br><span class="line">le      如果arg1 &lt;= arg2则返回真</span><br><span class="line">gt      如果arg1 &gt; arg2则返回真</span><br><span class="line">ge      如果arg1 &gt;= arg2则返回真</span><br></pre></td></tr></table></figure><p>为了简化多参数相等检测，eq（只有eq）可以接受2个或更多个参数，它会将第一个参数和其余参数依次比较，返回下式的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;eq arg1 arg2 arg3&#125;&#125;</span><br></pre></td></tr></table></figure><p>比较函数只适用于基本类型（或重定义的基本类型，如”type Celsius float32”）。但是，整数和浮点数不能互相比较。</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>Go的模板支持自定义函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">htmlByte, err := ioutil.ReadFile(<span class="string">&quot;./hello.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;read html failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义一个夸人的模板函数</span></span><br><span class="line">kua := <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> arg + <span class="string">&quot;真帅&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 采用链式操作在Parse之前调用Funcs添加自定义的kua函数</span></span><br><span class="line">tmpl, err := template.New(<span class="string">&quot;hello&quot;</span>).Funcs(template.FuncMap&#123;<span class="string">&quot;kua&quot;</span>: kua&#125;).Parse(<span class="type">string</span>(htmlByte))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user := UserInfo&#123;</span><br><span class="line">Name:   <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">Gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">Age:    <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用user渲染模板，并将结果写入w</span></span><br><span class="line">tmpl.Execute(w, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在模板文件<code>hello.tmpl</code>中按照如下方式使用我们自定义的<code>kua</code>函数了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;kua .Name&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套template"><a href="#嵌套template" class="headerlink" title="嵌套template"></a>嵌套template</h3><p>我们可以在template中嵌套其他的template。这个template可以是单独的文件，也可以是通过<code>define</code>定义的template。</p><p>举个例子： <code>t.tmpl</code>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;tmpl test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h1&gt;测试嵌套template语法&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;&#123;template &quot;ul.tmpl&quot;&#125;&#125;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;&#123;template &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123; define &quot;ol.tmpl&quot;&#125;&#125;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;吃饭&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;睡觉&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;打豆豆&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>ul.tmpl</code>文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;注释&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;日志&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;测试&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>我们注册一个<code>templDemo</code>路由处理函数.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/tmpl&quot;</span>, tmplDemo)</span><br></pre></td></tr></table></figure><p><code>tmplDemo</code>函数的具体内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tmplDemo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">tmpl, err := template.ParseFiles(<span class="string">&quot;./t.tmpl&quot;</span>, <span class="string">&quot;./ul.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">user := UserInfo&#123;</span><br><span class="line">Name:   <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">Gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">Age:    <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">tmpl.Execute(w, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在解析模板时，被嵌套的模板一定要在后面解析，例如上面的示例中<code>t.tmpl</code>模板中嵌套了<code>ul.tmpl</code>，所以<code>ul.tmpl</code>要在<code>t.tmpl</code>后进行解析。</p><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;block &quot;name&quot; pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>block</code>是定义模板<code>&#123;&#123;define "name"&#125;&#125; T1 &#123;&#123;end&#125;&#125;</code>和执行<code>&#123;&#123;template "name" pipeline&#125;&#125;</code>缩写，典型的用法是定义一组根模板，然后通过在其中重新定义块模板进行自定义。</p><p>定义一个根模板<code>templates/base.tmpl</code>，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Go Templates&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">    &#123;&#123;block &quot;content&quot; . &#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后定义一个<code>templates/index.tmpl</code>，”继承”<code>base.tmpl</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;template &quot;base.tmpl&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;define &quot;content&quot;&#125;&#125;</span><br><span class="line">    &lt;div&gt;Hello world!&lt;/div&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后使用<code>template.ParseGlob</code>按照正则匹配规则解析模板文件，然后通过<code>ExecuteTemplate</code>渲染指定的模板：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">tmpl, err := template.ParseGlob(<span class="string">&quot;templates/*.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = tmpl.ExecuteTemplate(w, <span class="string">&quot;index.tmpl&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;render template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们的模板名称冲突了，例如不同业务线下都定义了一个<code>index.tmpl</code>模板，我们可以通过下面两种方法来解决。</p><ol><li>在模板文件开头使用<code>&#123;&#123;define 模板名&#125;&#125;</code>语句显式的为模板命名。</li><li>可以把模板文件存放在<code>templates</code>文件夹下面的不同目录中，然后使用<code>template.ParseGlob(&quot;templates/**/*.tmpl&quot;)</code>解析模板。</li></ol><h3 id="修改默认的标识符"><a href="#修改默认的标识符" class="headerlink" title="修改默认的标识符"></a>修改默认的标识符</h3><p>Go标准库的模板引擎使用的花括号<code>&#123;&#123;`和`&#125;&#125;</code>作为标识，而许多前端框架（如<code>Vue</code>和 <code>AngularJS</code>）也使用<code>&#123;&#123;`和`&#125;&#125;</code>作为标识符，所以当我们同时使用Go语言模板引擎和以上前端框架时就会出现冲突，这个时候我们需要修改标识符，修改前端的或者修改Go语言的。这里演示如何修改Go语言模板引擎默认的标识符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.New(<span class="string">&quot;test&quot;</span>).Delims(<span class="string">&quot;&#123;[&quot;</span>, <span class="string">&quot;]&#125;&quot;</span>).ParseFiles(<span class="string">&quot;./t.tmpl&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="text-x2F-template与html-x2F-tempalte的区别"><a href="#text-x2F-template与html-x2F-tempalte的区别" class="headerlink" title="text&#x2F;template与html&#x2F;tempalte的区别"></a>text&#x2F;template与html&#x2F;tempalte的区别</h2><p><code>html/template</code>针对的是需要返回HTML内容的场景，在模板渲染过程中会对一些有风险的内容进行转义，以此来防范跨站脚本攻击。</p><p>例如，我定义下面的模板文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123;.&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这个时候传入一段JS代码并使用<code>html/template</code>去渲染该文件，会在页面上显示出转义后的JS内容。 <code>&lt;script&gt;alert(&#39;嘿嘿嘿&#39;)&lt;/script&gt;</code> 这就是<code>html/template</code>为我们做的事。</p><p>但是在某些场景下，我们如果相信用户输入的内容，不想转义的话，可以自行编写一个safe函数，手动返回一个<code>template.HTML</code>类型的内容。示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xss</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">tmpl,err := template.New(<span class="string">&quot;xss.tmpl&quot;</span>).Funcs(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>)</span></span>template.HTML &#123;</span><br><span class="line"><span class="keyword">return</span> template.HTML(s)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;).ParseFiles(<span class="string">&quot;./xss.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">jsStr := <span class="string">`&lt;script&gt;alert(&#x27;嘿嘿嘿&#x27;)&lt;/script&gt;`</span></span><br><span class="line">err = tmpl.Execute(w, jsStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们只需要在模板文件不需要转义的内容后面使用我们定义好的safe函数就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; . | safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>转自<a href="https://liwenzhou.com/posts/Go/go_template/">李文周的博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言标准库之http-x2F-template&quot;&gt;&lt;a href=&quot;#Go语言标准库之http-x2F-template&quot; class=&quot;headerlink&quot; title=&quot;Go语言标准库之http&amp;#x2F;template&quot;&gt;&lt;/a&gt;Go语言标准库之http&amp;#x2F;template&lt;/h1&gt;&lt;p&gt;&lt;code&gt;html/template&lt;/code&gt;包实现了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容。它提供了和&lt;code&gt;text/template&lt;/code&gt;包相同的接口，Go语言中输出HTML的场景都应使用&lt;code&gt;html/template&lt;/code&gt;这个包。&lt;/p&gt;
&lt;h1 id=&quot;模板与渲染&quot;&gt;&lt;a href=&quot;#模板与渲染&quot; class=&quot;headerlink&quot; title=&quot;模板与渲染&quot;&gt;&lt;/a&gt;模板与渲染&lt;/h1&gt;&lt;p&gt;在一些前后端不分离的Web架构中，我们通常需要在后端将一些数据渲染到HTML文档中，从而实现动态的网页（网页的布局和样式大致一样，但展示的内容并不一样）效果。&lt;/p&gt;
&lt;p&gt;我们这里说的模板可以理解为事先定义好的HTML文档文件，模板渲染的作用机制可以简单理解为文本替换操作–使用相应的数据去替换HTML文档中事先准备好的标记。&lt;/p&gt;
&lt;p&gt;很多编程语言的Web框架中都使用各种模板引擎，比如Python语言中Flask框架中使用的jinja2模板引擎。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="gin" scheme="https://lllllmaster-lulllll.github.io/tags/gin/"/>
    
    <category term="gorm" scheme="https://lllllmaster-lulllll.github.io/tags/gorm/"/>
    
    <category term="框架" scheme="https://lllllmaster-lulllll.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains 激活</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/JetBrains%20%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/JetBrains%20%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:12:19.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JetBrains-激活"><a href="#JetBrains-激活" class="headerlink" title="JetBrains 激活"></a>JetBrains 激活</h1><p>免责声明：所有教程均来源于网络，完全免费！不得将下述内容用于商业或者非法用途，否则，一切后果自负。版权争议与我无关，您必须在下载后的24个小时之内，从您的电脑中彻底删除下述内容。访问和下载下述内容，说明您已同意上述条款。</p><p>方案1、正版激活码</p><p>第一步，打开链接：<a href="http://idea.javatiku.cn/">http://idea.javatiku.cn</a><br>第二步，输入验证码：1567</p><p>说明：浏览器打开体验更好。</p><p>方案2、pojie补丁下载地址（推荐）</p><p>补丁使用教程见压缩包</p><p>链接: <a href="https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg">https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg</a> 提取码: s4q4 </p><p>如遇软件使用问题无法解决，请加微信：pydd156</p><p>本号启用取关验证功能，取关后再次关注将无法使用部分功能，请勿轻易取关</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JetBrains-激活&quot;&gt;&lt;a href=&quot;#JetBrains-激活&quot; class=&quot;headerlink&quot; title=&quot;JetBrains 激活&quot;&gt;&lt;/a&gt;JetBrains 激活&lt;/h1&gt;&lt;p&gt;免责声明：所有教程均来源于网络，完全免费！不得将下述内容用于商业或者非法用途，否则，一切后果自负。版权争议与我无关，您必须在下载后的24个小时之内，从您的电脑中彻底删除下述内容。访问和下载下述内容，说明您已同意上述条款。&lt;/p&gt;
&lt;p&gt;方案1、正版激活码&lt;/p&gt;
&lt;p&gt;第一步，打开链接：&lt;a href=&quot;http://idea.javatiku.cn/&quot;&gt;http://idea.javatiku.cn&lt;/a&gt;&lt;br&gt;第二步，输入验证码：1567&lt;/p&gt;
&lt;p&gt;说明：浏览器打开体验更好。&lt;/p&gt;
&lt;p&gt;方案2、pojie补丁下载地址（推荐）&lt;/p&gt;
&lt;p&gt;补丁使用教程见压缩包&lt;/p&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg&quot;&gt;https://pan.baidu.com/s/1yBU5YlWNqvjda7pwS_lvTg&lt;/a&gt; 提取码: s4q4 &lt;/p&gt;
&lt;p&gt;如遇软件使用问题无法解决，请加微信：pydd156&lt;/p&gt;
&lt;p&gt;本号启用取关验证功能，取关后再次关注将无法使用部分功能，请勿轻易取关&lt;/p&gt;</summary>
    
    
    
    
    <category term="JetBrains" scheme="https://lllllmaster-lulllll.github.io/tags/JetBrains/"/>
    
    <category term="激活教程" scheme="https://lllllmaster-lulllll.github.io/tags/%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
    
    <category term="链接" scheme="https://lllllmaster-lulllll.github.io/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Mac 卸载annconda</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Mac%20%E5%8D%B8%E8%BD%BDannconda/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Mac%20%E5%8D%B8%E8%BD%BDannconda/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:13:47.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-卸载annconda"><a href="#Mac-卸载annconda" class="headerlink" title="Mac 卸载annconda"></a>Mac 卸载annconda</h1><h2 id="第一步，删除Anaconda的配置，命令如下"><a href="#第一步，删除Anaconda的配置，命令如下" class="headerlink" title="第一步，删除Anaconda的配置，命令如下"></a>第一步，删除<a href="https://so.csdn.net/so/search?q=Anaconda&spm=1001.2101.3001.7020">Anaconda</a>的配置，命令如下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install anaconda-clean</span><br><span class="line">anaconda-clean</span><br></pre></td></tr></table></figure><h3 id="删除备份"><a href="#删除备份" class="headerlink" title="删除备份"></a>删除备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r /Users/aurora/.anaconda_backup/2022-02-08T193117</span><br></pre></td></tr></table></figure><p><strong>注：命令中黑色文字就是上图中的 Backup directory，直接复制替换即可</strong></p><span id="more"></span><h2 id="第二步，删除Anaconda的文件夹，命令如下"><a href="#第二步，删除Anaconda的文件夹，命令如下" class="headerlink" title="第二步，删除Anaconda的文件夹，命令如下"></a>第二步，删除Anaconda的文件夹，命令如下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/opt/anaconda3</span><br></pre></td></tr></table></figure><h2 id="第三步，删除-x2F-bash-profile-也可能是其他配置文件-中anaconda的环境变量，可以使用vim打开删除"><a href="#第三步，删除-x2F-bash-profile-也可能是其他配置文件-中anaconda的环境变量，可以使用vim打开删除" class="headerlink" title="第三步，删除 ~&#x2F;.bash_profile(也可能是其他配置文件)中anaconda的环境变量，可以使用vim打开删除"></a>第三步，删除 ~&#x2F;.bash_profile(也可能是其他配置文件)中anaconda的环境变量，可以使用vim打开删除</h2><p><strong>打开terminal，输入如下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><h2 id="第四步，删除Anaconda的可能存在隐藏的文件"><a href="#第四步，删除Anaconda的可能存在隐藏的文件" class="headerlink" title="第四步，删除Anaconda的可能存在隐藏的文件"></a>第四步，删除Anaconda的可能存在隐藏的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure><h3 id="第五步，验证"><a href="#第五步，验证" class="headerlink" title="第五步，验证"></a>第五步，验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anadonca -V</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202081949496.png" alt="image-20220208194952465"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mac-卸载annconda&quot;&gt;&lt;a href=&quot;#Mac-卸载annconda&quot; class=&quot;headerlink&quot; title=&quot;Mac 卸载annconda&quot;&gt;&lt;/a&gt;Mac 卸载annconda&lt;/h1&gt;&lt;h2 id=&quot;第一步，删除Anaconda的配置，命令如下&quot;&gt;&lt;a href=&quot;#第一步，删除Anaconda的配置，命令如下&quot; class=&quot;headerlink&quot; title=&quot;第一步，删除Anaconda的配置，命令如下&quot;&gt;&lt;/a&gt;第一步，删除&lt;a href=&quot;https://so.csdn.net/so/search?q=Anaconda&amp;spm=1001.2101.3001.7020&quot;&gt;Anaconda&lt;/a&gt;的配置，命令如下&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda install anaconda-clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anaconda-clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;删除备份&quot;&gt;&lt;a href=&quot;#删除备份&quot; class=&quot;headerlink&quot; title=&quot;删除备份&quot;&gt;&lt;/a&gt;删除备份&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm -r /Users/aurora/.anaconda_backup/2022-02-08T193117&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;注：命令中黑色文字就是上图中的 Backup directory，直接复制替换即可&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术杂记" scheme="https://lllllmaster-lulllll.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="mac" scheme="https://lllllmaster-lulllll.github.io/tags/mac/"/>
    
    <category term="redis 使用" scheme="https://lllllmaster-lulllll.github.io/tags/redis-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>conda 常用设置</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/conda%E8%AE%BE%E7%BD%AE/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/conda%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T15:45:07.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda-常用设置"><a href="#conda-常用设置" class="headerlink" title="conda 常用设置"></a>conda 常用设置</h1><h2 id="conda-关闭默认启动环境（base）"><a href="#conda-关闭默认启动环境（base）" class="headerlink" title="conda 关闭默认启动环境（base）"></a>conda 关闭默认启动环境（base）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set auto_activate_base false</span><br></pre></td></tr></table></figure><h2 id="conda切换国内源-中科大"><a href="#conda切换国内源-中科大" class="headerlink" title="conda切换国内源(中科大)"></a>conda切换国内源(中科大)</h2><h4 id="shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）"><a href="#shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）" class="headerlink" title="shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）"></a>shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="查看是否添加成功"><a href="#查看是否添加成功" class="headerlink" title="查看是否添加成功"></a>查看是否添加成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.condarc</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202082023813.png" alt="image-20220208202358789"></p><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><ul><li>查看conda版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda --version</span><br></pre></td></tr></table></figure><ul><li>更新conda版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update conda</span><br></pre></td></tr></table></figure><ul><li>查看都安装了那些依赖库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda list</span><br></pre></td></tr></table></figure><ul><li>创建新的python环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create --name myenv</span><br></pre></td></tr></table></figure><p>并且还可以指定python的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv python=3.7</span><br></pre></td></tr></table></figure><ul><li>创建新环境并指定包含的库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv scipy</span><br></pre></td></tr></table></figure><p>并且还可以指定库的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create -n myenv scipy=0.15.0</span><br></pre></td></tr></table></figure><ul><li>复制环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda create --name myclone --clone myenv</span><br></pre></td></tr></table></figure><p>查看是不是复制成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda info --envs</span><br></pre></td></tr></table></figure><ul><li>激活、进入某个环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source activate myenv</span><br></pre></td></tr></table></figure><ul><li>退出环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source deactivate</span><br></pre></td></tr></table></figure><ul><li>删除环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda remove --name myenv --all</span><br></pre></td></tr></table></figure><ul><li>查看当前的环境列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda info --envs or $ conda env list</span><br></pre></td></tr></table></figure><ul><li>查看某个环境下安装的库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda list -n myenv</span><br></pre></td></tr></table></figure><ul><li>查找包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda search XXX</span><br></pre></td></tr></table></figure><ul><li>安装包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install XXX</span><br></pre></td></tr></table></figure><ul><li>更新包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda update XXX</span><br></pre></td></tr></table></figure><ul><li>删除包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda remove XXX</span><br></pre></td></tr></table></figure><ul><li>安装到指定环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install -n myenv XXX</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;conda-常用设置&quot;&gt;&lt;a href=&quot;#conda-常用设置&quot; class=&quot;headerlink&quot; title=&quot;conda 常用设置&quot;&gt;&lt;/a&gt;conda 常用设置&lt;/h1&gt;&lt;h2 id=&quot;conda-关闭默认启动环境（base）&quot;&gt;&lt;a href=&quot;#conda-关闭默认启动环境（base）&quot; class=&quot;headerlink&quot; title=&quot;conda 关闭默认启动环境（base）&quot;&gt;&lt;/a&gt;conda 关闭默认启动环境（base）&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda config --set auto_activate_base false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conda切换国内源-中科大&quot;&gt;&lt;a href=&quot;#conda切换国内源-中科大&quot; class=&quot;headerlink&quot; title=&quot;conda切换国内源(中科大)&quot;&gt;&lt;/a&gt;conda切换国内源(中科大)&lt;/h2&gt;&lt;h4 id=&quot;shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）&quot;&gt;&lt;a href=&quot;#shell-环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）&quot; class=&quot;headerlink&quot; title=&quot;shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）&quot;&gt;&lt;/a&gt;shell 环境下执行以下命令（一次性粘贴如果不成功，可以一行一次）&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda config --set show_channel_urls yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go 语言环境安装（Mac）</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:17:42.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-语言环境安装"><a href="#go-语言环境安装" class="headerlink" title="go 语言环境安装"></a>go 语言环境安装</h1><h4 id="1-下载go安装包"><a href="#1-下载go安装包" class="headerlink" title="1. 下载go安装包"></a>1. 下载go安装包</h4><p>官网下载go安装包： <a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><p>下载go二进制包<code>go1.16.2.darwin-amd64.tar.gz</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://golang.google.cn/dl/go1.16.2.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-安装go"><a href="#2-安装go" class="headerlink" title="2. 安装go"></a>2. 安装go</h4><p>安装目录： <code>/usr/local/go</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xzvf go1.16.2.darwin-amd64.tar.gz -C /usr/local</span><br><span class="line">cd /usr/local/go</span><br></pre></td></tr></table></figure><span id="more"></span><p>查看go的安装目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><p>编辑<code>~/.bash_profile</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">export GOPATH=$HOME/iceCode/godev</span><br></pre></td></tr></table></figure><p>注意， <code>GOPATH</code>配置为你的工作区目录</p><p>编辑<code>~/.zshrc</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>使终端对以上配置的环境变量生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="4-检测go开发环境是否安装成功"><a href="#4-检测go开发环境是否安装成功" class="headerlink" title="4. 检测go开发环境是否安装成功"></a>4. 检测go开发环境是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line"></span><br><span class="line">省略...</span><br><span class="line"></span><br><span class="line">GOPATH=&quot;/Users/xx/go&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/go&quot;</span><br><span class="line"></span><br><span class="line">省略...</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>GOPATH： go工作区， 即编写代码存放的目录</li><li>GOROOT： go的安装目录</li></ul><p>查看版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.16.2 darwin/amd64</span><br></pre></td></tr></table></figure><p>在<code>GOPATH</code>工作区目录下， 一般有3个目录， 分别是</p><ul><li>bin: 存储可执行bin文件</li><li>pkg: 编译完成的文件</li><li>src: 源代码文件</li></ul><p><code>$GOPATH/pkg</code>目录在执行<code>go get -u 库名</code>会自动创建， <code>src</code>目录不存在则需要手动创建， 示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $GOPATH/src</span><br><span class="line">mkdir -p $GOPATH/bin</span><br></pre></td></tr></table></figure><p>在<code>$GOPATH/src</code>目录下， 创建新项目进行开发</p><h4 id="5-设置go国内模块代理"><a href="#5-设置go国内模块代理" class="headerlink" title="5. 设置go国内模块代理"></a>5. 设置go国内模块代理</h4><p>参考： <a href="https://goproxy.cn/">https://goproxy.cn/</a></p><p>编辑<code>~/.bash_profile</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>追加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure><p>使以上配置的环境变量生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>至此， go开发环境安装成功。</p><h4 id="6-创建go的hello项目"><a href="#6-创建go的hello项目" class="headerlink" title="6. 创建go的hello项目"></a>6. 创建go的hello项目</h4><p>创建go的hello项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd $GOPATH/src</span><br><span class="line">$ mkdir hello</span><br><span class="line">$ cd hello</span><br><span class="line">$ go mod init zhuxiongxian.com/hello</span><br><span class="line">go: creating new go.mod: module zhuxiongxian.com/hello</span><br><span class="line">go: to add module requirements and sums:</span><br><span class="line">go mod tidy</span><br><span class="line">$ go mod tidy</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>go mod tidy</code>: 增加缺少的module， 删除无用的module</li><li>go get&#x2F;go run&#x2F;go build会自动下载依赖</li></ul><p>创建hello.go文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.go</span><br></pre></td></tr></table></figure><p>hello.go文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(&quot;Hello, World!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行go的hello项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd cd $GOPATH/src/hello</span><br><span class="line">$ go run .</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h4 id="7-安装gin框架"><a href="#7-安装gin框架" class="headerlink" title="7. 安装gin框架"></a>7. 安装gin框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p>在代码中导包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br></pre></td></tr></table></figure><h4 id="8-创建gin的demo项目"><a href="#8-创建gin的demo项目" class="headerlink" title="8. 创建gin的demo项目"></a>8. 创建gin的demo项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src</span><br><span class="line">mkdir gin-demo</span><br><span class="line">cd gin-demo</span><br><span class="line">vim example.go</span><br></pre></td></tr></table></figure><p>example.go文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(&quot;/ping&quot;, func(c *gin.Context) &#123;</span><br><span class="line">        c.JSON(200, gin.H&#123;</span><br><span class="line">            &quot;message&quot;: &quot;pong&quot;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    // r.Run() // listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br><span class="line">    r.Run(&quot;:10240&quot;)</span><br><span class="line">&#125;</span><br><span class="line">go mod init zhuxiongxian.com/gin-demo</span><br><span class="line">go mod tidy</span><br><span class="line">go run example.go</span><br><span class="line">或</span><br><span class="line">go run .</span><br></pre></td></tr></table></figure><p>访问： <a href="http://0.0.0.0:10240/ping">http://0.0.0.0:10240/ping</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;go-语言环境安装&quot;&gt;&lt;a href=&quot;#go-语言环境安装&quot; class=&quot;headerlink&quot; title=&quot;go 语言环境安装&quot;&gt;&lt;/a&gt;go 语言环境安装&lt;/h1&gt;&lt;h4 id=&quot;1-下载go安装包&quot;&gt;&lt;a href=&quot;#1-下载go安装包&quot; class=&quot;headerlink&quot; title=&quot;1. 下载go安装包&quot;&gt;&lt;/a&gt;1. 下载go安装包&lt;/h4&gt;&lt;p&gt;官网下载go安装包： &lt;a href=&quot;https://golang.google.cn/dl/&quot;&gt;https://golang.google.cn/dl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载go二进制包&lt;code&gt;go1.16.2.darwin-amd64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -c https://golang.google.cn/dl/go1.16.2.darwin-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-安装go&quot;&gt;&lt;a href=&quot;#2-安装go&quot; class=&quot;headerlink&quot; title=&quot;2. 安装go&quot;&gt;&lt;/a&gt;2. 安装go&lt;/h4&gt;&lt;p&gt;安装目录： &lt;code&gt;/usr/local/go&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo tar -xzvf go1.16.2.darwin-amd64.tar.gz -C /usr/local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术杂记" scheme="https://lllllmaster-lulllll.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="环境配置" scheme="https://lllllmaster-lulllll.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>客户信息管理系统</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%2013%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%2013%E5%AE%A2%E6%88%B7%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:17:11.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户信息管理系统"><a href="#客户信息管理系统" class="headerlink" title="客户信息管理系统"></a>客户信息管理系统</h1><h2 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h2><ul><li>模拟实现基于文本界面的《客户信息管理软件》 </li><li>该软件能够实现对客户对象的插入、修改和删除 （用<font color="red"><strong>切片</strong></font>实现），并能够打印客户明细表。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>模拟实现一个基于文本界面的《客户信息管理软件》</li><li>进一步掌握<font color="ff0000"><strong>编程技巧</strong></font>和<font color="red"><strong>调试技巧</strong></font>，熟悉面向对象编程 </li><li>主要涉及以下知识点：<ul><li><strong><font color="ff0000">切片的插入、删除和替换</font></strong></li><li><strong><font color="ff0000">多对象协同工作</font></strong></li></ul></li></ul><span id="more"></span><h2 id="项目界面设计"><a href="#项目界面设计" class="headerlink" title="项目界面设计"></a>项目界面设计</h2><ul><li><strong>主菜单界面</strong></li></ul><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061305726.png" style="zoom:50%;" /><ul><li><p><strong>添加客户界面</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061310033.png" alt="image-20220206131034726"></p></li><li><p><strong>修改客户界面</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061313415.png" alt="image-20220206131318563"></p></li><li><p><strong>删除客户界面</strong></p></li></ul><p>​    <img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061314626.png" alt="image-20220206131437116"></p><hr><ul><li><strong>客户列表界面</strong></li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061331778.png" alt="image-20220206131849744"></p><h2 id="项目设计-程序框架图"><a href="#项目设计-程序框架图" class="headerlink" title="项目设计-程序框架图"></a>项目设计-程序框架图</h2><p>程序框图：分析该模块有多少个文件（类），和各个类之间的调用关系，程序员需要按照架构师要求，进行分层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[customerView.go界面 1. 可以显示界面 2. 可以接收用户的输入 3.根据用户的输入,调用 customerService 的方法完成客户的管理] --&gt; B(customerService处理业务逻辑 1.完成用户的各种操作 2. 对客户 curd)</span><br><span class="line">    B--&gt;A</span><br><span class="line">    B --&gt; C[customer表示数据 model 层 1.表示一个客户,客户各种字段]</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;客户信息管理系统&quot;&gt;&lt;a href=&quot;#客户信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;客户信息管理系统&quot;&gt;&lt;/a&gt;客户信息管理系统&lt;/h1&gt;&lt;h2 id=&quot;项目需求说明&quot;&gt;&lt;a href=&quot;#项目需求说明&quot; class=&quot;headerlink&quot; title=&quot;项目需求说明&quot;&gt;&lt;/a&gt;项目需求说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模拟实现基于文本界面的《客户信息管理软件》 &lt;/li&gt;
&lt;li&gt;该软件能够实现对客户对象的插入、修改和删除 （用&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;切片&lt;/strong&gt;&lt;/font&gt;实现），并能够打印客户明细表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模拟实现一个基于文本界面的《客户信息管理软件》&lt;/li&gt;
&lt;li&gt;进一步掌握&lt;font color=&quot;ff0000&quot;&gt;&lt;strong&gt;编程技巧&lt;/strong&gt;&lt;/font&gt;和&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;调试技巧&lt;/strong&gt;&lt;/font&gt;，熟悉面向对象编程 &lt;/li&gt;
&lt;li&gt;主要涉及以下知识点：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&quot;ff0000&quot;&gt;切片的插入、删除和替换&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&quot;ff0000&quot;&gt;多对象协同工作&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="项目实战" scheme="https://lllllmaster-lulllll.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>go 语言_命令行参数</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T15:45:58.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-语言-命令行参数"><a href="#go-语言-命令行参数" class="headerlink" title="go 语言_命令行参数"></a>go 语言_命令行参数</h1><h2 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>os.Args是一个 string 的切片，用来存储所有的命令行参数</p><h3 id="应用案例："><a href="#应用案例：" class="headerlink" title="应用案例："></a>应用案例：</h3><h5 id="获取命令行各个参数"><a href="#获取命令行各个参数" class="headerlink" title="获取命令行各个参数"></a>获取命令行各个参数</h5><p><strong>代码实现</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;命令行的参数有 &quot;</span>, <span class="built_in">len</span>(os.Args), <span class="string">&quot; 个&quot;</span>)</span><br><span class="line"><span class="comment">//遍历 os.Args 切片,就可以得到所有的命令行输入参数值</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;args[%v]=%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>实现效果：</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101712259.png" alt="image-20220210163731339"></p><h2 id="flag包用来解析命令行参数"><a href="#flag包用来解析命令行参数" class="headerlink" title="flag包用来解析命令行参数"></a><font color="00ffff"><strong>flag包用来解析命令行参数</strong></font></h2><p><strong>说明</strong>:前面的方式是比较原生的方式，对解析参数不是特别的方便，特别是带有指定 参数形式的命令行。 </p><p>比如：cmd&gt;main.exe -f c:&#x2F;aaa.txt -p 200 -u root 这样的形式命令行，go设计者给我们 提供了 flag包，可以方便的解析命令行参数，<font color="ff0000">**而且参数顺序可以随意 **</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义变量,用于接收命令行的参数值</span></span><br><span class="line"><span class="keyword">var</span> user <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> pwd <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> host <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> port <span class="type">int</span></span><br><span class="line"><span class="comment">//&amp;user 就是接收用户命令行中输入的 -u 后面的参数值</span></span><br><span class="line"><span class="comment">//&quot;u&quot; -u 指定的参数</span></span><br><span class="line"><span class="comment">//&quot;&quot;,默认值</span></span><br><span class="line"><span class="comment">//&quot;用户名,默认为空&quot;</span></span><br><span class="line">flag.StringVar(&amp;user, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;用户名,默认为空&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;pwd, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot; 密码,默认为空&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;host, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;主机名,默认为localhost&quot;</span>)</span><br><span class="line">flag.IntVar(&amp;port, <span class="string">&quot;p&quot;</span>, <span class="number">3306</span>, <span class="string">&quot; 端口号,默认为3306&quot;</span>)</span><br><span class="line"><span class="comment">//重要的操作,转换</span></span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;user:%v pwd:%v host:%v port:%v\n&quot;</span>, user, pwd, host, port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实现效果</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101713619.png" alt="image-20220210171339559"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;go-语言-命令行参数&quot;&gt;&lt;a href=&quot;#go-语言-命令行参数&quot; class=&quot;headerlink&quot; title=&quot;go 语言_命令行参数&quot;&gt;&lt;/a&gt;go 语言_命令行参数&lt;/h1&gt;&lt;h2 id=&quot;os-Args&quot;&gt;&lt;a href=&quot;#os-Args&quot; class=&quot;headerlink&quot; title=&quot;os.Args&quot;&gt;&lt;/a&gt;os.Args&lt;/h2&gt;&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;p&gt;os.Args是一个 string 的切片，用来存储所有的命令行参数&lt;/p&gt;
&lt;h3 id=&quot;应用案例：&quot;&gt;&lt;a href=&quot;#应用案例：&quot; class=&quot;headerlink&quot; title=&quot;应用案例：&quot;&gt;&lt;/a&gt;应用案例：&lt;/h3&gt;&lt;h5 id=&quot;获取命令行各个参数&quot;&gt;&lt;a href=&quot;#获取命令行各个参数&quot; class=&quot;headerlink&quot; title=&quot;获取命令行各个参数&quot;&gt;&lt;/a&gt;获取命令行各个参数&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&amp;quot;命令行的参数有 &amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(os.Args), &lt;span class=&quot;string&quot;&gt;&amp;quot; 个&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//遍历 os.Args 切片,就可以得到所有的命令行输入参数值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; os.Args &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;args[%v]=%v\n&amp;quot;&lt;/span&gt;, i, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>goroutine 和 channel</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2016%20%E7%AB%A0%20goroutine%E5%92%8Cchannel/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2016%20%E7%AB%A0%20goroutine%E5%92%8Cchannel/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:18:07.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="goroutine-和-channel"><a href="#goroutine-和-channel" class="headerlink" title="goroutine 和 channel"></a>goroutine 和 channel</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要求统计1-90000000000的数字中，哪些是素数？ </p><p><strong>分析思路：</strong></p><ol><li>传统的方法，就是使用一个循环，循环的判断各个数是不是素数。 【很慢】</li><li>使用并发或者并行的方式，将统计素数的任务分配给多个goroutine去完成，这 时就会使用到goroutine.</li></ol><hr><h2 id="goroutine基本介绍"><a href="#goroutine基本介绍" class="headerlink" title="goroutine基本介绍"></a>goroutine基本介绍</h2><h3 id="进程和线程说明"><a href="#进程和线程说明" class="headerlink" title="进程和线程说明"></a><strong>进程和线程说明</strong></h3><ol><li>进程就是程序在操作系统中的一次执行过程， 是系统进行资源分配和调度的基本单位</li><li>线程是进程的一个执行实例，是程序执行的最小单元， 它是比进程更小的能独立运行的基本单位。</li><li>一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行 </li><li>一个程序至少有一个进程， 个进程 至少有一个线程</li></ol><span id="more"></span><h3 id="程序、进程和线程的关系"><a href="#程序、进程和线程的关系" class="headerlink" title="程序、进程和线程的关系"></a>程序、进程和线程的关系</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111931147.png" alt="image-20220211193115026"></p><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ol><li>多线程程序在单核上运行，就是并发 </li><li>多线程程序在多核上运行，就是并行</li></ol><p><strong>示意图：</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111938922.png" alt="image-20220211193811825"></p><p><strong>并发：</strong>因为是在一个cpu上，比如有10个线程，每个线程执行10毫秒(进行轮询操 作)，从人的角度看，好像这10个线程都在运行，但是从微观上看，在某一个时间 点看，其实只有一个线程在执行，这就是并发。 </p><p><strong>并行：</strong>因为是在多个cpu上(比如有10个cpu)，比如有10个线程，每个线程执行10毫 秒(各自在不同cpu上执行)，从人的角度看，这10个线程都在运行，但是从微观上 看，在某一个时间点看，也同时有10个线程在执行，这就是并行</p><h3 id="Go-协程和-Go主线程"><a href="#Go-协程和-Go主线程" class="headerlink" title="Go 协程和 Go主线程"></a>Go 协程和 Go主线程</h3><ol><li>Go主线程(有程序员直接称为线程&#x2F;也可以理解成进程):一个Go线程上，可以起 多个协程，你可以这样理解，协程是轻量级的线程。 </li><li><strong>Go协程的特点</strong> <ol><li>有独立的栈空间 </li><li>共享程序堆空间 </li><li>调度由用户控制 </li><li>协程是轻量级的线程</li></ol></li></ol><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111954780.png" alt="image-20220211195412658"></p><hr><h2 id="Goroutine-快速入门"><a href="#Goroutine-快速入门" class="headerlink" title="Goroutine-快速入门"></a>Goroutine-快速入门</h2><h3 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a><strong>案例说明：</strong></h3><ol><li>在主线程(可以理解成进程)中，开启一 一个goroutine，i 程每隔1秒输出 财 开 “hello,world” </li><li>在主线程中也每隔一秒输出”hello,gotang”，输出10次后，退出程序 </li><li>要求主线程和goroutine同时执行. </li><li>画出&#x3D;&#x3D;主线程和协程执行流程图&#x3D;&#x3D;</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 在主线程(可以理解成进程)中，开启一 一个goroutine，i 程每隔1秒输出 财 开 &quot;hello,world&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test()   hello,world&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.  在主线程中也每隔一秒输出&quot;hello,gotang&quot;，输出10次后，退出程序</span></span><br><span class="line"><span class="comment">//3. 要求主线程和goroutine同时执行.</span></span><br><span class="line"><span class="comment">//4. 画出主线程和协程执行流程图</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> test() <span class="comment">//开启一个协程</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;main()   hello,world&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出效果"><a href="#输出效果" class="headerlink" title="输出效果"></a>输出效果</h3><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112008773.png" alt="image-20220211200853640" style="zoom:50%;" /><h3 id="主线程和协程工作示意图"><a href="#主线程和协程工作示意图" class="headerlink" title="主线程和协程工作示意图"></a>主线程和协程工作示意图</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112010737.png" alt="image-20220211201018661"></p><h3 id="快速入门小结"><a href="#快速入门小结" class="headerlink" title="快速入门小结"></a>快速入门小结</h3><ol><li>主线程是一个物理线程，直接作用在cpu上的。是重量级的，非常耗费cpu资源。 </li><li>协程从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗相对小。 </li><li>Golang的协程机制是重要的特点，可以轻松的开启上万个协程。其它编程语言的开发机制是一般基于线程的，开启过多的线程，资源耗费大，这里就突显 Golang在并发上的优势了</li></ol><hr><h2 id="goroutine-的调度模型"><a href="#goroutine-的调度模型" class="headerlink" title="goroutine 的调度模型"></a>goroutine 的调度模型</h2><h3 id="MPG-模式基本介绍"><a href="#MPG-模式基本介绍" class="headerlink" title="MPG 模式基本介绍"></a>MPG 模式基本介绍</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112015415.png" alt="image-20220211201547343"></p><ol><li><strong>M：操作系统的主线程（是物理线程）</strong></li><li><strong>P：协程执行需要的上下文</strong></li><li><strong>G：协程</strong></li></ol><h3 id="MPG-模式运行的状态1"><a href="#MPG-模式运行的状态1" class="headerlink" title="MPG 模式运行的状态1"></a>MPG 模式运行的状态1</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112019126.png" alt="image-20220211201946063"></p><ol><li>当前程序有三个M,如果三个M都在一个cpu运行，就是并发，如果在不同的cpu运行，就是并行 </li><li>M1,M2,M3正在执行一个G，M1的协程队列有三个，M2的协程队列有3个， M3协程队列有2个 </li><li>从上图可以看到: Go的协程是轻量级的线程，是逻辑态的，Go可以容易的起上万个协程。 </li><li>其它程序c&#x2F;java的多线程，往往是内核态的，比较重量级，几千个线程可能耗光cpu</li></ol><hr><p>MPG 模式运行的状态 2</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112025676.png" alt="image-20220211202547579"></p><ol><li>分成两个部分来看 </li><li>原来的情况是M<del>0</del>主线程正在执行G<del>0</del>协程， 另外有三个协程在队列等待 </li><li>如果G<del>0</del>协程阻塞， 比如读取文件或者数据库等 </li><li>这时就会<font color="red"><strong>创建</strong></font>M<del>1</del>主线程(<font color="red"><strong>也可能</strong></font>是从已有的线程池中<font color="red"><strong>取出M<del>1</del></strong></font>)， 并且将等待的3个协程挂到 M1下开始执行， M<del>0</del>的主线程下的G<del>0</del>仍然执行文件io的读写。 </li><li>这样的MPG调度模式， 可以既让G<del>0</del>执行，同 时也不会让队列的其它协程 一直阻塞,仍然 可以并发&#x2F;并行执行。</li><li>等到G<del>0</del>不阻塞了， M<del>0</del>会被放到空闲的主线程 继续执行(从已有的线程池中取), 同时GO又会 被唤醒。</li></ol><h2 id="设置-Golang-运行时的-CPU-数量"><a href="#设置-Golang-运行时的-CPU-数量" class="headerlink" title="设置 Golang 运行时的 CPU 数量"></a>设置 Golang 运行时的 CPU 数量</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>为了充分利用多 cpu 的优势，在 Golang 程序中，设置运行的 cpu 数目</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cpuNum := runtime.NumCPU()</span><br><span class="line">runtime.GOMAXPROCS(<span class="number">8</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;CPU 个数为 &quot;</span>, cpuNum, <span class="string">&quot; 个&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112101274.png" alt="image-20220211210149142"></p><ol><li>go 1.8 后，默认让程序运行在多个核上，可以不用设置</li><li>go 1.8 前，需要设置一下，可以更高效的利用 CPU</li></ol><h2 id="channel（管道）"><a href="#channel（管道）" class="headerlink" title="channel（管道）"></a>channel（管道）</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a><strong>需求：</strong></h3><p>现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。最后显示出来。要求使用goroutine完成 </p><p>分析思路： </p><ol><li>使用goroutine 来完成，效率高，但是会出现<font color="red">并发&#x2F;并行安全问题</font>. </li><li>这里就提出了不同goroutine如何通信的问题</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><ol><li>使用goroutine来完成(看看使用gorotine并发完成会出现什么问题？然后我们会去解决) </li><li>在运行某个程序时，如何知道是否存在资源竞争问题。 方法很简单，在编译该程序时，增加一个参数<font color="red">-race</font>即可</li><li>&#x3D;&#x3D;以下程序存在资源竞争问题&#x3D;&#x3D;</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。</span></span><br><span class="line"><span class="comment">//最后显示出来。要求使用goroutine完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 编写一个函数,来计算各个数的阶乘,并放入到 map 中</span></span><br><span class="line"><span class="comment">//2. 我们启动多个协程,统计的结果放入到 map 中</span></span><br><span class="line"><span class="comment">//3. map 应该做成全局的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">knMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line">knMap[n] = res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">200</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//休眠 10 秒</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line"><span class="comment">//这里我们输出结果,遍历这个 map</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> knMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;knMap[%d] = %d\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示意图</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112212231.png" alt="image-20220211221246024"></p><hr><h2 id="channel（管道）-基本介绍"><a href="#channel（管道）-基本介绍" class="headerlink" title="channel（管道）-基本介绍"></a>channel（管道）-基本介绍</h2><h3 id="不同goroutine之间如何通讯"><a href="#不同goroutine之间如何通讯" class="headerlink" title="不同goroutine之间如何通讯"></a>不同goroutine之间如何通讯</h3><ol><li>全局变量加锁同步 </li><li>channel</li></ol><h3 id="使用全局变量加锁同步改进程序"><a href="#使用全局变量加锁同步改进程序" class="headerlink" title="使用全局变量加锁同步改进程序"></a>使用全局变量加锁同步改进程序</h3><ul><li><p>因为没有对全局变量 m 加锁，因此会出现资源争夺问题，代码会出现错误，提示 concurrent map writes </p></li><li><p>解决方案：加入互斥锁 </p></li><li><p>数的阶乘很大，结果会越界,可以将求阶乘改成 sum +&#x3D; uint64(i) </p></li><li><p>情况说明：</p><ul><li>红框的部分为什么需要加互斥锁，按理说10秒数上面的协程都应该执行完，后面就不应该出 现资源竞争的问题了，但是在实际运行中，还是可能在红框部分出现（运行时增加 -race参数， 确实会发现有资源竞争问题），因为我们程序从设计上可以知道10秒就执行完所有协程，但 是主线程并不知道，因此底层可能仍然出现资源争夺，因此加入互斥锁即可解决问题</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202112323769.png" alt="image-20220211232343643"></p></li></ul><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在要计算 1-200 的各个数的阶乘，并且把各个数的阶乘放入到map中。</span></span><br><span class="line"><span class="comment">//最后显示出来。要求使用goroutine完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 编写一个函数,来计算各个数的阶乘,并放入到 map 中</span></span><br><span class="line"><span class="comment">//2. 我们启动多个协程,统计的结果放入到 map 中</span></span><br><span class="line"><span class="comment">//3. map 应该做成全局的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">knMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//声明一个全局互斥锁</span></span><br><span class="line"><span class="comment">// lock是一个全局的互斥锁</span></span><br><span class="line">lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line">knMap[n] = res</span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//休眠 10 秒</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="comment">//这里我们输出结果,遍历这个 map</span></span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> knMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;knMap[%d] = %d\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么需要-channel"><a href="#为什么需要-channel" class="headerlink" title="为什么需要 channel"></a>为什么需要 channel</h3><p>前面使用全局变量加锁同步来解决goroutine的通讯，但不完美</p><ol><li>主线程在等待所有goroutine全部完成的时间很难确定，我们这里设置10秒，仅仅是估算。</li><li>如果主线程休眠时间长了，会加长等待时间，如果等待时间短了，可能还有 goroutine处于工作状态，这时也会随主线程的退出而销毁</li><li>通过全局变量加锁同步来实现通讯，也并不利用多个协程对全局变量的读写操 作。</li><li>上面种种分析都在呼唤一个新的通讯机制-channel</li></ol><h3 id="channel-的介绍"><a href="#channel-的介绍" class="headerlink" title="channel 的介绍"></a><font color="00ffff">channel 的介绍</font></h3><ol><li><p>channle本质就是 数据结构-队列【示意图】</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121400502.png" alt="image-20220212140021438"></p></li><li><p>数据是先进先出 </p></li><li><p>线程安全，多goroutine访问时， 不需要加锁，就是说channel本身就是线程安全的 </p></li><li><p>channel是有类型的，一个string的channel只能存放string 拷贝截图到剪切板</p></li></ol><h3 id="定义-x2F-声明-channel"><a href="#定义-x2F-声明-channel" class="headerlink" title=" 定义&#x2F;声明 channel"></a><font color="00ffff"> 定义&#x2F;声明 channel</font></h3><p>var 变量名 chan 数据类型 </p><p><strong>举例：</strong></p><p> var intChan chan int(intChan用于存放int数据) </p><p>var mapChan chan map[int]string (mapChan用于存放map[int]string类型)</p><p>var perChan chan Person </p><p>var perChan2 chan *Person </p><p><strong>说明:</strong> </p><ol><li>channel是引用类型 </li><li>channel必须初始化才能写入数据,即make后才能使用</li><li>管道是有类型的，intChan 只能写入整数 int</li></ol><h3 id="channel初始化"><a href="#channel初始化" class="headerlink" title="channel初始化"></a><font color="00ffff">channel初始化</font></h3><p><strong>说明：</strong>使用 make 进行初始化</p><p>var intChan chan int</p><p>intChan&#x3D;make(chan int,10)</p><p>说明+示意图</p><h3 id="向-channel-中写入（存放）数据"><a href="#向-channel-中写入（存放）数据" class="headerlink" title="向 channel 中写入（存放）数据"></a><font color="00ffff">向 channel 中写入（存放）数据</font></h3><p>var intChan chan int</p><p>intChan&#x3D;make(chan int,10)</p><p>num:&#x3D;999</p><p>IntChan&lt;- 10</p><p>IntChan&lt;- num</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//看看管道里面有什么东西</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;intchan 的值=%p intchan 本身的地址=%p\n&quot;</span>, intChan, &amp;intChan)</span><br><span class="line"><span class="comment">//向管道写入数据</span></span><br><span class="line">num := <span class="number">999</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">intChan &lt;- num</span><br><span class="line"><span class="comment">//注意点,当我们向管道写入数据时,不能超过其容量</span></span><br><span class="line">intChan &lt;- <span class="number">50</span></span><br><span class="line"><span class="comment">// intChan &lt;- 100</span></span><br><span class="line"><span class="comment">//看看管道的长度和 cap (容量)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;channel len=%v cap=%v \n&quot;</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line"><span class="comment">//从管道中读出数据</span></span><br><span class="line">num2 := &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"><span class="comment">//看看管道的长度和 cap (容量)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;channel len=%v cap=%v \n&quot;</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line"><span class="comment">//再没有使用协程的情况下,如果我们的管道数据已经全部取出,再取就会报告 deadlock</span></span><br><span class="line">num3 := &lt;-intChan</span><br><span class="line">num4 := &lt;-intChan</span><br><span class="line">num5 := &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">&quot;num3=&quot;</span>, num3, <span class="string">&quot;num4=&quot;</span>, num4, <span class="string">&quot;num5=&quot;</span>, num5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121438441.png" alt="image-20220212143837334"></p><h4 id="channel-注意事项"><a href="#channel-注意事项" class="headerlink" title="channel 注意事项"></a>channel 注意事项</h4><ol><li>channel中只能存放指定的数据类型 </li><li>channle的数据放满后，就不能再放入了 </li><li>如果从channel取出数据后，可以继续放入 </li><li>在没有使用协程的情况下，如果channel数据取完了，再取，就会报dead lock</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">allChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">allChan &lt;- <span class="number">10</span></span><br><span class="line">allChan &lt;- <span class="string">&quot;tom jack&quot;</span></span><br><span class="line">cat := Cat&#123;Name: <span class="string">&quot;小花猫&quot;</span>, Age: <span class="number">3</span>&#125;</span><br><span class="line">allChan &lt;- cat</span><br><span class="line"><span class="comment">//我们希望获取到第三个元素,则先将前两个推出</span></span><br><span class="line">&lt;-allChan</span><br><span class="line">&lt;-allChan</span><br><span class="line">newCat := &lt;-allChan</span><br><span class="line">fmt.Printf(<span class="string">&quot;newCat=%T,newCat=%v\n&quot;</span>, newCat, newCat)</span><br><span class="line"><span class="comment">//注意使用类型断言</span></span><br><span class="line">a := newCat.(Cat)</span><br><span class="line">fmt.Printf(<span class="string">&quot;newCat.Name=%v\n&quot;</span>, a.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="channel的遍历和关闭"><a href="#channel的遍历和关闭" class="headerlink" title="channel的遍历和关闭"></a><font color="00ffff">channel的遍历和关闭</font></h3><h4 id="channel-的关闭"><a href="#channel-的关闭" class="headerlink" title="channel 的关闭"></a>channel 的关闭</h4><p>使用内置函数 close 可以关闭 channel，当 channel 关闭后，就不能再向 channel 写数据了，但是仍然可以从该 channel 读取数据</p><h4 id="channel-的遍历"><a href="#channel-的遍历" class="headerlink" title="channel 的遍历"></a>channel 的遍历</h4><p>channel 支持 for-range 的方式进行遍历，请注意两个细节</p><ol><li>在便利时，如果 channel 没有关闭，则会出现 deadlock 的错误</li><li>在便利时，如果 channel 已经关闭，则会正常遍历数据，遍历完后，就会退出遍历</li></ol><h4 id="代码演示-未关闭管道"><a href="#代码演示-未关闭管道" class="headerlink" title="代码演示-未关闭管道"></a>代码演示-未关闭管道</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">100</span></span><br><span class="line">intChan &lt;- <span class="number">200</span></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//这时不能够在写入数据到 channel</span></span><br><span class="line"><span class="comment">// intChan &lt;- 300</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">n1 := &lt;-intChan</span><br><span class="line">fmt.Println(n1)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">intChan2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">intChan2 &lt;- i <span class="comment">//放入一百个数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for i := 0; i &lt; len(intChan2); i++ &#123;</span></span><br><span class="line"><span class="comment">// n := &lt;-intChan2</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//遍历时如果管道没有关闭,会出现 deadlock 错误</span></span><br><span class="line"><span class="comment">// close(intChan2)</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan2 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121553787.png" alt="image-20220212155318622"></p><h4 id="代码演示-关闭管道"><a href="#代码演示-关闭管道" class="headerlink" title="代码演示-关闭管道"></a>代码演示-关闭管道</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">100</span></span><br><span class="line">intChan &lt;- <span class="number">200</span></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//这时不能够在写入数据到 channel</span></span><br><span class="line"><span class="comment">// intChan &lt;- 300</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">n1 := &lt;-intChan</span><br><span class="line">fmt.Println(n1)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">intChan2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">intChan2 &lt;- i <span class="comment">//放入一百个数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for i := 0; i &lt; len(intChan2); i++ &#123;</span></span><br><span class="line"><span class="comment">// n := &lt;-intChan2</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//遍历时如果管道没有关闭,会出现 deadlock 错误</span></span><br><span class="line"><span class="built_in">close</span>(intChan2)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan2 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121554859.png" alt="image-20220212155432780"></p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例 1"></a>应用实例 1</h3><p>请完成goroutine和channel协同工作的案例，具体要求：</p><ol><li>开启一个writeData协程，向管道intChan中写入50个整数.</li><li>开启一个readData协程，从管道intChan中读取writeData写入的数据。</li><li>注意: writeData和readDate操作的是同一个管道</li><li>主线程需要等待writeData和readDate协程都完成工作才能退出</li></ol><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121642913.png" alt="image-20220212164225751"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line"><span class="comment">//放入数据</span></span><br><span class="line">intChan &lt;- i</span><br><span class="line">fmt.Printf(<span class="string">&quot;writeData 写入数据=%v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-intChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;readData 读到数据=%v\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//readData 读取完数据后,即完成任务</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line"><span class="built_in">close</span>(exitChan)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建两个管道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">50</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> writeData(intChan)</span><br><span class="line"><span class="keyword">go</span> readData(intChan, exitChan)</span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 10)</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-exitChan</span><br><span class="line">fmt.Printf(<span class="string">&quot;======v:%v    ok:%v\n&quot;</span>, v, ok)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例 2"></a>应用实例 2</h3><p>将上面代码 go readData（intChan，exitChan）注销掉，程序会增氧</p><p>答：如果只是向管道写入数据，<font color="red"><strong>而没有读取</strong></font>，就会出现阻塞而dead lock，原因是intChan容量 是10,而代码writeData会写入 50个数据,因此会阻塞在writeData的ch &lt;-i</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121652059.png" alt="image-20220212165217946"></p><hr><h3 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例 3"></a>应用实例 3</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><p>要求统计1-200000 的数字中，哪些是素数？这个问题在本章开篇就提出了， 现在我们有goroutine和channel的知识后，就可以完成了 [测试数据:80000] </p><h4 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h4><ol><li><p>传统的方法，就是使用一个循环，循环的判断各个数是不是素数【ok】。 </p></li><li><p>使用并发&#x2F;并行的方式，将统计素数的任务分配给多个(4个)goroutine去完成， 完成任务时间短。</p><ol><li><p>画出分析思路</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121703848.png" alt="image-20220212170343720"></p></li><li><p>代码实现</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= <span class="number">80000</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭intChan</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启 4 个协程,从 intChan取出数据,并判断是否为素数,</span></span><br><span class="line"><span class="comment">//如果是,就放入到 primechan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, primeChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//使用 for 循环</span></span><br><span class="line"><span class="comment">// var num int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">num, ok := &lt;-intChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断 num 是不是素数</span></span><br><span class="line"><span class="keyword">if</span> isPrime(num) &#123;</span><br><span class="line">primeChan &lt;- num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;有一个 primeNum 因为取不到数据退出&quot;</span>)</span><br><span class="line"><span class="comment">//这里不能关闭 primeChan</span></span><br><span class="line"><span class="comment">//向exitChan 写入 true</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> n%i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1000</span>)</span><br><span class="line">primeChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">8000</span>)</span><br><span class="line"><span class="comment">//标识推出的管道</span></span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">4</span>)</span><br><span class="line">start := time.Now().UnixMilli()</span><br><span class="line"><span class="comment">//开启一个协程,向 intChan 放入 1-8000</span></span><br><span class="line"><span class="keyword">go</span> putNum(intChan)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> primeNum(intChan, primeChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//主线程进行处理</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">&lt;-exitChan</span><br><span class="line">&#125;</span><br><span class="line">end := time.Now().UnixMilli()</span><br><span class="line">fmt.Println(<span class="string">&quot;使用协程耗时&quot;</span>, end-start)</span><br><span class="line"><span class="comment">//当exitChan取出四个结果,就可以关闭 primeNum</span></span><br><span class="line"><span class="built_in">close</span>(primeChan)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//遍历 primeChan 把结果拿出来</span></span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, ok := &lt;-primeChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;素数=%d\n&quot;, res)</span></span><br><span class="line"><span class="comment">// count++</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;count=%d\n&quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a><strong>实验结果</strong></h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121932974.png" alt="image-20220212193240809"></p></li></ol><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>使用goroutine完成后，可以在使用传统的方法来统计一下，看看完成这个任务，各自耗费的时间是多少？[用map保存primeNum]</p><hr><h2 id="channel-使用细节和注意事项"><a href="#channel-使用细节和注意事项" class="headerlink" title="channel 使用细节和注意事项"></a>channel 使用细节和注意事项</h2><ol><li><p>channel可以声明为只读，或者只写性质 </p></li><li><p>channel只读和只写的最佳实践案例</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202121958098.png" alt="image-20220212195808941"></p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//管道可以声明为只读或者只写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下管道是双向</span></span><br><span class="line"><span class="comment">//var chan1 chan int //可读可写</span></span><br><span class="line"><span class="comment">//声明为只写</span></span><br><span class="line"><span class="keyword">var</span> chan2 <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">chan2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">chan2 &lt;- <span class="number">20</span></span><br><span class="line"><span class="comment">// num:=&lt;-chan2 //出错</span></span><br><span class="line">fmt.Println(<span class="string">&quot;chan2=&quot;</span>, chan2)</span><br><span class="line"><span class="comment">//声明为只读</span></span><br><span class="line"><span class="keyword">var</span> chan3 &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">num2 := &lt;-chan3</span><br><span class="line"><span class="comment">// chan3 &lt;- 89 //出错</span></span><br><span class="line">fmt.Println(<span class="string">&quot;num2&quot;</span>, num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用select可以解决从管道取数据的阻塞问题【案例演示】</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用select可以解决从管道取数据的阻塞问题【案例演示】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个管道 10 个数据 int</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个管道 5 个数据 string</span></span><br><span class="line">stringChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">stringChan &lt;- <span class="string">&quot;hello&quot;</span> + fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传统的方法在遍历管道时,如果不关闭会阻塞而导致 deadlock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//问题,在实际开发中,可能我们不好确定什么时候关闭该管道</span></span><br><span class="line"><span class="comment">//可以使用 select 方式解决</span></span><br><span class="line"><span class="comment">// label:</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">//注意:这里,如果 intChan一直没有关闭,不会一直阻塞而 deadlock</span></span><br><span class="line"><span class="comment">//会自动到下一个 case 匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> v := &lt;-intChan:</span><br><span class="line">fmt.Printf(<span class="string">&quot;从 intChan 读取的数据%d\n&quot;</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">case</span> v := &lt;-stringChan:</span><br><span class="line">fmt.Printf(<span class="string">&quot;从 stringChan 读取的数据%s\n&quot;</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;都取不到,不玩儿了\n&quot;</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="comment">// break label</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>goroutine中使用recover，解决协程中出现panic，导致程序崩溃问题.</p><p>**说明:**如果我们起了一个协程，但是这个协程出现了panic,如果我们没有 捕获这个panic,就会造成整个程序崩溃，这时我们可以在goroutine中使用 recover来捕获panic, 进行处理，这样即使这个协程发生的问题，但是主线程仍然不受影响，可以继续执行。</p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;hello, world&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里可以使用 defer+recover</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//捕获 test 抛出的 panic</span></span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;test() 发生错误&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">myMap[<span class="number">0</span>] = <span class="string">&quot;golang&quot;</span> <span class="comment">//err</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> sayHello()</span><br><span class="line"><span class="keyword">go</span> test()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;main()  ok=&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;goroutine-和-channel&quot;&gt;&lt;a href=&quot;#goroutine-和-channel&quot; class=&quot;headerlink&quot; title=&quot;goroutine 和 channel&quot;&gt;&lt;/a&gt;goroutine 和 channel&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;要求统计1-90000000000的数字中，哪些是素数？ &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传统的方法，就是使用一个循环，循环的判断各个数是不是素数。 【很慢】&lt;/li&gt;
&lt;li&gt;使用并发或者并行的方式，将统计素数的任务分配给多个goroutine去完成，这 时就会使用到goroutine.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;goroutine基本介绍&quot;&gt;&lt;a href=&quot;#goroutine基本介绍&quot; class=&quot;headerlink&quot; title=&quot;goroutine基本介绍&quot;&gt;&lt;/a&gt;goroutine基本介绍&lt;/h2&gt;&lt;h3 id=&quot;进程和线程说明&quot;&gt;&lt;a href=&quot;#进程和线程说明&quot; class=&quot;headerlink&quot; title=&quot;进程和线程说明&quot;&gt;&lt;/a&gt;&lt;strong&gt;进程和线程说明&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进程就是程序在操作系统中的一次执行过程， 是系统进行资源分配和调度的基本单位&lt;/li&gt;
&lt;li&gt;线程是进程的一个执行实例，是程序执行的最小单元， 它是比进程更小的能独立运行的基本单位。&lt;/li&gt;
&lt;li&gt;一个进程可以创建和销毁多个线程，同一个进程中的多个线程可以并发执行 &lt;/li&gt;
&lt;li&gt;一个程序至少有一个进程， 个进程 至少有一个线程&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="协程与管道" scheme="https://lllllmaster-lulllll.github.io/tags/%E5%8D%8F%E7%A8%8B%E4%B8%8E%E7%AE%A1%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>家庭收支记账软件项目</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go_12%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go_12%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:16:56.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="家庭收支记账软件项目"><a href="#家庭收支记账软件项目" class="headerlink" title="家庭收支记账软件项目"></a>家庭收支记账软件项目</h1><h2 id="项目开发流程说明"><a href="#项目开发流程说明" class="headerlink" title="项目开发流程说明"></a>项目开发流程说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    需求分析-&gt;&gt;设计阶段: 需求分析 30% 需求分析师</span><br><span class="line">    设计阶段-&gt;&gt;实现阶段: 设计阶段 20% 项目经理或者架构师</span><br><span class="line">    实现阶段-&gt;&gt;测试阶段: 实施阶段 工程师 20% </span><br><span class="line">    测试阶段--&gt;&gt;实现阶段: 测试与开发交替 测试工程师</span><br><span class="line">    测试阶段-&gt;&gt;实施阶段: 提交</span><br><span class="line">    实施阶段-&gt;&gt;维护阶段: 实施阶段 实施工程师</span><br><span class="line">    维护阶段-&gt;&gt;维护阶段: 用户发现</span><br><span class="line">  </span><br><span class="line">    </span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h2><ul><li>模拟实现基本文本界面的《家庭记账软件》</li><li>该软件能够记录家庭的<strong>收入</strong>、<strong>支出</strong>，并能够<strong>打印收支明细表</strong></li><li>项目采用分级菜单方式。主菜单如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[家庭收支记账软件] --&gt;B(1. 收支明细)</span><br><span class="line">    A[家庭收支记账软件] --&gt;C(2. 登记收入)</span><br><span class="line">    A[家庭收支记账软件] --&gt;D(3. 登记支出)</span><br><span class="line">    A[家庭收支记账软件] --&gt;E(4. 退出)</span><br></pre></td></tr></table></figure><h2 id="项目的界面"><a href="#项目的界面" class="headerlink" title="项目的界面"></a>项目的界面</h2><p>文字界面</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202052151501.png" alt="image-20220205215123583"></p><h2 id="项目代码实现"><a href="#项目代码实现" class="headerlink" title="项目代码实现"></a>项目代码实现</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><h4 id="实现基本功能（先使用面向过程，后面改成面向对象）"><a href="#实现基本功能（先使用面向过程，后面改成面向对象）" class="headerlink" title="实现基本功能（先使用面向过程，后面改成面向对象）"></a>实现基本功能（先使用面向过程，后面改成面向对象）</h4><ul><li><p>功能 1 先完成可以显示主菜单，并且可以退出</p><ul><li><p>思路分析：</p><p>根据给出的界面完成，主菜单的显示，当用户输入 4 时，就退出该程序</p></li><li><p>走代码</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>功能 2 完成显示明细和登记收入的功能</p><ul><li><p>思路分析：</p><ol><li>因为需要显示明细，我们定义一个变量 details string 来记录</li><li>还需要定义变量来记录余额（balance）、每次收支的金额（money），每次收支的说明(note)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details := <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(details)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>功能 3 完成了登记支出的功能</p><ul><li><p>思路分析：</p><p>登记支出和登记收入功能类似，修改即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details := <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(details)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line"><span class="comment">//这里需要做一个必要的判断</span></span><br><span class="line"><span class="keyword">if</span> money &gt; balance &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;支出的余额不足!!!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">balance -= money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">&quot;支出\t%v\t\t%v\t\t%v\n&quot;</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><p>思路分析</p><p>把记账软件的功能，封装到一个结构体中，然后调用该结构体的方法，来实现记账，显示明细。结构体的名字：FamilyAccount</p><p>再通过 mian 方法中，创建一个结构体 FamilyAccount 结构体实例</p></li><li><p>代码部分：</p><p>utils.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FamilyAccount <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//声明一个变量,保存接收用户输入的选项</span></span><br><span class="line">key <span class="type">string</span></span><br><span class="line"><span class="comment">//声明一个变量,控制是否退出 for 循环</span></span><br><span class="line">loop <span class="type">bool</span></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance <span class="type">float64</span></span><br><span class="line"><span class="comment">//每次收支的金额</span></span><br><span class="line">money <span class="type">float64</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note <span class="type">string</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">details <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给结构体绑定方法</span></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> MainMenu() &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------家庭收支记账软件--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     1. 收支明细                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     2. 登记收入                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     3. 登记支出                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;                     4. 退出软件                      &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------------------------------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;请选择(1-4): &quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scanln(&amp;this.key)</span><br><span class="line"><span class="keyword">switch</span> this.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">this.ShowDetails()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">this.Income()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">this.Pay()</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">this.Exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------请输入正确的选项--------------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !this.loop &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;正在退出家庭记账软件的使用&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> ShowDetails() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------当前收支明细记录--------------------&quot;</span>)</span><br><span class="line">fmt.Println(this.details)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Income() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记收入--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line">this.balance += this.money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次收入说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">this.details += fmt.Sprintf(<span class="string">&quot;收入\t%v\t\t%v\t\t%v\n&quot;</span>, this.balance, this.money, this.note)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Pay() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;\n--------------------正在进行登记支出--------------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出金额: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.money)</span><br><span class="line"><span class="comment">//这里需要做一个必要的判断</span></span><br><span class="line"><span class="keyword">if</span> this.money &gt; this.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;支出的余额不足!!!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">this.balance -= this.money</span><br><span class="line">fmt.Println(<span class="string">&quot; 本次支出说明: &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;this.note)</span><br><span class="line"><span class="comment">//将收入情况,拼接到 details 变量</span></span><br><span class="line">this.details += fmt.Sprintf(<span class="string">&quot;支出\t%v\t\t%v\t\t%v\n&quot;</span>, this.balance, this.money, this.note)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *FamilyAccount)</span></span> Exit() &#123;</span><br><span class="line">this.loop = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFamilyAccount</span><span class="params">()</span></span> *FamilyAccount &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FamilyAccount&#123;</span><br><span class="line">key:     <span class="string">&quot;&quot;</span>,</span><br><span class="line">loop:    <span class="literal">true</span>,</span><br><span class="line">balance: <span class="number">10000</span>,</span><br><span class="line">money:   <span class="number">0</span>,</span><br><span class="line">note:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">details: <span class="string">&quot;收支\t账户金额\t收支金额\t说     明\n&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;go_code/chapter12/utils&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> fa = utils.NewFamilyAccount()</span><br><span class="line">fa.MainMenu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;家庭收支记账软件项目&quot;&gt;&lt;a href=&quot;#家庭收支记账软件项目&quot; class=&quot;headerlink&quot; title=&quot;家庭收支记账软件项目&quot;&gt;&lt;/a&gt;家庭收支记账软件项目&lt;/h1&gt;&lt;h2 id=&quot;项目开发流程说明&quot;&gt;&lt;a href=&quot;#项目开发流程说明&quot; class=&quot;headerlink&quot; title=&quot;项目开发流程说明&quot;&gt;&lt;/a&gt;项目开发流程说明&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sequenceDiagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    需求分析-&amp;gt;&amp;gt;设计阶段: 需求分析 30% 需求分析师&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    设计阶段-&amp;gt;&amp;gt;实现阶段: 设计阶段 20% 项目经理或者架构师&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    实现阶段-&amp;gt;&amp;gt;测试阶段: 实施阶段 工程师 20% &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    测试阶段--&amp;gt;&amp;gt;实现阶段: 测试与开发交替 测试工程师&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    测试阶段-&amp;gt;&amp;gt;实施阶段: 提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    实施阶段-&amp;gt;&amp;gt;维护阶段: 实施阶段 实施工程师&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    维护阶段-&amp;gt;&amp;gt;维护阶段: 用户发现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="项目实战" scheme="https://lllllmaster-lulllll.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    <category term="过程实战" scheme="https://lllllmaster-lulllll.github.io/tags/%E8%BF%87%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Golang%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Golang%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:12:22.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-数据类型和-crud"><a href="#Redis-数据类型和-crud" class="headerlink" title="Redis 数据类型和 crud"></a>Redis 数据类型和 crud</h2><h3 id="redis-的五大数据类型"><a href="#redis-的五大数据类型" class="headerlink" title="redis 的五大数据类型"></a>redis 的五大数据类型</h3><p>Redis的五大数据类型是: String(字符串) 、Hash（哈希）、 List(列表)、 Set(集合) 和zset(sorted set：有序集合)</p><h3 id="String-字符串-介绍"><a href="#String-字符串-介绍" class="headerlink" title="String(字符串)-介绍"></a>String(字符串)-介绍</h3><ol><li>string是redis最基本的类型，一个key对应一个value。 </li><li>string类型是二进制安全的。除普通的字符串外，也可以存放图片等数据。 </li><li>redis中字符串value最大是512M <ol><li>举例,存放一个地址信息: </li><li>address 北京天安门 </li><li>说明： key : address value: 北京天安门</li></ol></li></ol><p>setex （set with expire）</p><span id="more"></span><h3 id="看之前的-xmind-笔记"><a href="#看之前的-xmind-笔记" class="headerlink" title="看之前的 xmind 笔记"></a><font color="00ffff" ><strong>看之前的 xmind 笔记</strong></font></h3><h2 id="GO连接到-Redis"><a href="#GO连接到-Redis" class="headerlink" title="GO连接到 Redis"></a>GO连接到 Redis</h2><h3 id="安装第三方开源Redis库"><a href="#安装第三方开源Redis库" class="headerlink" title="安装第三方开源Redis库"></a>安装第三方开源Redis库</h3><ol><li>使用第三方开源的redis库: <a href="https://github.com/garyburd/redigo/redis">github.com&#x2F;garyburd&#x2F;redigo&#x2F;redis</a></li><li>在使用Redis前，先安装第三方Redis库，在GOPATH路径下执行安装指令: <code>go get github.com/garyburd/redigo/redis</code></li><li>安装成功后,可以看到如下包文件；</li><li>特别说明:在安装Redis库前，确保已经安装并配置了Git,因为 是从github下载安装 Redis库的，需要使用到Git。 如果没有安装配置过Git，请参考：如何安装配置Git .</li></ol><p><strong>安装成功</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202162127496.png" alt="image-20220216212736265"></p><h2 id="Golang-操作-Redis"><a href="#Golang-操作-Redis" class="headerlink" title="Golang 操作 Redis"></a>Golang 操作 Redis</h2><h3 id="Set-x2F-Get接口"><a href="#Set-x2F-Get接口" class="headerlink" title="Set&#x2F;Get接口"></a>Set&#x2F;Get接口</h3><p>说明:通过 Golang 添加和获取 key-value</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;Set&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;tomjerry猫猫&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;set err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r, err := redis.String(conn.Do(<span class="string">&quot;Get&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line">fmt.Println(<span class="string">&quot;操作 ok&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作-Hash"><a href="#操作-Hash" class="headerlink" title="操作 Hash"></a>操作 Hash</h3><p>说明：通过 Golang 对 Redis 操作 Hash 数据类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HSet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;康楠&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HSet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r1, err := redis.String(conn.Do(<span class="string">&quot;HGet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">r2, err := redis.Int(conn.Do(<span class="string">&quot;HGet&quot;</span>, <span class="string">&quot;user01&quot;</span>, <span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;r1=%v r2=%v\n&quot;</span>, r1, r2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量-HMSet-x2F-HMGet-数据"><a href="#批量-HMSet-x2F-HMGet-数据" class="headerlink" title="批量 HMSet&#x2F;HMGet 数据"></a>批量 HMSet&#x2F;HMGet 数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//通过 go 向 redis 写入数据和读取数据</span></span><br><span class="line"><span class="comment">//1. 链接到 redis</span></span><br><span class="line">conn, err := redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn redis failed,&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;conn succ...&quot;</span>, conn)</span><br><span class="line">_, err = conn.Do(<span class="string">&quot;HmSet&quot;</span>, <span class="string">&quot;user02&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;康楠&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HMset err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// _, err = conn.Do(&quot;HSet&quot;, &quot;user01&quot;, &quot;age&quot;, 18)</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;hset err=&quot;, err)</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//通过go 从 redis 读取数据</span></span><br><span class="line">r, err := redis.Strings(conn.Do(<span class="string">&quot;HMGet&quot;</span>, <span class="string">&quot;user02&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hget err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// r2, err := redis.Int(conn.Do(&quot;HGet&quot;, &quot;user01&quot;, &quot;age&quot;))</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;get err=&quot;, err)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//返回的 r 是 interface&#123;&#125;,需要转换一下</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> r &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;r[%v]=%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis连接池"><a href="#Redis连接池" class="headerlink" title="Redis连接池"></a>Redis连接池</h3><p>说明: 通过Golang 对Redis操作， 还可以通过Redis链接池,<strong>流程如下</strong>：</p><ol><li>事先初始化一定数量的链接，放入到链接池</li><li>当Go需要操作Redis时，直接从Redis链接池取出链接即可。 </li><li>这样可以节省临时获取Redis链接的时间，从而提高效率.</li></ol><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码:"></a>核心代码:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pool *redis.Pool</span><br><span class="line">pool = &amp;redis.Pool&#123;</span><br><span class="line">  Maxldle: <span class="number">8</span>,</span><br><span class="line">  MaxActive: <span class="number">0</span>,</span><br><span class="line">  IdleTimeout:<span class="number">100</span>,</span><br><span class="line">  Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (redis.Conn,<span class="type">error</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> redis.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  c := pool.Get() </span><br><span class="line">  pool.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/garyburd/redigo/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个全局 pool</span></span><br><span class="line"><span class="keyword">var</span> pool *redis.Pool</span><br><span class="line"></span><br><span class="line"><span class="comment">//当启动程序时,就初始化连接池</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">pool = &amp;redis.Pool&#123;</span><br><span class="line">MaxIdle:     <span class="number">8</span>,</span><br><span class="line">MaxActive:   <span class="number">0</span>,</span><br><span class="line">IdleTimeout: <span class="number">100</span>,</span><br><span class="line">Dial: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (redis.Conn, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> redis.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:6379&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//先从 pool 取出一个链接</span></span><br><span class="line">conn := pool.Get()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">_, err := conn.Do(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;汤姆猫~~&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r, err := redis.String(conn.Do(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;获取到的值为:&quot;</span>, r)</span><br><span class="line">pool.Close()</span><br><span class="line">conn2 := pool.Get()</span><br><span class="line">_, err = conn2.Do(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;name2&quot;</span>, <span class="string">&quot;汤姆猫2~~&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn2.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">r2, err := redis.String(conn2.Do(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;name2&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn2.Do err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;获取到的值为:&quot;</span>, r2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis-数据类型和-crud&quot;&gt;&lt;a href=&quot;#Redis-数据类型和-crud&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据类型和 crud&quot;&gt;&lt;/a&gt;Redis 数据类型和 crud&lt;/h2&gt;&lt;h3 id=&quot;redis-的五大数据类型&quot;&gt;&lt;a href=&quot;#redis-的五大数据类型&quot; class=&quot;headerlink&quot; title=&quot;redis 的五大数据类型&quot;&gt;&lt;/a&gt;redis 的五大数据类型&lt;/h3&gt;&lt;p&gt;Redis的五大数据类型是: String(字符串) 、Hash（哈希）、 List(列表)、 Set(集合) 和zset(sorted set：有序集合)&lt;/p&gt;
&lt;h3 id=&quot;String-字符串-介绍&quot;&gt;&lt;a href=&quot;#String-字符串-介绍&quot; class=&quot;headerlink&quot; title=&quot;String(字符串)-介绍&quot;&gt;&lt;/a&gt;String(字符串)-介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;string是redis最基本的类型，一个key对应一个value。 &lt;/li&gt;
&lt;li&gt;string类型是二进制安全的。除普通的字符串外，也可以存放图片等数据。 &lt;/li&gt;
&lt;li&gt;redis中字符串value最大是512M &lt;ol&gt;
&lt;li&gt;举例,存放一个地址信息: &lt;/li&gt;
&lt;li&gt;address 北京天安门 &lt;/li&gt;
&lt;li&gt;说明： key : address value: 北京天安门&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;setex （set with expire）&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="redis" scheme="https://lllllmaster-lulllll.github.io/tags/redis/"/>
    
    <category term="golang 连接 redis" scheme="https://lllllmaster-lulllll.github.io/tags/golang-%E8%BF%9E%E6%8E%A5-redis/"/>
    
  </entry>
  
  <entry>
    <title>Go_json</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go_json/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go_json/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:16:14.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-json"><a href="#Go-json" class="headerlink" title="Go_json"></a>Go_json</h1><h2 id="json-基本介绍"><a href="#json-基本介绍" class="headerlink" title="json 基本介绍"></a>json 基本介绍</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于及其解析和生成</p><p>JSON 是在 2001 年开始推广使用的数据格式，目前已经成为<font color="red"><strong>主流的数据格式。</strong></font></p><p><code>JSON</code>易于机器解析和生成，并有效地提升网络传输效率,通常程序在网络传输时会先将数据(结构体、map等) <font color="red">序列化</font>成json字符串,到接收方得到json字符串时，<font color="red">再反序列化</font>恢复成原来的数据 类型(结构体、map等)。这种方式已然成为各个语言的标准。</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101921897.png" alt="image-20220210192152774"></p><hr><h2 id="json-数据格式说明"><a href="#json-数据格式说明" class="headerlink" title="json 数据格式说明"></a>json 数据格式说明</h2><p><strong>在JS 语言中，一切都是对象</strong>。因此，任何的数据类型都可以通过JSON来表示，例 如字符串、数字、对象、数组等. </p><p>JSON 键值对是用来保存数据一种方式， </p><span id="more"></span><p>键&#x2F;值对组合中的键名写在前面并用双引号 “” . 包裹，使用冒号：分隔，然后紧接着值： </p><p>比如: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Json&quot;</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>比如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;北京&quot;</span><span class="punctuation">,</span><span class="string">&quot;上海&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>比如: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;上海&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mary&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;广州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;深圳&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h2 id="json-序列化"><a href="#json-序列化" class="headerlink" title="json 序列化"></a>json 序列化</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>json序列化是指，将有key-value结构的数据类型(比如结构体、map、切片)序列化成json字符串的操作。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><p>这里我们介绍一下<strong>结构体</strong>、<strong>map</strong>和<strong>切片</strong>的序列化，其它数据类型的序列化类似。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line">type Monster struct <span class="punctuation">&#123;</span></span><br><span class="line">Name     string</span><br><span class="line">Age      int</span><br><span class="line">Birthday string</span><br><span class="line">Sal      float64</span><br><span class="line">Skill    string</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">func testStruct() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line">monster <span class="punctuation">:</span>= Monster<span class="punctuation">&#123;</span></span><br><span class="line">Name<span class="punctuation">:</span>     <span class="string">&quot;牛魔王&quot;</span><span class="punctuation">,</span></span><br><span class="line">Age<span class="punctuation">:</span>      <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">Birthday<span class="punctuation">:</span> <span class="string">&quot;2011-11-11&quot;</span><span class="punctuation">,</span></span><br><span class="line">Sal<span class="punctuation">:</span>      <span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">Skill<span class="punctuation">:</span>    <span class="string">&quot;牛魔拳&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//将结构体序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(&amp;monster)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;monster序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将 map 进行序列化</span></span><br><span class="line">func testMap() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line">var mymap map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//使用 map,需要 make</span></span><br><span class="line">mymap = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;红孩儿&quot;</span></span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">20</span></span><br><span class="line">mymap<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;山顶洞&quot;</span></span><br><span class="line"><span class="comment">//将 map 进行序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(mymap)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;mymap map序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示对切片进行序列化</span></span><br><span class="line">func testSlice() <span class="punctuation">&#123;</span></span><br><span class="line">var slice <span class="punctuation">[</span><span class="punctuation">]</span>map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">var m1 map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">var m2 map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//使用 map 前,需要先 make</span></span><br><span class="line">m1 = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;jack&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;jack&quot;</span></span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">7</span></span><br><span class="line">m1<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;北京&quot;</span></span><br><span class="line">slice = append(slice<span class="punctuation">,</span> m1)</span><br><span class="line">m2 = make(map<span class="punctuation">[</span>string<span class="punctuation">]</span>interface<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>)</span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;jack&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;tom&quot;</span></span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;age&quot;</span><span class="punctuation">]</span> = <span class="number">20</span></span><br><span class="line">m2<span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span> = <span class="string">&quot;墨西哥&quot;</span></span><br><span class="line">slice = append(slice<span class="punctuation">,</span> m2)</span><br><span class="line"><span class="comment">//将切片进行序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(slice)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;切片 slice序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对基本数据类型序列化</span></span><br><span class="line">func testFloat64() <span class="punctuation">&#123;</span></span><br><span class="line">var num1 float64 = <span class="number">2345.67</span></span><br><span class="line"><span class="comment">//将float64序列化</span></span><br><span class="line">data<span class="punctuation">,</span> err <span class="punctuation">:</span>= json.Marshal(&amp;num1)</span><br><span class="line">if err != nil <span class="punctuation">&#123;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;序列化错误 err:%v\n&quot;</span><span class="punctuation">,</span> err)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;float64序列化后为:%v\n&quot;</span><span class="punctuation">,</span> string(data))</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">func main() <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//演示将结构体,map,切片进行序列化</span></span><br><span class="line">testStruct()</span><br><span class="line">testMap()</span><br><span class="line">testSlice()</span><br><span class="line">testFloat64()</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="结构体字段按需要的方式序列化-给-struct-指定标签-tag）"><a href="#结构体字段按需要的方式序列化-给-struct-指定标签-tag）" class="headerlink" title="结构体字段按需要的方式序列化(给 struct 指定标签 tag）"></a>结构体字段按需要的方式序列化(给 struct 指定标签 tag）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span> <span class="comment">//反射机制</span></span><br><span class="line">Age      <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Birthday <span class="type">string</span>  <span class="string">`json:&quot;monster_birthday&quot;`</span></span><br><span class="line">Sal      <span class="type">float64</span> <span class="string">`json:&quot;monster_sal&quot;`</span></span><br><span class="line">Skill    <span class="type">string</span>  <span class="string">`json:&quot;monster_Skill&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="json-反序列化"><a href="#json-反序列化" class="headerlink" title="json 反序列化"></a>json 反序列化</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>json反序列化是指，将json字符串反序列化成对应的数据类型(比如结构体、 map、 切片)的操作。</p><h3 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h3><p>这里我们介绍一下将json字符串反序列化成结构体、map和切片。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span> <span class="comment">//反射机制</span></span><br><span class="line">Age      <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Birthday <span class="type">string</span>  <span class="string">`json:&quot;monster_birthday&quot;`</span></span><br><span class="line">Sal      <span class="type">float64</span> <span class="string">`json:&quot;monster_sal&quot;`</span></span><br><span class="line">Skill    <span class="type">string</span>  <span class="string">`json:&quot;monster_Skill&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 struct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;monster_name\&quot;:\&quot;牛魔王\&quot;,\&quot;monster_age\&quot;:500,\&quot;monster_birthday\&quot;:\&quot;2011-11-11\&quot;,\&quot;monster_sal\&quot;:8000,\&quot;monster_skill\&quot;:\&quot;牛魔拳\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> monster Monster</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 monster:%v\n&quot;</span>, monster)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalMap</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;address\&quot;:\&quot;山顶洞\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;红孩儿\&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> mymap <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//不需要 make 分配地址,反序列化低层自己 make</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;mymap)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 mymap:%v\n&quot;</span>, mymap)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串,反序列化成 切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这个 string 在项目开发中,是通过网络传输获取到的</span></span><br><span class="line">str := <span class="string">&quot;[&#123;\&quot;address\&quot;:\&quot;北京\&quot;,\&quot;age\&quot;:7,\&quot;jack\&quot;:\&quot;jack\&quot;&#125;,&#123;\&quot;address\&quot;:\&quot;墨西哥\&quot;,\&quot;age\&quot;:20,\&quot;jack\&quot;:\&quot;tom\&quot;&#125;]&quot;</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//不需要 make 分配地址,反序列化低层自己 make</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;slice)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;unmarshal err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;反序列化后 slice:%v\n&quot;</span>, slice)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">unmarshalStruct()</span><br><span class="line">unmarshalMap()</span><br><span class="line">unmarshalSlice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码结果："><a href="#代码结果：" class="headerlink" title="代码结果："></a>代码结果：</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202102317297.png" alt="image-20220210231713125"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go-json&quot;&gt;&lt;a href=&quot;#Go-json&quot; class=&quot;headerlink&quot; title=&quot;Go_json&quot;&gt;&lt;/a&gt;Go_json&lt;/h1&gt;&lt;h2 id=&quot;json-基本介绍&quot;&gt;&lt;a href=&quot;#json-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;json 基本介绍&quot;&gt;&lt;/a&gt;json 基本介绍&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于及其解析和生成&lt;/p&gt;
&lt;p&gt;JSON 是在 2001 年开始推广使用的数据格式，目前已经成为&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;主流的数据格式。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt;易于机器解析和生成，并有效地提升网络传输效率,通常程序在网络传输时会先将数据(结构体、map等) &lt;font color=&quot;red&quot;&gt;序列化&lt;/font&gt;成json字符串,到接收方得到json字符串时，&lt;font color=&quot;red&quot;&gt;再反序列化&lt;/font&gt;恢复成原来的数据 类型(结构体、map等)。这种方式已然成为各个语言的标准。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101921897.png&quot; alt=&quot;image-20220210192152774&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;json-数据格式说明&quot;&gt;&lt;a href=&quot;#json-数据格式说明&quot; class=&quot;headerlink&quot; title=&quot;json 数据格式说明&quot;&gt;&lt;/a&gt;json 数据格式说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在JS 语言中，一切都是对象&lt;/strong&gt;。因此，任何的数据类型都可以通过JSON来表示，例 如字符串、数字、对象、数组等. &lt;/p&gt;
&lt;p&gt;JSON 键值对是用来保存数据一种方式， &lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="json" scheme="https://lllllmaster-lulllll.github.io/tags/json/"/>
    
    <category term="序列化&amp;反序列化" scheme="https://lllllmaster-lulllll.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>第 14 章 文件操作</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2014%20%E7%AB%A0%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2014%20%E7%AB%A0%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:15:46.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-14-章-文件操作"><a href="#第-14-章-文件操作" class="headerlink" title="第 14 章 文件操作"></a>第 14 章 文件操作</h1><h2 id="文件-基本介绍"><a href="#文件-基本介绍" class="headerlink" title="文件-基本介绍"></a>文件-基本介绍</h2><p>文件,对我们并不陌生,文件是数据源(保存数据的地方)的一种,比如大家经常使用的 word文档,txt文件,excel文件…都是文件。文件最主要的作用就是保存数据,它既可以保存一张图片,也可以保存视频,声音…</p><p><strong>文件在程序中是以流的形式来操作的。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    subgraph 内存</span><br><span class="line">    A[&quot;GO程序&quot;]</span><br><span class="line">    end</span><br><span class="line">    subgraph 磁盘</span><br><span class="line">    B[&quot;文件&quot;]</span><br><span class="line">    end</span><br><span class="line">         </span><br><span class="line">内存 ----&gt; |输出流|磁盘</span><br><span class="line">磁盘 ----&gt; |输入流|内存</span><br><span class="line">style A fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span><br></pre></td></tr></table></figure><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202062311026.png" alt="image-20220206231150956"></p><p>&#x3D;&#x3D;流：数据在数据源(文件)和程序(内存)之间经历的路径&#x3D;&#x3D;<br>&#x3D;&#x3D;输入流：数据从数据源(文件)到程序(内存)的路径&#x3D;&#x3D;<br>&#x3D;&#x3D;输出流：数据从程序(内存)到数据源(文件)的路径&#x3D;&#x3D;</p><p>os.File封装所有文件相关操作，File 是一个结构体</p><h2 id="打开文件和关闭文件"><a href="#打开文件和关闭文件" class="headerlink" title="打开文件和关闭文件"></a>打开文件和关闭文件</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p><strong>使用函数和方法</strong></p><span id="more"></span><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061527788.png" alt="image-20220206152742476"></p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p><strong>使用函数和方法</strong></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061530747.png" alt="image-20220206153028492"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出文件</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;file=%v\n&quot;</span>, file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">err = file.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读文件操作应用实例"><a href="#读文件操作应用实例" class="headerlink" title="读文件操作应用实例"></a>读文件操作应用实例</h2><ul><li><p>读取文件的内容并显示在终端(带缓冲区的方式)，使用<code>os.Open, file.Close(), bufio.NewReader(), reader.ReadString</code> 函数和方法</p><ul><li>代码实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件 当函数退出时,</span></span><br><span class="line"><span class="keyword">defer</span> file.Close() <span class="comment">//要及时的关闭 file</span></span><br><span class="line"><span class="comment">//创建一个*Reader,是带缓冲的</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="comment">//循环的读取文件的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读到一个换行就结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;                  <span class="comment">//io.EOF 表示文件的末尾</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出内容</span></span><br><span class="line">fmt.Print(str)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件读取结束...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果显示</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061602888.png" alt="image-20220206160247312"></p></li><li><p>读取文件的内容并显示在终端(使用ioutil一次将整个文件读入到内存中)，这种 方式适用于文件不大的情况。相关方法和函数(ioutil.ReadFile)</p><ul><li>代码实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用 ioutil.ReadFile 一次性将文件读取到位</span></span><br><span class="line">file := <span class="string">&quot;/Users/tal/iceCode/godev/data.txt&quot;</span></span><br><span class="line">content, err := ioutil.ReadFile(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把读取到的内容显示到终端</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;content:%v\n&quot;</span>, <span class="type">string</span>(content))</span><br><span class="line"><span class="comment">//没有显示 openfile 所以不需要显示的 close 文件</span></span><br><span class="line"><span class="comment">//因为文件的打开和关闭被封装在函数中</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果显示</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202061622896.png" alt="image-20220206162205645"></p></li></ul></li></ul><h2 id="写文件操作应用实例"><a href="#写文件操作应用实例" class="headerlink" title="写文件操作应用实例"></a>写文件操作应用实例</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202062211414.png" alt="image-20220206221102909"></p><p>说明: os.OpenFile是一个更一般性的文件打开函数，它会使用指定的选项（如 O_RDONLY等）、指定的模式（如0666等）打开指定名称的文件。如果操作成功，返 回的文件对象可用于I&#x2F;O。如果出错，错误底层类型是*PathError。</p><p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error)</code> <code>FileMode</code> 只在 <code>linux</code> 系统下起作用</p><h3 id="文件打开模式操作实例（方式一）"><a href="#文件打开模式操作实例（方式一）" class="headerlink" title="文件打开模式操作实例（方式一）"></a>文件打开模式操作实例（方式一）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span></span><br><span class="line">O_RDONLY <span class="type">int</span> = syscall.O_RDONLY <span class="comment">// open the file read-only.</span></span><br><span class="line">O_WRONLY <span class="type">int</span> = syscall.O_WRONLY <span class="comment">// open the file write-only.</span></span><br><span class="line">O_RDWR   <span class="type">int</span> = syscall.O_RDWR   <span class="comment">// open the file read-write.</span></span><br><span class="line"><span class="comment">// The remaining values may be or&#x27;ed in to control behavior.</span></span><br><span class="line">O_APPEND <span class="type">int</span> = syscall.O_APPEND <span class="comment">// append data to the file when writing.</span></span><br><span class="line">O_CREATE <span class="type">int</span> = syscall.O_CREAT  <span class="comment">// create a new file if none exists.</span></span><br><span class="line">O_EXCL   <span class="type">int</span> = syscall.O_EXCL   <span class="comment">// used with O_CREATE, file must not exist.</span></span><br><span class="line">O_SYNC   <span class="type">int</span> = syscall.O_SYNC   <span class="comment">// open for synchronous I/O.</span></span><br><span class="line">O_TRUNC  <span class="type">int</span> = syscall.O_TRUNC  <span class="comment">// truncate regular writable file when opened.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="代码：使用-os-OpenFile-bufio-NewWriter-Writer的方法-WriteString-完成以下任务"><a href="#代码：使用-os-OpenFile-bufio-NewWriter-Writer的方法-WriteString-完成以下任务" class="headerlink" title="代码：使用 os.OpenFile(),bufio.NewWriter(), *Writer的方法 WriteString 完成以下任务"></a>代码：使用 os.OpenFile(),bufio.NewWriter(), *Writer的方法 WriteString 完成以下任务</h4><ol><li><h5 id="创建一个新文件，写入内容-5-句-“hello-Gardon”"><a href="#创建一个新文件，写入内容-5-句-“hello-Gardon”" class="headerlink" title="创建一个新文件，写入内容 5 句 “hello,Gardon”"></a>创建一个新文件，写入内容 5 句 “hello,Gardon”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;hello,Gardon\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件中，将原来的内容覆盖成新的内容10句-“你好，尚硅谷-”"><a href="#打开一个存在的文件中，将原来的内容覆盖成新的内容10句-“你好，尚硅谷-”" class="headerlink" title="打开一个存在的文件中，将原来的内容覆盖成新的内容10句 “你好，尚硅谷!”"></a>打开一个存在的文件中，将原来的内容覆盖成新的内容10句 “你好，尚硅谷!”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_TRUNC, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;你好,北京工商大学\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件，在原来的内容追加内容-‘ABC-ENGLISH-’"><a href="#打开一个存在的文件，在原来的内容追加内容-‘ABC-ENGLISH-’" class="headerlink" title="打开一个存在的文件，在原来的内容追加内容 ‘ABC! ENGLISH!’"></a>打开一个存在的文件，在原来的内容追加内容 ‘ABC! ENGLISH!’</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">str := <span class="string">&quot;BTBU 冰墩墩\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello-北京-”"><a href="#打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello-北京-”" class="headerlink" title="打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello,北京!”"></a>打开一个存在的文件，将原来的内容读出显示在终端，并且追加5句”hello,北京!”</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filepath := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">file, err := os.OpenFile(filepath, os.O_RDWR|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//先读取原来文件的内容,并显示在终端</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(str)</span><br><span class="line">&#125;</span><br><span class="line">str := <span class="string">&quot;hello 北京\r\n&quot;</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为 writer 是带缓存的,因此在调用 WriterString 方法时,</span></span><br><span class="line"><span class="comment">//内容是先写到缓存的,调用 Flush 方法,将缓存写入磁盘</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;文件打开模式操作实例（方式一）</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件打开模式操作实例（方式二）"><a href="#文件打开模式操作实例（方式二）" class="headerlink" title="文件打开模式操作实例（方式二）"></a>文件打开模式操作实例（方式二）</h3><h5 id="编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了"><a href="#编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了" class="headerlink" title="编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了"></a>编写一个程序，将一个文件的内容，写入到另外一个文件。注：这两个文件已经存在了</h5><ul><li>说明：使用<code>ioutil.ReadFile(file1path)</code>和<code>ioutil.WriteFile(file2path, data, 0666)</code>完成读写文件的任务</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件:将 abc.txt 导入到 kkk.txt</span></span><br><span class="line">file1path := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">file2path := <span class="string">&quot;/Users/tal/iceCode/godev/kkk.txt&quot;</span></span><br><span class="line">data, err := ioutil.ReadFile(file1path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//说明读取文件有错误</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;read file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(file2path, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write file err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><p>golang判断文件或文件夹是否存在的方法为使用os.Stat()函数返回的错误值进行判断: </p><ol><li>如果返回的错误为nil,说明文件或文件夹存在 </li><li>如果返回的错误类型使用os.IsNotExist()判断为true,说明文件或文件夹不存在</li><li>如果返回的错误为其它类型,则不确定是否在存在</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PathExists</span><span class="params">(path <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件:将 abc.txt 导入到 kkk.txt</span></span><br><span class="line">file1path := <span class="string">&quot;/Users/tal/iceCode/godev/abc.txt&quot;</span></span><br><span class="line">fmt.Println(PathExists(file1path))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件编程实例"><a href="#文件编程实例" class="headerlink" title="文件编程实例"></a>文件编程实例</h3><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><ul><li>说明：将一张图片&#x2F;电影&#x2F;mp3拷贝到另一个目录下</li></ul><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202101422133.png" alt="image-20220210142200944">  </p><p><font color="ff0000"><strong>注意：</strong></font><font color="ff0000">Copy 函数是 io 包提供的</font></p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个函数,接收两个文件路径 srcFilePath dstFilePath</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyFile</span><span class="params">(dsfFilePath <span class="type">string</span>, srcFilePath <span class="type">string</span>)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">srcfile, err := os.Open(srcFilePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> srcfile.Close()</span><br><span class="line"><span class="comment">//通过 srcfile,获取到 Reader</span></span><br><span class="line">reader := bufio.NewReader(srcfile)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开 dstfile</span></span><br><span class="line">dstfile, err := os.OpenFile(dsfFilePath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过 dstfile,获取到 writer</span></span><br><span class="line">writer := bufio.NewWriter(dstfile)</span><br><span class="line"><span class="keyword">return</span> io.Copy(writer, reader)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//拷贝图片</span></span><br><span class="line"><span class="comment">//调用 CopyFile 完成文件拷贝</span></span><br><span class="line">srcFile := <span class="string">&quot;/Users/aurora/iceCode/godev/src/go_code/chapter14/gogo.jpg&quot;</span></span><br><span class="line">dstFile := <span class="string">&quot;/Users/aurora/iceCode/godev/src/go_code/chapter14/filedemo05/exe06/gogo.jpg&quot;</span></span><br><span class="line">returecode, err := CopyFile(dstFile, srcFile)</span><br><span class="line">fmt.Println(returecode)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;copy file err:&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;copy succeed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计英文、数字、空格和其他字符数量"><a href="#统计英文、数字、空格和其他字符数量" class="headerlink" title="统计英文、数字、空格和其他字符数量"></a>统计英文、数字、空格和其他字符数量</h4><p><strong>说明：</strong>统计一个文件中含有的英文、数字、空格及其他字符数量</p><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体,用于保存统计结构</span></span><br><span class="line"><span class="keyword">type</span> CharCount <span class="keyword">struct</span> &#123;</span><br><span class="line">ChCount    <span class="type">int</span></span><br><span class="line">NumCount   <span class="type">int</span></span><br><span class="line">SpaceCount <span class="type">int</span></span><br><span class="line">OtherCount <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//思路:打开一个文件,创建一个 Reader</span></span><br><span class="line"><span class="comment">//每读取一行,就去统计该行有多少个 英文,数字,空格和其他字符</span></span><br><span class="line"><span class="comment">//然后将结果保存到一个结构体</span></span><br><span class="line">filepath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">file, err := os.Open(filepath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 CharCount 实例</span></span><br><span class="line"><span class="keyword">var</span> count CharCount</span><br><span class="line"><span class="comment">//创建一个 Reader</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始循环读取 file 的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历 str,进行统计</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> str &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line"><span class="keyword">fallthrough</span> <span class="comment">//穿透处理</span></span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">count.ChCount++</span><br><span class="line"><span class="keyword">case</span> v == <span class="string">&#x27; &#x27;</span> || v == <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">count.SpaceCount++</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; v &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">count.NumCount++</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">count.OtherCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出统计结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;字符的个数为:%v 数字的个数为:%v 空格的个数为:%v 其他字符个数为:%v\n&quot;</span>,</span><br><span class="line">count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第-14-章-文件操作&quot;&gt;&lt;a href=&quot;#第-14-章-文件操作&quot; class=&quot;headerlink&quot; title=&quot;第 14 章 文件操作&quot;&gt;&lt;/a&gt;第 14 章 文件操作&lt;/h1&gt;&lt;h2 id=&quot;文件-基本介绍&quot;&gt;&lt;a href=&quot;#文件-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;文件-基本介绍&quot;&gt;&lt;/a&gt;文件-基本介绍&lt;/h2&gt;&lt;p&gt;文件,对我们并不陌生,文件是数据源(保存数据的地方)的一种,比如大家经常使用的 word文档,txt文件,excel文件…都是文件。文件最主要的作用就是保存数据,它既可以保存一张图片,也可以保存视频,声音…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件在程序中是以流的形式来操作的。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flowchart LR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subgraph 内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A[&amp;quot;GO程序&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subgraph 磁盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B[&amp;quot;文件&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;内存 ----&amp;gt; |输出流|磁盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;磁盘 ----&amp;gt; |输入流|内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;style A fill:#f9f,stroke:#333,stroke-width:4px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202062311026.png&quot; alt=&quot;image-20220206231150956&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;流：数据在数据源(文件)和程序(内存)之间经历的路径&amp;#x3D;&amp;#x3D;&lt;br&gt;&amp;#x3D;&amp;#x3D;输入流：数据从数据源(文件)到程序(内存)的路径&amp;#x3D;&amp;#x3D;&lt;br&gt;&amp;#x3D;&amp;#x3D;输出流：数据从程序(内存)到数据源(文件)的路径&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;os.File封装所有文件相关操作，File 是一个结构体&lt;/p&gt;
&lt;h2 id=&quot;打开文件和关闭文件&quot;&gt;&lt;a href=&quot;#打开文件和关闭文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件和关闭文件&quot;&gt;&lt;/a&gt;打开文件和关闭文件&lt;/h2&gt;&lt;h3 id=&quot;打开文件&quot;&gt;&lt;a href=&quot;#打开文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件&quot;&gt;&lt;/a&gt;打开文件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用函数和方法&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="文件操作" scheme="https://lllllmaster-lulllll.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言第 17 章 反射</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2017%20%E7%AB%A0%20%E5%8F%8D%E5%B0%84/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2017%20%E7%AB%A0%20%E5%8F%8D%E5%B0%84/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:15:19.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-语言第-17-章-反射"><a href="#Go-语言第-17-章-反射" class="headerlink" title="Go 语言第 17 章 反射"></a>Go 语言第 17 章 反射</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="结构体序列化和反序列化"><a href="#结构体序列化和反序列化" class="headerlink" title="结构体序列化和反序列化"></a>结构体序列化和反序列化</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202122044093.png" alt="image-20220212204437940"></p><hr><h3 id="新问题：桥连接"><a href="#新问题：桥连接" class="headerlink" title="新问题：桥连接"></a>新问题：桥连接</h3><ol><li>定义了两个匿名函数</li></ol><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test1:=<span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="type">int</span>, v2 <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">  t.Log(v1,v2)</span><br><span class="line">&#125;</span><br><span class="line">test2:=<span class="function"><span class="keyword">func</span><span class="params">(v1 <span class="type">int</span>, v2 <span class="type">int</span>, s <span class="type">string</span>)</span></span>&#123;</span><br><span class="line">  t.Log(v1,v2,s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>定义一个适配器函数用作统一处理接口，其大致结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bridge:=<span class="function"><span class="keyword">func</span><span class="params">(call <span class="keyword">interface</span>&#123;&#125;,args ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">  <span class="comment">//内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现调用 test1 对应的函数</span></span><br><span class="line">bridge(test1,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//实现调用 test1 对应的函数</span></span><br><span class="line">bridge(test2,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;test2&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>要求只用反射机制完成（note：学习 reflect 后，回头来解决）</p></li></ol><h2 id="反射的基本介绍"><a href="#反射的基本介绍" class="headerlink" title="反射的基本介绍"></a>反射的基本介绍</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>反射可以在运行时动态获取变量的各种信息，比如变量的类型(type)，类别(kind) </li><li>如果是结构体变量，还可以获取到结构体本身的信息(包括结构体的字段、方法) </li><li>通过反射，可以修改变量的值，可以调用关联的方法。 </li><li>使用反射，需要import(“reflect”)</li><li>示意图</li></ol><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131452666.png" alt="image-20220213145229548"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131412306.png" alt="image-20220213141240157"></p><hr><h3 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h3><ol><li>不知道接口调用哪个函数，根据传入参数在运行时确定调用的具体接口，这种需要对函数或方法反射。例如以下这种桥接模式, 比如前面提出问题。 func t (funcptr interface{}, iterface{}) 第一个参数funcPtr以接口的形式传入函数指针，函数参数args以可变参数的形 式传入，bridge函数中可以用反射来动态执行funcPtr函数</li><li>对结构体序列化时，如果结构体有指定的Tag，也会使用到反射生成对应的字符串</li></ol><h3 id="反射重要的函数和概念"><a href="#反射重要的函数和概念" class="headerlink" title="反射重要的函数和概念"></a>反射重要的函数和概念</h3><ol><li><p>reflect.TypeOf(变量名)，获取变量的类型，返回reflect.Type类型 </p></li><li><p>reflect.ValueOf(变量名)，获取变量的值，返回reflect.Value类型reflect.Value 是一个 结构体类型。 【看文档】，通过reflect.Value， 可以获取到关于该变量的很多信息。</p></li><li><p>变量、interface{} 和reflect.Value是可以相互转换的，这点在实际开发中，会经常使 用到。画出示意图</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131554216.png" alt="image-20220213155419077"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202131554859.png" alt="image-20220213155439779"></p></li></ol><h2 id="反射的快速入门"><a href="#反射的快速入门" class="headerlink" title="反射的快速入门"></a>反射的快速入门</h2><h3 id="快速入门说明"><a href="#快速入门说明" class="headerlink" title="快速入门说明"></a>快速入门说明</h3><ol><li><p>请编写一个案例演示对(基本数据类型、 interface{}、reflect.Value)进行反射的基本操作。<br><strong>代码演示</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行加减</span></span><br><span class="line">n2 := <span class="number">2</span> + rVal.Int()</span><br><span class="line">fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">fmt.Println(<span class="string">&quot;rVal=&quot;</span>, rVal)</span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line"><span class="comment">//将 interface 通过断言转成需要的类型</span></span><br><span class="line">num2 := iV.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//请编写一个案例演示对(基本数据类型、 interface&#123;&#125;、reflect.Value)进行反射的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">reflectTest01(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请编写一个案例，演示对(结构体类型、interface[}、reflect.Value)进行反射的基本操 作。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行加减</span></span><br><span class="line">n2 := <span class="number">2</span> + rVal.Int()</span><br><span class="line">fmt.Println(<span class="string">&quot;n2=&quot;</span>, n2)</span><br><span class="line">fmt.Println(<span class="string">&quot;rVal=&quot;</span>, rVal)</span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line"><span class="comment">//将 interface 通过断言转成需要的类型</span></span><br><span class="line">num2 := iV.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//专门演示对结构体的反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest02</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取传入变量的ype kind value</span></span><br><span class="line"><span class="comment">//先获取 reflect.Type()</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">&quot;rType=&quot;</span>, rType)</span><br><span class="line"><span class="comment">//获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line">fmt.Printf(<span class="string">&quot;iV = %v iV = %T\n&quot;</span>, iV, iV)</span><br><span class="line"><span class="comment">//将 interface&#123;&#125;通过断言转成需要的类型</span></span><br><span class="line"><span class="comment">//简单使用类型检查</span></span><br><span class="line">stu, ok := iV.(Student)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;stu.Name=%v\n&quot;</span>, stu.Name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//请编写一个案例演示对(基本数据类型、 interface&#123;&#125;、reflect.Value)进行反射的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var num int = 100</span></span><br><span class="line"><span class="comment">// reflectTest01(num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 Student 的实例</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">Age:  <span class="number">8</span>,</span><br><span class="line">&#125;</span><br><span class="line">reflectTest02(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反射注意事项和细节说明"><a href="#反射注意事项和细节说明" class="headerlink" title="反射注意事项和细节说明"></a>反射注意事项和细节说明</h2><ol><li><p>reflect.Value.Kind,获取变量的类别，返回的是一个常量</p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202132002322.png" alt="image-20220213200201178" style="zoom: 67%;" /><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202132047782.png" alt="image-20220213204709609"></p></li><li><p>Type是类型, Kind是类别， Type 和 Kind 可能是相同的，也可能是不同的. </p><ol><li>比如: var num int &#x3D; 10 num的Type是int，Kind也是int . </li><li>比如: var stu Student stu的Type是 <strong>包名.Student</strong> , Kind是<strong>struct</strong></li></ol></li><li><p>通过反射可以在让变量在interface{} 和Reflect.Value之间相互转换, 这点在前面画 过示意图并在快速入门案例中讲解过,这里我们看下是如何在代码中体现的.</p></li><li><p>使用反射的方式来获取变量的值(<font color="red">并返回对应的类型</font>)，要求数据类型匹配 ，比如x是int, 那么就应该使用 reflect.Value(x)IInt(),而不能使用其它的，否则报panic</p></li><li><p>通过反射来修改变量，注意当使用SetXxx方法来设置需要通过对应的指针类型来完成，这样才能改变传入的变量的值，同时需要使用到 reflect.Value.Elem()方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射,修改 num int 的值  修改 student 的值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflect01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//2. 获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line">rVal.Elem().SetInt(<span class="number">20</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;rVal kind=%v\n&quot;</span>, rVal.Kind())</span><br><span class="line"><span class="comment">// fmt.Println(rVal)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">reflect01(&amp;num)</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反射的最佳实践"><a href="#反射的最佳实践" class="headerlink" title="反射的最佳实践"></a>反射的最佳实践</h2><h3 id="1-使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值"><a href="#1-使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值" class="headerlink" title="1. 使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值"></a>1. 使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span>  <span class="string">`json:&quot;monster_name&quot;`</span></span><br><span class="line">Age   <span class="type">int</span>     <span class="string">`json:&quot;monster_age&quot;`</span></span><br><span class="line">Score <span class="type">float64</span> <span class="string">`json:&quot;monster_score&quot;`</span></span><br><span class="line">Sex   <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> Print() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;----------start----------&quot;</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------end-----------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> GetSum(n1, n2 <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span></span> Set(name <span class="type">string</span>, age <span class="type">int</span>, score <span class="type">float64</span>, sex <span class="type">string</span>) &#123;</span><br><span class="line">s.Name = name</span><br><span class="line">s.Age = age</span><br><span class="line">s.Score = score</span><br><span class="line">s.Sex = sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">typ := reflect.TypeOf(a)</span><br><span class="line">val := reflect.ValueOf(a)</span><br><span class="line">kd := val.Kind()</span><br><span class="line"><span class="keyword">if</span> kd != reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;expect struct&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num := val.NumField()</span><br><span class="line">fmt.Printf(<span class="string">&quot;struct has %d fields\n&quot;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Field %d: 值为=%v\n&quot;</span>, i, val.Field(i))</span><br><span class="line"><span class="comment">//获取到struct标签，注意需要通过reflect.Type来获取tag标签的值</span></span><br><span class="line">tagVal := typ.Field(i).Tag.Get(<span class="string">&quot;json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> tagVal != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Field %d: tag为=%v\n&quot;</span>, i, tagVal)</span><br><span class="line">&#125;</span><br><span class="line">numofMethod := val.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">&quot;struct has %d methods\n&quot;</span>, numofMethod)</span><br><span class="line"><span class="comment">//var params []reflect.Value</span></span><br><span class="line"><span class="comment">//函数排序按照名字字母排序,A-&gt;Z</span></span><br><span class="line">val.Method(<span class="number">1</span>).Call(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//调用结构体的第1个方法Method(0)</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">10</span>))</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">40</span>))</span><br><span class="line">res := val.Method(<span class="number">0</span>).Call(params) <span class="comment">//传入的参数是[]reflect.Value</span></span><br><span class="line">fmt.Println(<span class="string">&quot;res=&quot;</span>, res[<span class="number">0</span>].Int()) <span class="comment">//返回结果,返回的结果是 []reflect.Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Monster = Monster&#123;</span><br><span class="line">Name:  <span class="string">&quot;黄鼠狼精&quot;</span>,</span><br><span class="line">Age:   <span class="number">400</span>,</span><br><span class="line">Score: <span class="number">30.8</span>,</span><br><span class="line">&#125;</span><br><span class="line">TestStruct(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go-语言第-17-章-反射&quot;&gt;&lt;a href=&quot;#Go-语言第-17-章-反射&quot; class=&quot;headerlink&quot; title=&quot;Go 语言第 17 章 反射&quot;&gt;&lt;/a&gt;Go 语言第 17 章 反射&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;h3 id=&quot;结构体序列化和反序列化&quot;&gt;&lt;a href=&quot;#结构体序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;结构体序列化和反序列化&quot;&gt;&lt;/a&gt;结构体序列化和反序列化&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202122044093.png&quot; alt=&quot;image-20220212204437940&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;新问题：桥连接&quot;&gt;&lt;a href=&quot;#新问题：桥连接&quot; class=&quot;headerlink&quot; title=&quot;新问题：桥连接&quot;&gt;&lt;/a&gt;新问题：桥连接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义了两个匿名函数&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="反射" scheme="https://lllllmaster-lulllll.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>第 18 章 `TCP` 编程</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2018_tcp%E7%BC%96%E7%A8%8B/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%E8%AF%AD%E8%A8%80%E7%AC%AC%2018_tcp%E7%BC%96%E7%A8%8B/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:14:43.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-18-章-TCP-编程"><a href="#第-18-章-TCP-编程" class="headerlink" title="第 18 章 TCP 编程"></a>第 18 章 <code>TCP</code> 编程</h1><h2 id="网络编程基本介绍"><a href="#网络编程基本介绍" class="headerlink" title="网络编程基本介绍"></a>网络编程基本介绍</h2><p>Golang的主要设计目标之一就是面向大规模 务端 程序必不可少也是至关重要的一部分。 </p><p>网络编程有两种: </p><ol><li>TCP socket编程，是网络编程的主流。之所以叫Tcp socket编程，是因为底层是 基于Tcp&#x2F;ip协议的. 比如: QQ聊天 [示意图] </li><li>b&#x2F;s结构的http编程，我们使用浏览器去访问服务器时，使用的就是http协议， 而http底层依旧是用tcp socket实现的。[示意图] 比如: 京东商城 【这属于go web开发 范畴</li></ol><h3 id="网线，网卡，五险网卡"><a href="#网线，网卡，五险网卡" class="headerlink" title="网线，网卡，五险网卡"></a>网线，网卡，五险网卡</h3><p>计算机之间要相互通讯，必须要求网线，网卡，或者是无线网卡</p><span id="more"></span><h2 id="网络编程基础知识"><a href="#网络编程基础知识" class="headerlink" title="网络编程基础知识"></a>网络编程基础知识</h2><h3 id="协议-tcp-x2F-ip"><a href="#协议-tcp-x2F-ip" class="headerlink" title="协议(tcp&#x2F;ip)"></a>协议(tcp&#x2F;ip)</h3><p>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol)的简写,中文译名为传输控制 协议&#x2F;因特网互联协议，又叫网络通讯协议，这个协议是Internet最基本的协议、 Internet国际互联网络的基础，简单地说，就是由网络层的IP协议和传输层的TCP协 议组成的。</p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142105516.png" alt="image-20220214210526344"></p><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142106166.png" alt="image-20220214210603112"></p><h3 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h3><p>我们这里所指的端口不是指物理意义上的端口，而是特指TCP&#x2F;IP协议中的端口，是 逻辑意义上的端口。 如果把IP地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个 门，但是一个IP地址的端口可以有65536（即：256×256）个之多！端口是通过端口号来标记的，端口号只有整数，范围是从o到65535（256×256-1）</p><h3 id="端口-port-分类"><a href="#端口-port-分类" class="headerlink" title="端口(port)-分类"></a>端口(port)-分类</h3><ol><li><p>0号是保留端口. </p></li><li><p>1-1024是固定端口 </p><p>又叫有名端口,即被某些程序固定使用,一般程序员不使用. </p><p>22: SSH远程登录协议 23: teinet使用  21:ftp使用 </p><p>25: smtp服务使用 80:iis使用 7:echo服务 </p></li><li><p>1025-65535是动态端口 P 这些端口，程序员可以使用.</p></li></ol><h3 id="端口-port-使用注意"><a href="#端口-port-使用注意" class="headerlink" title="端口(port)-使用注意"></a>端口(port)-使用注意</h3><p>在计算机(尤其是做服务器)要尽可能的少 开端口 一个端口只能被一个程序监听 如果使用netstat -an可以查看本机有哪些端口在监听 可以使用netstat -anb 来查看监听端口的pid,在结合任务管理器关闭不安全的端口.</p><h2 id="tcp-socket-编程的客户端和服务器端（快速入门）"><a href="#tcp-socket-编程的客户端和服务器端（快速入门）" class="headerlink" title="tcp socket 编程的客户端和服务器端（快速入门）"></a>tcp socket 编程的客户端和服务器端（快速入门）</h2><p>为了授课方法，我们将tcp socket编程，简称 socket编程. 下图为Golang socket编程中客户端和服务器的网络分布</p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142138320.png" alt="image-20220214213848190" style="zoom:67%;" /><h3 id="服务端的处理流程"><a href="#服务端的处理流程" class="headerlink" title="服务端的处理流程"></a>服务端的处理流程</h3><ol><li>监听端口 </li><li>接收客户端的tcp链接，建立客户端和服务器端的链接. </li><li>创建goroutine，处理该链接的请求(通常客户端会通过链接发送请求包)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//循环接收客户端数据</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close() <span class="comment">//关闭 conn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//创建一个新的切片</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//conn.Read(buf)</span></span><br><span class="line"><span class="comment">//等待客户端通过 conn 发送信息</span></span><br><span class="line"><span class="comment">//如果客户端没有 write 发送,那么协程阻塞</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;服务器在等待客户端 %s 发送信息&quot;</span>, conn.RemoteAddr().String())</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端退出&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示客户端发送的内容到服务器的终端</span></span><br><span class="line">fmt.Print(<span class="type">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器开始监听...&quot;</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:9876&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;listen err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close() <span class="comment">//延时关闭 listen</span></span><br><span class="line"><span class="comment">//循环等待客户端来链接我</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//等待客户端连接</span></span><br><span class="line">fmt.Println(<span class="string">&quot;等待客户端来连接&quot;</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Accept() err=&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Accept() suc conn=%v 客户端 ip=%v\n&quot;</span>, conn, conn.RemoteAddr())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里准备起一个协程,为客户端服务</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;listen suc=%v\n&quot;, listen)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端的处理流程"><a href="#客户端的处理流程" class="headerlink" title="客户端的处理流程"></a>客户端的处理流程</h3><ol><li>建立与服务端的链接 </li><li>发送请求数据，接收服务器端返回的结果数据</li><li>关闭链接</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;192.168.69.169:9876&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;client dial err=&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn 成功&quot;</span>, conn)</span><br><span class="line"><span class="comment">//功能一:客户端发送单行数据,然后就退出</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin) <span class="comment">//标准输入</span></span><br><span class="line"><span class="comment">//从终端读取一行用户输入,并发送给服务器</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;readString err=&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再将 line 发送给服务器</span></span><br><span class="line">n, err := conn.Write([]<span class="type">byte</span>(line))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;conn.Write err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;客户端发送了 %d 字节的数据,并退出\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的程序示意图"><a href="#简单的程序示意图" class="headerlink" title="简单的程序示意图"></a>简单的程序示意图</h3><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202142147948.png" alt="image-20220214214716830" style="zoom:67%;" />]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第-18-章-TCP-编程&quot;&gt;&lt;a href=&quot;#第-18-章-TCP-编程&quot; class=&quot;headerlink&quot; title=&quot;第 18 章 TCP 编程&quot;&gt;&lt;/a&gt;第 18 章 &lt;code&gt;TCP&lt;/code&gt; 编程&lt;/h1&gt;&lt;h2 id=&quot;网络编程基本介绍&quot;&gt;&lt;a href=&quot;#网络编程基本介绍&quot; class=&quot;headerlink&quot; title=&quot;网络编程基本介绍&quot;&gt;&lt;/a&gt;网络编程基本介绍&lt;/h2&gt;&lt;p&gt;Golang的主要设计目标之一就是面向大规模 务端 程序必不可少也是至关重要的一部分。 &lt;/p&gt;
&lt;p&gt;网络编程有两种: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP socket编程，是网络编程的主流。之所以叫Tcp socket编程，是因为底层是 基于Tcp&amp;#x2F;ip协议的. 比如: QQ聊天 [示意图] &lt;/li&gt;
&lt;li&gt;b&amp;#x2F;s结构的http编程，我们使用浏览器去访问服务器时，使用的就是http协议， 而http底层依旧是用tcp socket实现的。[示意图] 比如: 京东商城 【这属于go web开发 范畴&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;网线，网卡，五险网卡&quot;&gt;&lt;a href=&quot;#网线，网卡，五险网卡&quot; class=&quot;headerlink&quot; title=&quot;网线，网卡，五险网卡&quot;&gt;&lt;/a&gt;网线，网卡，五险网卡&lt;/h3&gt;&lt;p&gt;计算机之间要相互通讯，必须要求网线，网卡，或者是无线网卡&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="网络编程" scheme="https://lllllmaster-lulllll.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="tcp编程" scheme="https://lllllmaster-lulllll.github.io/tags/tcp%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言第 15 章 单元测试</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2015%20%E7%AB%A0%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/Go%20%E8%AF%AD%E8%A8%80%E7%AC%AC%2015%20%E7%AB%A0%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:18:35.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-语言第-15-章-单元测试"><a href="#Go-语言第-15-章-单元测试" class="headerlink" title="Go 语言第 15 章 单元测试"></a>Go 语言第 15 章 单元测试</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在工作中，会遇到这样的情况，就是确认一个函数，或者一个模块的结果是否正确，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统的方法"><a href="#传统的方法" class="headerlink" title="传统的方法"></a>传统的方法</h2><p><strong>传统的方式来进行测试：</strong>在 main 函数中，调用 addUpper 函数，看看实际输出的结果是否和预期的结果一致，如果一致， 则说明函数正确，否则函数有错误，然后修改错误</p><span id="more"></span><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个被测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//传统的测试方法,就是在 main 函数中使用看结果是否正确</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;addUpper错误 返回值:%v  期望值:%v\n&quot;</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;addUpper正确 返回值:%v  期望值:%v\n&quot;</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>不方便，我们需要在 main 函数中去调用，这样需要修改 main 函数，如果项目正在运行，就可能要关闭服务器</li><li>不利于管理，当有多个模块时，都需要写在 main 函数，不利用管理</li><li>引出单元测试</li></ol><hr><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Go语言中自带有一个轻量级的测试框架testing和自带的go test命令来实现单元测试 和性能测试，testing框架和其他语言中的测试框架类似，可以基于这个框架写针对 相应函数的<strong>测试用例</strong>，也可以基于该框架写相应的压力测试用例。通过单元测试， 可以解决如下问题： </p><ol><li>确保每个函数是可运行，并且运行结果是正确的</li><li>确保写出来的代码性能是好的， </li><li>单元测试能及时的发现程序设计或实现的逻辑错误，使问题及早暴露，便于问 题的定位解决，而性能测试的重点在于发现程序设计上的一些问题，让程序能 够在高并发的情况下还能保持稳定</li></ol><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>使用 Go 的单元测试，对 addUpper 和 sub 函数进行测试。</p><p><strong>特别说明：</strong>测试时，<font color="ff0000">可能</font>需要暂时退出 360</p><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111614451.png" alt="image-20220211161416373"></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111609209.png" alt="image-20220211160924109"></p><h4 id="cal-go"><a href="#cal-go" class="headerlink" title="cal.go"></a>cal.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="comment">//被测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSub</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 - n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cal-test-go"><a href="#cal-test-go" class="headerlink" title="cal_test.go"></a>cal_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个测试用例,去测试 addUpper 是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;, 55, res)</span></span><br><span class="line">t.Fatalf(<span class="string">&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;</span>, <span class="number">55</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果正确,输出日志</span></span><br><span class="line">t.Logf(<span class="string">&quot;AddUpper(10) 执行正确&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sub-test-go"><a href="#sub-test-go" class="headerlink" title="sub_test.go"></a>sub_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个测试用例,去测试 addUpper 是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">7</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;, 55, res)</span></span><br><span class="line">t.Fatalf(<span class="string">&quot;AddUpper(10) 执行错误,期望值=%v  实际值=%v\n&quot;</span>, <span class="number">55</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果正确,输出日志</span></span><br><span class="line">t.Logf(<span class="string">&quot;AddUpper(10) 执行正确&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111613281.png" alt="image-20220211161313217"></p><h2 id="单元测试快速入门总结"><a href="#单元测试快速入门总结" class="headerlink" title="单元测试快速入门总结"></a>单元测试快速入门总结</h2><ol><li><p>测试用例文件名必须以 _test.go 结尾。 比如 cal_test.go，cal不是固定的。 </p></li><li><p>测试用例函数必须以Test开头，一般来说就是Test+被测试的函数名，比如TestAddUpper。 </p></li><li><p>TestAddUpper(t <em>tesing.T)的形参类型必须是</em>testing.T【看一下手册】 </p></li><li><p>一个测试用例文件中，可以有多个测试用例函数，比如 TestAddUpper、TestSub </p></li><li><p>运行测试用例指令 </p><ol><li><code>go test</code> [如果运行正确，无日志，错误时，会输出日志]</li><li><code>go test -v</code> [运行正确或是错误，都输出日志]</li></ol></li><li><p>当出现错误时，可以使用t.Fatalf 来格式化输出错误信息，并退出程序 </p></li><li><p>t.Logf 方法可以输出相应的日志 </p></li><li><p>测试用例函数，并没有放在main函数中，也执行了，这就是测试用例的方便之处[原理图]. </p></li><li><p>PASS表示测试用例运行成功，FAIL 表示测试用例运行失败 </p></li><li><p>测试单个文件，一定要带上被测试的原文件</p><p>go test -v tal_test.go cal.go </p></li><li><p>测试单个方法 </p><p>go test -v -test.run TestAddUpper</p></li></ol><h2 id="单元测试-综合案例"><a href="#单元测试-综合案例" class="headerlink" title="单元测试-综合案例"></a>单元测试-综合案例</h2><h3 id="单元测试综合案例要求"><a href="#单元测试综合案例要求" class="headerlink" title="单元测试综合案例要求"></a>单元测试综合案例要求</h3><ol><li>编写一个Monster结构体，字段Name, Age,Skill </li><li>给Monster绑定方法Store, 可以将一个Monster变量(对象),序列化后保存到文件中 </li><li>给Monster绑定方法ReStore, 可以将一个序列化的Monster,从文件中读取，并反序列化为Monster对象 ,检查反序列化是否正确</li><li>编程测试用例文件 store_test.go， 编写测试用例函数 TestStore 和TestRestore进行测试</li></ol><h3 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h3><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/202202111834030.png" alt="image-20220211183401903"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>monster_test.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 monster</span></span><br><span class="line">monster := Monster&#123;</span><br><span class="line">Name:  <span class="string">&quot;红孩儿&quot;</span>,</span><br><span class="line">Age:   <span class="number">10</span>,</span><br><span class="line">Skill: <span class="string">&quot;吐火&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">res := monster.Store()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.Store() 错误,希望为 %v 实际为 %v\n&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;monster.Store() 测试成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 Monster 实例,不需要指定字段的值</span></span><br><span class="line"><span class="keyword">var</span> monster = &amp;Monster&#123;&#125;</span><br><span class="line">res := monster.ReStore()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.ReStore() 错误, 希望为 %v 实际为 %v \n&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进一步判断</span></span><br><span class="line"><span class="keyword">if</span> monster.Name != <span class="string">&quot;红孩儿&quot;</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;monster.ReStore() 错误, 希望为 %v 实际为 %v \n&quot;</span>, <span class="string">&quot;红孩儿&quot;</span>, monster.Name)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;monster.ReStore() 测试成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>monster.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span></span><br><span class="line">Skill <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 monster绑定方法 Store,可以将一个 monster 变量,序列化后保存到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> Store() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//先序列化</span></span><br><span class="line">data, err := json.Marshal(m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;marshal err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存到文件</span></span><br><span class="line">filepath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">err = ioutil.WriteFile(filepath, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;write file err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 Monster 绑定方法 ReStore, 可以将一个序列化的 Monster,从文件中读取,</span></span><br><span class="line"><span class="comment">//并反序列化为 Monster 对象,检查反序列化,名字正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> ReStore() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//1.先从文件中,读取序列化的字符串</span></span><br><span class="line">filePath := <span class="string">&quot;/Users/aurora/iceCode/godev/data.txt&quot;</span></span><br><span class="line">data, err := ioutil.ReadFile(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Read file err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用读取 data []byte,反序列化</span></span><br><span class="line">err = json.Unmarshal(data, &amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;UnMarshal err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go-语言第-15-章-单元测试&quot;&gt;&lt;a href=&quot;#Go-语言第-15-章-单元测试&quot; class=&quot;headerlink&quot; title=&quot;Go 语言第 15 章 单元测试&quot;&gt;&lt;/a&gt;Go 语言第 15 章 单元测试&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;在工作中，会遇到这样的情况，就是确认一个函数，或者一个模块的结果是否正确，如&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addUpper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res += i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;传统的方法&quot;&gt;&lt;a href=&quot;#传统的方法&quot; class=&quot;headerlink&quot; title=&quot;传统的方法&quot;&gt;&lt;/a&gt;传统的方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;传统的方式来进行测试：&lt;/strong&gt;在 main 函数中，调用 addUpper 函数，看看实际输出的结果是否和预期的结果一致，如果一致， 则说明函数正确，否则函数有错误，然后修改错误&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://lllllmaster-lulllll.github.io/categories/programming/"/>
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/tags/golang/"/>
    
    <category term="单元测试" scheme="https://lllllmaster-lulllll.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>继承和接口的区别</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB%20/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/go%20%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%8C%BA%E5%88%AB%20/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T15:45:50.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承和接口的区别"><a href="#继承和接口的区别" class="headerlink" title="继承和接口的区别"></a>继承和接口的区别</h1><p><img src="https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/1644043521565.png" alt="接口和继承"></p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeJudge</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, v := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 bool 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">float32</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 float32 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 float64 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>, <span class="type">int32</span>, <span class="type">int64</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 整数 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数是 string 类型,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第 %v 个参数类型不确定,值是 %v\n&quot;</span>, index+<span class="number">1</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="type">float32</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">2.3</span></span><br><span class="line"><span class="keyword">var</span> n3 <span class="type">int32</span> = <span class="number">789</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">address := <span class="string">&quot;北京&quot;</span></span><br><span class="line">n4 := <span class="number">300</span></span><br><span class="line">TypeJudge(n1, n2, n3, name, address, n4)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;继承和接口的区别&quot;&gt;&lt;a href=&quot;#继承和接口的区别&quot; class=&quot;headerlink&quot; title=&quot;继承和接口的区别&quot;&gt;&lt;/a&gt;继承和接口的区别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://icetuchuang.oss-cn-beijing.aliyuncs.com/img/1644043521565.png&quot; alt=&quot;接口和继承&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="https://lllllmaster-lulllll.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 安装使用 redis</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20redis/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/mac%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20redis/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-03T05:13:35.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-安装使用-redis"><a href="#mac-安装使用-redis" class="headerlink" title="mac 安装使用 redis"></a>mac 安装使用 redis</h1><p><strong>使用 brew 安装 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p><strong>使用 brew 启动 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/opt/redis/bin/redis-server  /opt/homebrew/etc/redis.conf</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>使用 brew 卸载 redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall redis</span><br><span class="line">//下面是一段输出信息</span><br><span class="line">//注意后两段</span><br></pre></td></tr></table></figure><blockquote><p>Uninstalling &#x2F;opt&#x2F;homebrew&#x2F;Cellar&#x2F;redis&#x2F;6.2.6… (14 files, 2MB)</p><p>Warning: The following may be redis configuration files and have not been removed!<br>If desired, remove them manually with <code>rm -rf</code>:<br> &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;redis-sentinel.conf  &#x2F;&#x2F;需要手动删除<br> &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;redis.conf                 &#x2F;&#x2F;需要手动删除</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mac-安装使用-redis&quot;&gt;&lt;a href=&quot;#mac-安装使用-redis&quot; class=&quot;headerlink&quot; title=&quot;mac 安装使用 redis&quot;&gt;&lt;/a&gt;mac 安装使用 redis&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;使用 brew 安装 redis&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;使用 brew 启动 redis&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/opt/homebrew/opt/redis/bin/redis-server  /opt/homebrew/etc/redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术杂记" scheme="https://lllllmaster-lulllll.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="mac" scheme="https://lllllmaster-lulllll.github.io/tags/mac/"/>
    
    <category term="redis 使用" scheme="https://lllllmaster-lulllll.github.io/tags/redis-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>常量</title>
    <link href="https://lllllmaster-lulllll.github.io/2022/03/02/%E5%B8%B8%E9%87%8F/"/>
    <id>https://lllllmaster-lulllll.github.io/2022/03/02/%E5%B8%B8%E9%87%8F/</id>
    <published>2022-03-02T14:26:25.000Z</published>
    <updated>2022-03-02T15:45:20.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="常量介绍"><a href="#常量介绍" class="headerlink" title="常量介绍"></a>常量介绍</h2><ol><li>常量使用const修改 </li><li>常量在定义的时候，必须初始化 </li><li>常量不能修改 常量只能修饰bool、数值类型(int，float系列)、string 类型 </li><li>语法：const identifier [type] &#x3D; value </li><li>举例说明,看看下面的写法是否正确： <ol><li>const name &#x3D; “tom”  :white_check_mark:</li><li>const tax float64 &#x3D; 0.8 :white_check_mark:</li><li>const a int :x:</li><li>const a int const b &#x3D; 9 &#x2F; 3 :white_check_mark:</li><li>const c &#x3D; getVal():x:</li></ol></li></ol><span id="more"></span><h2 id="常量使用注意事项"><a href="#常量使用注意事项" class="headerlink" title="常量使用注意事项"></a>常量使用注意事项</h2><ol><li><p>比较简洁的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span>(</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    b=<span class="number">2</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一种专业的写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">    d</span><br><span class="line">  )</span><br><span class="line">  fmt.Println(a,b,c) <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Go中没有常量名必须字母大写的规范 比如 TAX_RATE</p></li><li><p>仍然通过首字母的大小写来控制常量的访问范围</p></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h1&gt;&lt;h2 id=&quot;常量介绍&quot;&gt;&lt;a href=&quot;#常量介绍&quot; class=&quot;headerlink&quot; title=&quot;常量介绍&quot;&gt;&lt;/a&gt;常量介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;常量使用const修改 &lt;/li&gt;
&lt;li&gt;常量在定义的时候，必须初始化 &lt;/li&gt;
&lt;li&gt;常量不能修改 常量只能修饰bool、数值类型(int，float系列)、string 类型 &lt;/li&gt;
&lt;li&gt;语法：const identifier [type] &amp;#x3D; value &lt;/li&gt;
&lt;li&gt;举例说明,看看下面的写法是否正确： &lt;ol&gt;
&lt;li&gt;const name &amp;#x3D; “tom”  :white_check_mark:&lt;/li&gt;
&lt;li&gt;const tax float64 &amp;#x3D; 0.8 :white_check_mark:&lt;/li&gt;
&lt;li&gt;const a int :x:&lt;/li&gt;
&lt;li&gt;const a int const b &amp;#x3D; 9 &amp;#x2F; 3 :white_check_mark:&lt;/li&gt;
&lt;li&gt;const c &amp;#x3D; getVal():x:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
